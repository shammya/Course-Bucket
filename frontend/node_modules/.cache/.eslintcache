[{"D:\\program\\java\\coursebucket\\frontend\\src\\index.js":"1","D:\\program\\java\\coursebucket\\frontend\\src\\reportWebVitals.js":"2","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\Tools.tsx":"3","D:\\program\\java\\coursebucket\\frontend\\src\\App.tsx":"4","D:\\program\\java\\coursebucket\\frontend\\src\\Theme.js":"5","D:\\program\\java\\coursebucket\\frontend\\src\\components\\Home.tsx":"6","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\SearchPage.tsx":"7","D:\\program\\java\\coursebucket\\frontend\\src\\layout\\Auth.tsx":"8","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\MyCourse.tsx":"9","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\AdminDashboard.tsx":"10","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\CoursePage.tsx":"11","D:\\program\\java\\coursebucket\\frontend\\src\\components\\messenger\\Messenger.tsx":"12","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\dashboard\\Dashboard.tsx":"13","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\ProfileDetails.tsx":"14","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\CategoryCourse.tsx":"15","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\Profile.tsx":"16","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\CreateCoursePage.tsx":"17","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\api\\TeacherService.tsx":"18","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\api\\PersonService.tsx":"19","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Landing.tsx":"20","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\api\\StudentService.tsx":"21","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\api\\CourseService.tsx":"22","D:\\program\\java\\coursebucket\\frontend\\src\\layout\\User.tsx":"23","D:\\program\\java\\coursebucket\\frontend\\src\\components\\auth\\api\\AuthService.tsx":"24","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\TargetStudent.tsx":"25","D:\\program\\java\\coursebucket\\frontend\\src\\Configure.js":"26","D:\\program\\java\\coursebucket\\frontend\\src\\layout\\DrawerLayout.tsx":"27","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\LanguageField.js":"28","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\CategoryService.js":"29","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\ImageUploader.tsx":"30","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\AddAbleTextField.tsx":"31","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\SimpleBackdrop.tsx":"32","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\CustomPagination.tsx":"33","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\ControlledTextfield.tsx":"34","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\CoursePrice.tsx":"35","D:\\program\\java\\coursebucket\\frontend\\src\\components\\footer\\Footer.tsx":"36","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\ImageVeiw.tsx":"37","D:\\program\\java\\coursebucket\\frontend\\src\\classes\\Course.tsx":"38","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\Curriculum.tsx":"39","D:\\program\\java\\coursebucket\\frontend\\src\\components\\header\\Header.tsx":"40","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\responsive\\Responsive.js":"41","D:\\program\\java\\coursebucket\\frontend\\src\\classes\\Files.tsx":"42","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\LanguageService.js":"43","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\EduStatusService.js":"44","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\DesignationService.js":"45","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\responsive\\utilResponsive.js":"46","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\CountryService.js":"47","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\ShadowText.tsx":"48","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\dashboard\\FAQview.tsx":"49","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\dashboard\\PurchaseHistoryLIstView.tsx":"50","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\dashboard\\ReviewListView.tsx":"51","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\FileUploader.tsx":"52","D:\\program\\java\\coursebucket\\frontend\\src\\components\\footer\\SimpleReactFooter.tsx":"53","D:\\program\\java\\coursebucket\\frontend\\src\\components\\header\\NotificationPopUp.tsx":"54","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\WeekView.tsx":"55","D:\\program\\java\\coursebucket\\frontend\\src\\components\\header\\NavBar.tsx":"56","D:\\program\\java\\coursebucket\\frontend\\src\\classes\\Person.tsx":"57","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\CourseBox.tsx":"58","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\LectureView.tsx":"59","D:\\program\\java\\coursebucket\\frontend\\src\\components\\header\\MenuBar.tsx":"60","D:\\program\\java\\coursebucket\\frontend\\src\\layout\\Pagination.tsx":"61","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\Review.tsx":"62","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\FAQ.tsx":"63","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\VideoOutput.tsx":"64","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\VideoInput.tsx":"65","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\PDFInput.tsx":"66","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\PDFOutput.tsx":"67","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\LinkInput.tsx":"68","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\LinkOutput.tsx":"69","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\ArticleInput.tsx":"70","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\ArticleOutput.tsx":"71","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\OutputLayout.tsx":"72","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\InputLayout.tsx":"73","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\TextEditor.tsx":"74","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\VideoPlayer.tsx":"75","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\TeacherInfoComponent.js":"76","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\StudentInfoComponent.js":"77","D:\\program\\java\\coursebucket\\frontend\\src\\components\\messenger\\MessageService.tsx":"78","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\teacher\\IncomePerCourseChart.tsx":"79","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\teacher\\RatingLIneChart.tsx":"80","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\teacher\\PopularityPieChart.tsx":"81","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\dashboard\\EnrolledStudentListView.tsx":"82","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\LanguageComponent.js":"83","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\EduStatusComponent.js":"84","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\teacher\\Overview.tsx":"85","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\DesignationComponent.js":"86","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\CountryComponent.js":"87","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\CategoryComponent.js":"88","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\SliderComponent.tsx":"89","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\InfoService.js":"90","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\CourseApprovalComponent.tsx":"91","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\charts\\PopurlarCourseAdminChart.tsx":"92","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\charts\\PopularCategoryChart.tsx":"93","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\Cards.tsx":"94","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\CourseApprovalService.js":"95","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\InstructorShortDetails.tsx":"96","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\useWindowDimension.tsx":"97","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\Rating.tsx":"98","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\Checkout.tsx":"99","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\SliderService.tsx":"100","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\charts\\UserRegistrationChart.tsx":"101","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\CourseCarousel.tsx":"102","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\api\\SearchService.tsx":"103","D:\\program\\java\\coursebucket\\frontend\\src\\components\\ImageCarousel.js":"104","D:\\program\\java\\coursebucket\\frontend\\src\\components\\auth\\SignUp.tsx":"105","D:\\program\\java\\coursebucket\\frontend\\src\\components\\auth\\ForgotPassword.tsx":"106","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\Sort.tsx":"107","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\Filter.tsx":"108","D:\\program\\java\\coursebucket\\frontend\\src\\components\\auth\\SignIn.tsx":"109","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\filter\\Chips.tsx":"110","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\CustomCarousel.js":"111","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\filter\\MakeList.tsx":"112","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\filter\\FilterCheckbox.tsx":"113","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\filter\\FilterSlider.tsx":"114","D:\\program\\java\\coursebucket\\frontend\\src\\classes\\Category.tsx":"115","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\CategorySelector.tsx":"116"},{"size":1354,"mtime":1629736228818,"results":"117","hashOfConfig":"118"},{"size":362,"mtime":499162500000,"results":"119","hashOfConfig":"118"},{"size":2477,"mtime":1630999707941,"results":"120","hashOfConfig":"118"},{"size":2433,"mtime":1630999707559,"results":"121","hashOfConfig":"118"},{"size":2487,"mtime":1629736228260,"results":"122","hashOfConfig":"118"},{"size":20600,"mtime":1629736228283,"results":"123","hashOfConfig":"118"},{"size":9456,"mtime":1629736228813,"results":"124","hashOfConfig":"118"},{"size":3588,"mtime":1629705218930,"results":"125","hashOfConfig":"118"},{"size":1210,"mtime":1629094776537,"results":"126","hashOfConfig":"118"},{"size":7066,"mtime":1630999707661,"results":"127","hashOfConfig":"118"},{"size":22612,"mtime":1630999707761,"results":"128","hashOfConfig":"118"},{"size":19087,"mtime":1630999707796,"results":"129","hashOfConfig":"118"},{"size":5978,"mtime":1630999707879,"results":"130","hashOfConfig":"118"},{"size":24178,"mtime":1630999707858,"results":"131","hashOfConfig":"118"},{"size":1452,"mtime":1630999707715,"results":"132","hashOfConfig":"118"},{"size":13293,"mtime":1630999707806,"results":"133","hashOfConfig":"118"},{"size":10592,"mtime":1630999707763,"results":"134","hashOfConfig":"118"},{"size":1340,"mtime":1629705218911,"results":"135","hashOfConfig":"118"},{"size":1679,"mtime":1629705218908,"results":"136","hashOfConfig":"118"},{"size":9566,"mtime":1628860619901,"results":"137","hashOfConfig":"118"},{"size":1094,"mtime":1629705218910,"results":"138","hashOfConfig":"118"},{"size":4543,"mtime":1630999707760,"results":"139","hashOfConfig":"118"},{"size":1545,"mtime":1630999707938,"results":"140","hashOfConfig":"118"},{"size":2541,"mtime":1630999707695,"results":"141","hashOfConfig":"118"},{"size":1636,"mtime":1628860619903,"results":"142","hashOfConfig":"118"},{"size":68,"mtime":1628860619618,"results":"143","hashOfConfig":"118"},{"size":6249,"mtime":1630999707936,"results":"144","hashOfConfig":"118"},{"size":3759,"mtime":1629705218954,"results":"145","hashOfConfig":"118"},{"size":671,"mtime":1629479117957,"results":"146","hashOfConfig":"118"},{"size":3811,"mtime":1629705218951,"results":"147","hashOfConfig":"118"},{"size":5705,"mtime":1628860619844,"results":"148","hashOfConfig":"118"},{"size":662,"mtime":1629350664018,"results":"149","hashOfConfig":"118"},{"size":2334,"mtime":1629736228518,"results":"150","hashOfConfig":"118"},{"size":4074,"mtime":1629705218936,"results":"151","hashOfConfig":"118"},{"size":5994,"mtime":1629705218878,"results":"152","hashOfConfig":"118"},{"size":2686,"mtime":1629781660065,"results":"153","hashOfConfig":"118"},{"size":1678,"mtime":1629736228825,"results":"154","hashOfConfig":"118"},{"size":4523,"mtime":1629350663487,"results":"155","hashOfConfig":"118"},{"size":2405,"mtime":1629705218879,"results":"156","hashOfConfig":"118"},{"size":13949,"mtime":1630999707772,"results":"157","hashOfConfig":"118"},{"size":1890,"mtime":1629736228826,"results":"158","hashOfConfig":"118"},{"size":1860,"mtime":1630999707587,"results":"159","hashOfConfig":"118"},{"size":678,"mtime":1629478925457,"results":"160","hashOfConfig":"118"},{"size":693,"mtime":1629478925456,"results":"161","hashOfConfig":"118"},{"size":720,"mtime":1629478925416,"results":"162","hashOfConfig":"118"},{"size":4886,"mtime":1629350664056,"results":"163","hashOfConfig":"118"},{"size":672,"mtime":1629478925414,"results":"164","hashOfConfig":"118"},{"size":656,"mtime":1629705218955,"results":"165","hashOfConfig":"118"},{"size":1908,"mtime":1629705218915,"results":"166","hashOfConfig":"118"},{"size":4742,"mtime":1629705218916,"results":"167","hashOfConfig":"118"},{"size":2003,"mtime":1629705218918,"results":"168","hashOfConfig":"118"},{"size":3130,"mtime":1629736228823,"results":"169","hashOfConfig":"118"},{"size":8569,"mtime":1630999707770,"results":"170","hashOfConfig":"118"},{"size":9433,"mtime":1629736228728,"results":"171","hashOfConfig":"118"},{"size":6348,"mtime":1629705218892,"results":"172","hashOfConfig":"118"},{"size":3900,"mtime":1630999707781,"results":"173","hashOfConfig":"118"},{"size":2081,"mtime":1629094776529,"results":"174","hashOfConfig":"118"},{"size":9108,"mtime":1630999707759,"results":"175","hashOfConfig":"118"},{"size":11313,"mtime":1629705218880,"results":"176","hashOfConfig":"118"},{"size":5311,"mtime":1630999707780,"results":"177","hashOfConfig":"118"},{"size":3296,"mtime":1629705218933,"results":"178","hashOfConfig":"118"},{"size":9371,"mtime":1629705218876,"results":"179","hashOfConfig":"118"},{"size":10482,"mtime":1629705218872,"results":"180","hashOfConfig":"118"},{"size":1421,"mtime":1629350663742,"results":"181","hashOfConfig":"118"},{"size":1038,"mtime":1628860619870,"results":"182","hashOfConfig":"118"},{"size":1099,"mtime":1628860619868,"results":"183","hashOfConfig":"118"},{"size":1382,"mtime":1629705218881,"results":"184","hashOfConfig":"118"},{"size":1174,"mtime":1628860619850,"results":"185","hashOfConfig":"118"},{"size":751,"mtime":1629350663724,"results":"186","hashOfConfig":"118"},{"size":1107,"mtime":1628860619847,"results":"187","hashOfConfig":"118"},{"size":525,"mtime":1629350663720,"results":"188","hashOfConfig":"118"},{"size":813,"mtime":1629350663725,"results":"189","hashOfConfig":"118"},{"size":969,"mtime":1629736228524,"results":"190","hashOfConfig":"118"},{"size":924,"mtime":1629094776552,"results":"191","hashOfConfig":"118"},{"size":565,"mtime":1629705218956,"results":"192","hashOfConfig":"118"},{"size":2402,"mtime":1629705218838,"results":"193","hashOfConfig":"118"},{"size":2940,"mtime":1629705218837,"results":"194","hashOfConfig":"118"},{"size":612,"mtime":1630999707795,"results":"195","hashOfConfig":"118"},{"size":1513,"mtime":1629736228804,"results":"196","hashOfConfig":"118"},{"size":2232,"mtime":1629736228809,"results":"197","hashOfConfig":"118"},{"size":2683,"mtime":1629736228808,"results":"198","hashOfConfig":"118"},{"size":2625,"mtime":1629705218913,"results":"199","hashOfConfig":"118"},{"size":3375,"mtime":1628067383141,"results":"200","hashOfConfig":"118"},{"size":3467,"mtime":1628067373904,"results":"201","hashOfConfig":"118"},{"size":8683,"mtime":1630999707880,"results":"202","hashOfConfig":"118"},{"size":3520,"mtime":1628067405054,"results":"203","hashOfConfig":"118"},{"size":3666,"mtime":1628860619642,"results":"204","hashOfConfig":"118"},{"size":7520,"mtime":1629736228266,"results":"205","hashOfConfig":"118"},{"size":5119,"mtime":1629736228270,"results":"206","hashOfConfig":"118"},{"size":747,"mtime":1629350663540,"results":"207","hashOfConfig":"118"},{"size":4440,"mtime":1629736228268,"results":"208","hashOfConfig":"118"},{"size":2861,"mtime":1629736228276,"results":"209","hashOfConfig":"118"},{"size":1916,"mtime":1629736228274,"results":"210","hashOfConfig":"118"},{"size":3539,"mtime":1629350663490,"results":"211","hashOfConfig":"118"},{"size":1066,"mtime":1629350663539,"results":"212","hashOfConfig":"118"},{"size":3581,"mtime":1629705218874,"results":"213","hashOfConfig":"118"},{"size":612,"mtime":1630999707942,"results":"214","hashOfConfig":"118"},{"size":6735,"mtime":1629736228522,"results":"215","hashOfConfig":"118"},{"size":11185,"mtime":1629350663588,"results":"216","hashOfConfig":"118"},{"size":675,"mtime":1629736228272,"results":"217","hashOfConfig":"118"},{"size":5325,"mtime":1630999707681,"results":"218","hashOfConfig":"118"},{"size":1407,"mtime":1629350663585,"results":"219","hashOfConfig":"118"},{"size":503,"mtime":1629478925952,"results":"220","hashOfConfig":"118"},{"size":1555,"mtime":1629957126690,"results":"221","hashOfConfig":"118"},{"size":8301,"mtime":1629743074730,"results":"222","hashOfConfig":"118"},{"size":10237,"mtime":1629743074574,"results":"223","hashOfConfig":"118"},{"size":2875,"mtime":1629736228815,"results":"224","hashOfConfig":"118"},{"size":7168,"mtime":1629736228811,"results":"225","hashOfConfig":"118"},{"size":6511,"mtime":1630999707683,"results":"226","hashOfConfig":"118"},{"size":2757,"mtime":1629736228817,"results":"227","hashOfConfig":"118"},{"size":1204,"mtime":1629705218951,"results":"228","hashOfConfig":"118"},{"size":4084,"mtime":1629478926170,"results":"229","hashOfConfig":"118"},{"size":616,"mtime":1627835688873,"results":"230","hashOfConfig":"118"},{"size":4001,"mtime":1629478926168,"results":"231","hashOfConfig":"118"},{"size":5297,"mtime":1629478925041,"results":"232","hashOfConfig":"118"},{"size":6331,"mtime":1629478926173,"results":"233","hashOfConfig":"118"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o4wz0b",{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"281"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"284"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"290"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"311"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"348"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"351"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"354"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"359"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":"375"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438"},{"filePath":"439","messages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"441"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446"},{"filePath":"447","messages":"448","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"486"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493"},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"499"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502"},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"507"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519"},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"532"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542"},"D:\\program\\java\\coursebucket\\frontend\\src\\index.js",[],"D:\\program\\java\\coursebucket\\frontend\\src\\reportWebVitals.js",[],"D:\\program\\java\\coursebucket\\frontend\\src\\tools\\Tools.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\App.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\Theme.js",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\Home.tsx",["543","544","545"],"import { Grid, makeStyles } from \"@material-ui/core\";\r\nimport ImageSlider from \"components/ImageCarousel\";\r\nimport User from \"layout/User\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { CarouselCourse } from \"./../classes/Course\";\r\nimport CourseService from \"./course/api/CourseService\";\r\nimport { CourseCarousel } from \"./course/CourseCarousel\";\r\n\r\nconst courses = [\r\n  {\r\n    title: \"Free courses\",\r\n    courses: [\r\n      {\r\n        title: \"Cyber Security A-Z™: Masterclass Course for Non-Techies\",\r\n        teacherName: \"SecuritaxX Training\",\r\n        description: \"description\",\r\n        price: 15.34,\r\n        off: 10,\r\n        rating: 4.7,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/3999038_774b_3.jpg?0O6mWh_G8l9pF1oR_dGMPstU0RmR5gFUMv-vboXFLJolt16D-xtvP4Mt33KoSimt-0DNu7uEBu4A9NXepzIONkw9_uRAXpp2KJyfGhuckXI-uok6cMVFmkoBMAgGQ9cT\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/3982702_080f.jpg?XhzgbicwFbp0aNwJnXU-vv9KTtW_2TNMYJPizj1oaLkASEAujVd9OHVJmsY8aBDibofLoBkpKNsWAiZtYEY8Pqk-dF3UaoPV3vC8jQQX2g3DfKDmKr7NhNTMBWewVg\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/1236568_5ada_11.jpg?e_0Sx-UPqDJvyS2H1Q1pkqzWtQxIfolLpKyI-NJXKWubdn9EIQ9FRyuBCOnSmGpL8fhlaq4mEUM0A2HcR3w4jSNYTH3oDouIFqPvxqedilXccrDNZlDgHnIAgZ6PJj8YTw\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/1973756_9eda_75.jpg?9T1i30Gg2W6jwGwByAQF_3UT4LRlkjLFSSExrFLHRaJiN1HLQKlCLEHOb5xBFEnts2xNbztVlgKTOU0kw2forcA2mvMSaqp1RsLmBN1MuACyFZrQmSoUhgaPEeYgufmWQQ\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/383250_6c28_10.jpg?JCCHILYNhk_gz28VD0TtBcbUSnaf6FDfTDcTfyCS1oNrAn44_HdndKVJodaBJWyiRdPA-TL--LVhaR5gHN1zUNIGUQbEwz0S_QOK9Taii8zNT2Go4vKFzitVY6CMiAhf\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-c.udemycdn.com/course/240x135/1496052_f94e_3.jpg?Expires=1620843373&Signature=aeYgd-08tRLBMr8iaCzC~jetXQUM7O~O004Qm1NkPUAzbkhg6VERxOqp7UmdRus8OII8Ohhn24it1gVgWTFvTf7wlaM5HAQS2QyMLhWceNfqzG7pMsOSGzatUp7ahFX~0C8Bq~Gx5FGIlrQir~XfNLFZIvxLztw1H-~s7hH-TeFvb77kbgTVqWxmQVoPCbMb37IYbLEs6ECqVWPHZQKdO~JnpE-jc5DUooKommkyut6tqHgrFpUf5SApMEHv7pjdtOJA7WtR6XDsTm8cqVznJYCltnBrE7Fn3bO9tyryKHTgGodiI07HeUAE6Q3bwY9Z0PWHpv3dBplGu5aP9NuGIQ__&Key-Pair-Id=APKAITJV77WS5ZT7262A\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-b.udemycdn.com/course/240x135/2755896_0718_2.jpg?secure=uqsrFIDRBc0b-6zV3mMT1A%3D%3D%2C1620852240\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-c.udemycdn.com/course/240x135/1496052_f94e_3.jpg?Expires=1620843373&Signature=aeYgd-08tRLBMr8iaCzC~jetXQUM7O~O004Qm1NkPUAzbkhg6VERxOqp7UmdRus8OII8Ohhn24it1gVgWTFvTf7wlaM5HAQS2QyMLhWceNfqzG7pMsOSGzatUp7ahFX~0C8Bq~Gx5FGIlrQir~XfNLFZIvxLztw1H-~s7hH-TeFvb77kbgTVqWxmQVoPCbMb37IYbLEs6ECqVWPHZQKdO~JnpE-jc5DUooKommkyut6tqHgrFpUf5SApMEHv7pjdtOJA7WtR6XDsTm8cqVznJYCltnBrE7Fn3bO9tyryKHTgGodiI07HeUAE6Q3bwY9Z0PWHpv3dBplGu5aP9NuGIQ__&Key-Pair-Id=APKAITJV77WS5ZT7262A\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/281138_ccf8_11.jpg?TprpjJMm8IQos4lS1CQffJPeyOwGOnN9CghuG5hNCt4LWMpR9aAQw9x5Oen1RAjY33HrgEKyRHODVoeoO3adz75AljciuiH3t0sifE98UVyYismSn8GUBLy-aY6Blypp\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/1391482_1971_3.jpg?K524xlWzp_YC_-b670oyuKh3laRy_FmOilbl-FImB3Ps8omHpDejMT-vQsWlYnInYTEei_j9Oa4vtU9K0nyaY7MlloXYdMKbbgLWLpiPJqvlhPd8rSiDSaALcIKn5w_I#\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"Premium courses\",\r\n    courses: [\r\n      {\r\n        title: \"Cyber Security A-Z™: Masterclass Course for Non-Techies\",\r\n        teacherName: \"SecuritaxX Training\",\r\n        description: \"description\",\r\n        price: 15.34,\r\n        off: 10,\r\n        rating: 4.7,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/3999038_774b_3.jpg?0O6mWh_G8l9pF1oR_dGMPstU0RmR5gFUMv-vboXFLJolt16D-xtvP4Mt33KoSimt-0DNu7uEBu4A9NXepzIONkw9_uRAXpp2KJyfGhuckXI-uok6cMVFmkoBMAgGQ9cT\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/3982702_080f.jpg?XhzgbicwFbp0aNwJnXU-vv9KTtW_2TNMYJPizj1oaLkASEAujVd9OHVJmsY8aBDibofLoBkpKNsWAiZtYEY8Pqk-dF3UaoPV3vC8jQQX2g3DfKDmKr7NhNTMBWewVg\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/1236568_5ada_11.jpg?e_0Sx-UPqDJvyS2H1Q1pkqzWtQxIfolLpKyI-NJXKWubdn9EIQ9FRyuBCOnSmGpL8fhlaq4mEUM0A2HcR3w4jSNYTH3oDouIFqPvxqedilXccrDNZlDgHnIAgZ6PJj8YTw\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/1973756_9eda_75.jpg?9T1i30Gg2W6jwGwByAQF_3UT4LRlkjLFSSExrFLHRaJiN1HLQKlCLEHOb5xBFEnts2xNbztVlgKTOU0kw2forcA2mvMSaqp1RsLmBN1MuACyFZrQmSoUhgaPEeYgufmWQQ\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/383250_6c28_10.jpg?JCCHILYNhk_gz28VD0TtBcbUSnaf6FDfTDcTfyCS1oNrAn44_HdndKVJodaBJWyiRdPA-TL--LVhaR5gHN1zUNIGUQbEwz0S_QOK9Taii8zNT2Go4vKFzitVY6CMiAhf\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-c.udemycdn.com/course/240x135/1496052_f94e_3.jpg?Expires=1620843373&Signature=aeYgd-08tRLBMr8iaCzC~jetXQUM7O~O004Qm1NkPUAzbkhg6VERxOqp7UmdRus8OII8Ohhn24it1gVgWTFvTf7wlaM5HAQS2QyMLhWceNfqzG7pMsOSGzatUp7ahFX~0C8Bq~Gx5FGIlrQir~XfNLFZIvxLztw1H-~s7hH-TeFvb77kbgTVqWxmQVoPCbMb37IYbLEs6ECqVWPHZQKdO~JnpE-jc5DUooKommkyut6tqHgrFpUf5SApMEHv7pjdtOJA7WtR6XDsTm8cqVznJYCltnBrE7Fn3bO9tyryKHTgGodiI07HeUAE6Q3bwY9Z0PWHpv3dBplGu5aP9NuGIQ__&Key-Pair-Id=APKAITJV77WS5ZT7262A\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-b.udemycdn.com/course/240x135/2755896_0718_2.jpg?secure=uqsrFIDRBc0b-6zV3mMT1A%3D%3D%2C1620852240\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-c.udemycdn.com/course/240x135/1496052_f94e_3.jpg?Expires=1620843373&Signature=aeYgd-08tRLBMr8iaCzC~jetXQUM7O~O004Qm1NkPUAzbkhg6VERxOqp7UmdRus8OII8Ohhn24it1gVgWTFvTf7wlaM5HAQS2QyMLhWceNfqzG7pMsOSGzatUp7ahFX~0C8Bq~Gx5FGIlrQir~XfNLFZIvxLztw1H-~s7hH-TeFvb77kbgTVqWxmQVoPCbMb37IYbLEs6ECqVWPHZQKdO~JnpE-jc5DUooKommkyut6tqHgrFpUf5SApMEHv7pjdtOJA7WtR6XDsTm8cqVznJYCltnBrE7Fn3bO9tyryKHTgGodiI07HeUAE6Q3bwY9Z0PWHpv3dBplGu5aP9NuGIQ__&Key-Pair-Id=APKAITJV77WS5ZT7262A\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/281138_ccf8_11.jpg?TprpjJMm8IQos4lS1CQffJPeyOwGOnN9CghuG5hNCt4LWMpR9aAQw9x5Oen1RAjY33HrgEKyRHODVoeoO3adz75AljciuiH3t0sifE98UVyYismSn8GUBLy-aY6Blypp\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/1391482_1971_3.jpg?K524xlWzp_YC_-b670oyuKh3laRy_FmOilbl-FImB3Ps8omHpDejMT-vQsWlYnInYTEei_j9Oa4vtU9K0nyaY7MlloXYdMKbbgLWLpiPJqvlhPd8rSiDSaALcIKn5w_I#\",\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"Premium courses\",\r\n    courses: [\r\n      {\r\n        title: \"Cyber Security A-Z™: Masterclass Course for Non-Techies\",\r\n        teacherName: \"SecuritaxX Training\",\r\n        description: \"description\",\r\n        price: 15.34,\r\n        off: 10,\r\n        rating: 4.7,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/3999038_774b_3.jpg?0O6mWh_G8l9pF1oR_dGMPstU0RmR5gFUMv-vboXFLJolt16D-xtvP4Mt33KoSimt-0DNu7uEBu4A9NXepzIONkw9_uRAXpp2KJyfGhuckXI-uok6cMVFmkoBMAgGQ9cT\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/3982702_080f.jpg?XhzgbicwFbp0aNwJnXU-vv9KTtW_2TNMYJPizj1oaLkASEAujVd9OHVJmsY8aBDibofLoBkpKNsWAiZtYEY8Pqk-dF3UaoPV3vC8jQQX2g3DfKDmKr7NhNTMBWewVg\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/1236568_5ada_11.jpg?e_0Sx-UPqDJvyS2H1Q1pkqzWtQxIfolLpKyI-NJXKWubdn9EIQ9FRyuBCOnSmGpL8fhlaq4mEUM0A2HcR3w4jSNYTH3oDouIFqPvxqedilXccrDNZlDgHnIAgZ6PJj8YTw\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/1973756_9eda_75.jpg?9T1i30Gg2W6jwGwByAQF_3UT4LRlkjLFSSExrFLHRaJiN1HLQKlCLEHOb5xBFEnts2xNbztVlgKTOU0kw2forcA2mvMSaqp1RsLmBN1MuACyFZrQmSoUhgaPEeYgufmWQQ\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/383250_6c28_10.jpg?JCCHILYNhk_gz28VD0TtBcbUSnaf6FDfTDcTfyCS1oNrAn44_HdndKVJodaBJWyiRdPA-TL--LVhaR5gHN1zUNIGUQbEwz0S_QOK9Taii8zNT2Go4vKFzitVY6CMiAhf\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-c.udemycdn.com/course/240x135/1496052_f94e_3.jpg?Expires=1620843373&Signature=aeYgd-08tRLBMr8iaCzC~jetXQUM7O~O004Qm1NkPUAzbkhg6VERxOqp7UmdRus8OII8Ohhn24it1gVgWTFvTf7wlaM5HAQS2QyMLhWceNfqzG7pMsOSGzatUp7ahFX~0C8Bq~Gx5FGIlrQir~XfNLFZIvxLztw1H-~s7hH-TeFvb77kbgTVqWxmQVoPCbMb37IYbLEs6ECqVWPHZQKdO~JnpE-jc5DUooKommkyut6tqHgrFpUf5SApMEHv7pjdtOJA7WtR6XDsTm8cqVznJYCltnBrE7Fn3bO9tyryKHTgGodiI07HeUAE6Q3bwY9Z0PWHpv3dBplGu5aP9NuGIQ__&Key-Pair-Id=APKAITJV77WS5ZT7262A\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-b.udemycdn.com/course/240x135/2755896_0718_2.jpg?secure=uqsrFIDRBc0b-6zV3mMT1A%3D%3D%2C1620852240\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-c.udemycdn.com/course/240x135/1496052_f94e_3.jpg?Expires=1620843373&Signature=aeYgd-08tRLBMr8iaCzC~jetXQUM7O~O004Qm1NkPUAzbkhg6VERxOqp7UmdRus8OII8Ohhn24it1gVgWTFvTf7wlaM5HAQS2QyMLhWceNfqzG7pMsOSGzatUp7ahFX~0C8Bq~Gx5FGIlrQir~XfNLFZIvxLztw1H-~s7hH-TeFvb77kbgTVqWxmQVoPCbMb37IYbLEs6ECqVWPHZQKdO~JnpE-jc5DUooKommkyut6tqHgrFpUf5SApMEHv7pjdtOJA7WtR6XDsTm8cqVznJYCltnBrE7Fn3bO9tyryKHTgGodiI07HeUAE6Q3bwY9Z0PWHpv3dBplGu5aP9NuGIQ__&Key-Pair-Id=APKAITJV77WS5ZT7262A\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/281138_ccf8_11.jpg?TprpjJMm8IQos4lS1CQffJPeyOwGOnN9CghuG5hNCt4LWMpR9aAQw9x5Oen1RAjY33HrgEKyRHODVoeoO3adz75AljciuiH3t0sifE98UVyYismSn8GUBLy-aY6Blypp\",\r\n      },\r\n      {\r\n        title:\r\n          \"Machine Learning A-Z™: Hands-On Python & R In Data Science Machine Learning A-Z™: Hands-On Python & R In Data Science\",\r\n        teacherName: \"Md. Mehedi Hasan\",\r\n        description: \"description\",\r\n        price: 150,\r\n        off: 10,\r\n        rating: 2.5,\r\n        numOfRating: 100,\r\n        image:\r\n          \"https://img-a.udemycdn.com/course/240x135/1391482_1971_3.jpg?K524xlWzp_YC_-b670oyuKh3laRy_FmOilbl-FImB3Ps8omHpDejMT-vQsWlYnInYTEei_j9Oa4vtU9K0nyaY7MlloXYdMKbbgLWLpiPJqvlhPd8rSiDSaALcIKn5w_I#\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  homeContainer: {\r\n    padding: theme.spacing(0, 4),\r\n  },\r\n}));\r\n\r\nexport const Home = (props) => {\r\n  const [carouselCourses, setCarouselCourses] = useState<CarouselCourse>(\r\n    new CarouselCourse()\r\n  );\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  let match = useRouteMatch();\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n  async function fetchData() {\r\n    await CourseService.getCarouselCourses().then((response) => {\r\n      console.log(response);\r\n      if (response.status === 200) setCarouselCourses(response.data);\r\n    });\r\n    await setLoading(false);\r\n    console.log(\"carousels loaded\");\r\n  }\r\n  return (\r\n    <User loading={loading}>\r\n      <Grid container className={classes.homeContainer} direction=\"column\">\r\n        <Grid item container>\r\n          <ImageSlider />\r\n        </Grid>\r\n        <Grid item container direction=\"column\" spacing={2}>\r\n          <Grid item>\r\n            <CourseCarousel\r\n              title={\"Most Rated\"}\r\n              courses={carouselCourses.mostRated}\r\n            />\r\n          </Grid>\r\n          <Grid item container>\r\n            <CourseCarousel\r\n              title={\"Most Reviewed\"}\r\n              courses={carouselCourses.mostReviewed}\r\n            />\r\n          </Grid>\r\n          <Grid item container>\r\n            <CourseCarousel\r\n              title={\"Best Seller\"}\r\n              courses={carouselCourses.bestSeller}\r\n            />\r\n          </Grid>\r\n          <Grid item container>\r\n            <CourseCarousel title={\"Free\"} courses={carouselCourses.free} />\r\n          </Grid>\r\n          <Grid item container>\r\n            <CourseCarousel\r\n              title={\"New Released\"}\r\n              courses={carouselCourses.newReleased}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </User>\r\n  );\r\n};\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\SearchPage.tsx",["546","547","548","549","550","551","552","553"],"import { Card, CardContent, Grid } from \"@material-ui/core\";\r\nimport { Category } from \"classes/Category\";\r\nimport { MiniCourse } from \"classes/Course\";\r\nimport CoursePagination from \"components/course/CustomPagination\";\r\nimport Filter from \"components/search/Filter\";\r\nimport { FilterChips } from \"components/search/filter/Chips\";\r\nimport Sort from \"components/search/Sort\";\r\nimport User from \"layout/User\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { StickyContainer } from \"react-sticky\";\r\nimport { Responsive } from \"tools/responsive/Responsive\";\r\nimport SearchService from \"./api/SearchService\";\r\n\r\nexport interface IFilter {\r\n  type: \"LIST\" | \"CATEGORY\" | \"SLIDER\";\r\n  title: string;\r\n}\r\nexport interface IListFilter extends IFilter {\r\n  items: Array<{ title: string; id: number }>;\r\n}\r\nexport interface ICategoryFilter extends IFilter {\r\n  items: Array<Category>;\r\n}\r\nexport interface ISliderFilter extends IFilter {\r\n  min: number;\r\n  max: number;\r\n  value: Array<number>;\r\n  step: number;\r\n  valueType: string;\r\n}\r\nexport type IFilterType = IListFilter | ISliderFilter | ICategoryFilter;\r\nexport interface IFilteredValue {\r\n  type: \"LIST\" | \"SLIDER\" | \"CATEGORY\";\r\n  title: string;\r\n  value: string | Array<number>;\r\n  id?: number;\r\n  valueType?: string;\r\n}\r\nvar id = 1;\r\nexport const filterObjectList: Array<IFilterType> = [\r\n  {\r\n    title: \"Teacher\",\r\n    type: \"LIST\",\r\n    items: [\r\n      {\r\n        title: \"Abrar Fahad\",\r\n        id: id++,\r\n      },\r\n      {\r\n        title: \"Mahdi BUET 3\",\r\n        id: id++,\r\n      },\r\n      {\r\n        title: \"Md. Mehedi Hasan\",\r\n        id: id++,\r\n      },\r\n      {\r\n        title: \"Kazi Wasif Amin Shammya\",\r\n        id: id++,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"Category\",\r\n    type: \"CATEGORY\",\r\n    items: [],\r\n  },\r\n  {\r\n    title: \"Language\",\r\n    type: \"LIST\",\r\n    items: [\r\n      {\r\n        title: \"Arabic\",\r\n        id: id++,\r\n      },\r\n      {\r\n        title: \"English\",\r\n        id: id++,\r\n      },\r\n      {\r\n        title: \"Bangla\",\r\n        id: id++,\r\n      },\r\n      {\r\n        title: \"Hindi\",\r\n        id: id++,\r\n      },\r\n      {\r\n        title: \"Persian\",\r\n        id: id++,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: \"Rating\",\r\n    type: \"SLIDER\",\r\n    min: 0,\r\n    max: 5,\r\n    value: [0, 5],\r\n    step: 0.01,\r\n    valueType: \"⭐\",\r\n  },\r\n  {\r\n    title: \"Price\",\r\n    type: \"SLIDER\",\r\n    min: 0,\r\n    max: 10000,\r\n    value: [0, 10000],\r\n    step: 10,\r\n    valueType: \"$\",\r\n  },\r\n];\r\n\r\nconst sortTypes = [\r\n  \"New released\",\r\n  \"Best seller\",\r\n  \"Most reviewed\",\r\n  \"Most rated\",\r\n  \"Price low to high\",\r\n  \"Price high to low\",\r\n];\r\n\r\nconst Search = () => {\r\n  const history = useHistory();\r\n  console.log(history);\r\n  const [filteredData, setFilteredData] = useState<Array<IFilteredValue>>([]);\r\n  const [filteredCourses, setFilteredCourses] = useState<MiniCourse[]>();\r\n  const [sortType, setSortType] = useState(sortTypes[0]);\r\n  useEffect(() => {\r\n    fetchCourses(filteredData, sortType);\r\n  }, [history.location.state.key]);\r\n  function handleSortTypeChange(sort) {\r\n    fetchCourses(filteredData, sort);\r\n    setSortType(sort);\r\n  }\r\n  function onObjectsChange(value: IFilteredValue, type: \"ADD\" | \"REMOVE\") {\r\n    let array;\r\n    if (type === \"ADD\") {\r\n      let idx = filteredData.findIndex((item) => item.title === value.title);\r\n      if (value.type === \"SLIDER\" && idx != -1) {\r\n        array = [...filteredData];\r\n        array[idx] = value;\r\n      } else {\r\n        array = [...filteredData, value];\r\n        console.log(\"array: \", array);\r\n      }\r\n    } else if (type === \"REMOVE\") {\r\n      let idx;\r\n      console.log(\"filteredData\", filteredData);\r\n      console.log(\"filter to be delete\", value);\r\n      if (value.type !== \"SLIDER\") {\r\n        idx = filteredData.findIndex(\r\n          (item) => item.title === value.title && item.id === value.id\r\n        );\r\n      } else {\r\n        idx = filteredData.findIndex((item) => item.title === value.title);\r\n      }\r\n      array = [...filteredData];\r\n      array.splice(idx, 1);\r\n    }\r\n    setFilteredData(array);\r\n    fetchCourses(array, sortType);\r\n  }\r\n  async function fetchCourses(filteredValue, sort) {\r\n    let array = [...filteredValue];\r\n    console.log(array);\r\n    let object = {\r\n      searchKey: history.location.state.key,\r\n      sorting: sort,\r\n      categories: array\r\n        .map((item) => {\r\n          if (item.type === \"CATEGORY\") return item.id;\r\n        })\r\n        .filter((item) => item != undefined),\r\n      languages: array\r\n        .map((item) => {\r\n          if (item.title === \"Language\") return item.id;\r\n        })\r\n        .filter((item) => item != undefined),\r\n      teachers: array\r\n        .map((item) => {\r\n          if (item.title === \"Teacher\") return item.id;\r\n        })\r\n        .filter((item) => item != undefined),\r\n      price: array.find((item) => item.title === \"Price\")?.value || [\r\n        (\r\n          filterObjectList.find(\r\n            (item) => item.title === \"Price\"\r\n          ) as ISliderFilter\r\n        )?.min,\r\n        (\r\n          filterObjectList.find(\r\n            (item) => item.title === \"Price\"\r\n          ) as ISliderFilter\r\n        )?.max,\r\n      ],\r\n      rating: array.find((item) => item.title === \"Rating\")?.value || [\r\n        (\r\n          filterObjectList.find(\r\n            (item) => item.title === \"Rating\"\r\n          ) as ISliderFilter\r\n        )?.min,\r\n        (\r\n          filterObjectList.find(\r\n            (item) => item.title === \"Rating\"\r\n          ) as ISliderFilter\r\n        )?.max,\r\n      ],\r\n    };\r\n    console.log(object);\r\n    await SearchService.getFilteredCourses(object).then((response) => {\r\n      console.log(\"filtered courses\", response.data);\r\n      setFilteredCourses(response.data);\r\n    });\r\n  }\r\n  function clearAll() {\r\n    setFilteredData([]);\r\n    fetchCourses([], sortType);\r\n  }\r\n  return (\r\n    <User loading={!filteredCourses}>\r\n      <StickyContainer>\r\n        <Grid container spacing={1}>\r\n          <Grid item container sm={5} md={4} lg={3}>\r\n            <Grid item container>\r\n              <Responsive displayIn={[\"Laptop\", \"Tablet\"]}>\r\n                <Grid item container>\r\n                  <Grid container direction=\"column\" spacing={1}>\r\n                    <Grid item container>\r\n                      <Card style={{ width: \"100%\", cursor: \"pointer\" }}>\r\n                        <CardContent>\r\n                          <Sort\r\n                            sortTypes={sortTypes}\r\n                            sortType={sortType}\r\n                            setSortType={handleSortTypeChange}\r\n                          />\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Grid>\r\n                    <Grid item container style={{ cursor: \"pointer\" }}>\r\n                      <FilterChips\r\n                        filteredData={filteredData}\r\n                        onDelete={onObjectsChange}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item container>\r\n                      <Card>\r\n                        <CardContent>\r\n                          <Filter\r\n                            filteredData={filteredData}\r\n                            filterDataList={filterObjectList}\r\n                            onFilterChange={onObjectsChange}\r\n                            onClearAll={clearAll}\r\n                          />\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Responsive>\r\n              <Responsive displayIn={[\"Mobile\"]}>\r\n                <Grid container>\r\n                  <Grid container spacing={1}>\r\n                    <Grid item xs={6}>\r\n                      <Card style={{ width: \"100%\", cursor: \"pointer\" }}>\r\n                        <CardContent>\r\n                          <Sort\r\n                            sortTypes={sortTypes}\r\n                            sortType={sortType}\r\n                            setSortType={handleSortTypeChange}\r\n                          />\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Card style={{ width: \"100%\", cursor: \"pointer\" }}>\r\n                        <CardContent>\r\n                          <Filter\r\n                            filteredData={filteredData}\r\n                            filterDataList={filterObjectList}\r\n                            onFilterChange={onObjectsChange}\r\n                            onClearAll={clearAll}\r\n                          />\r\n                        </CardContent>\r\n                      </Card>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FilterChips\r\n                      filteredData={filteredData}\r\n                      onDelete={onObjectsChange}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Responsive>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container lg={9} md={8} sm={7} xs={12}>\r\n            <CoursePagination\r\n              courses={filteredCourses}\r\n              title={`Search result for '${history.location.state.key}'`}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </StickyContainer>\r\n    </User>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\layout\\Auth.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\MyCourse.tsx",["554","555"],"import { MiniCourse } from \"classes/Course\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport CoursePagination from \"components/course/CustomPagination\";\r\nimport User from \"layout/User\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport StudentService from \"./api/StudentService\";\r\nimport TeacherService from \"./api/TeacherService\";\r\n\r\nfunction MyCourse() {\r\n  const [courses, setCourses] = useState<MiniCourse>();\r\n  const [title, setTitle] = useState(\"\");\r\n  useEffect(() => {\r\n    if (AuthService.getCurrentAccountType() == \"Student\") {\r\n      StudentService.getPurchaseCourse().then((response) => {\r\n        console.log(\"Purchased course fetched\", response.data);\r\n        setCourses(response.data);\r\n        setTitle(\"Purchased Courses\");\r\n      });\r\n    } else if (AuthService.getCurrentAccountType() == \"Teacher\") {\r\n      TeacherService.getCreateCourse().then((response) => {\r\n        console.log(\"Created course fetched\", response.data);\r\n        setCourses(response.data);\r\n        setTitle(\"My Courses\");\r\n      });\r\n    }\r\n  }, []);\r\n  return (\r\n    <User>\r\n      <CoursePagination courses={courses} title={title} />\r\n    </User>\r\n  );\r\n}\r\n\r\nexport default MyCourse;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\AdminDashboard.tsx",["556","557","558","559","560","561","562","563","564","565","566","567","568","569"],"import { Grid, makeStyles } from \"@material-ui/core\";\r\nimport { Image } from \"@material-ui/icons\";\r\nimport { UserRegistrationChart } from \"components/AdminPanel/charts/UserRegistrationChart\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport DrawerLayout, { IDrawerLayoutObject } from \"layout/DrawerLayout\";\r\nimport { useState } from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { Cards } from \"./Cards\";\r\nimport MultiSelectTreeView from \"./CategoryComponent\";\r\nimport PopularCategoryChart from \"./charts/PopularCategoryChart\";\r\nimport { PopularCourseAdminChart } from \"./charts/PopurlarCourseAdminChart\";\r\nimport CountryComponent from \"./CountryComponent\";\r\nimport CourseApprovalComponent from \"./CourseApprovalComponent\";\r\nimport DesignationComponent from \"./DesignationComponent\";\r\nimport EduStatusComponent from \"./EduStatusComponent\";\r\nimport LanguageComponent from \"./LanguageComponent\";\r\nimport SliderComponent from \"./SliderComponent\";\r\nimport StudentInfoComponent from \"./StudentInfoComponent\";\r\nimport TeacherInfoComponent from \"./TeacherInfoComponent\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"#282C34\",\r\n    flexGrow: 1,\r\n    padding: 5,\r\n    \"& > *\": {\r\n      color: \"white\",\r\n    },\r\n    \"& input\": {\r\n      color: \"white\",\r\n    },\r\n    \"& fieldset\": {\r\n      border: \"2px solid white\",\r\n    },\r\n    \"& fieldset:focus\": {\r\n      border: \"2px solid gray\",\r\n    },\r\n  },\r\n  logo: {\r\n    width: 50,\r\n    height: 50,\r\n  },\r\n  title: {\r\n    display: \"block-inline\",\r\n    textAlign: \"center\",\r\n    marginLeft: theme.spacing(1),\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      flexGrow: 1,\r\n      padding: 0,\r\n    },\r\n    color: \"inherit\",\r\n  },\r\n  input: {\r\n    flexGrow: 1,\r\n  },\r\n  inputRoot: {\r\n    flexGrow: 1,\r\n    color: \"inherit\",\r\n    borderRadius: \"35px\",\r\n    padding: theme.spacing(0, 2, 0, 3),\r\n    margin: theme.spacing(0, 3),\r\n  },\r\n}));\r\n\r\nfunction AdminDashboard() {\r\n  const classes = useStyles();\r\n  const [columns, setColumns] = useState([\r\n    { title: \"Course Image\", field: \"image\" },\r\n    { title: \"Course Name\", field: \"courseName\" },\r\n    { title: \"Student Image\", field: \"studentImage\" },\r\n    { title: \"Student Name\", field: \"studentName\" },\r\n    { title: \"Purchase time\", field: \"time\" },\r\n    { title: \"Purchase Amount\", field: \"amount\" },\r\n    // { title: \"Course Image\", field: \"image\", editable: \"never\" },\r\n    // { title: \"Course Name\", field: \"courseName\", editable: \"never\" },\r\n    // { title: \"Student Image\", field: \"studentImage\", editable: \"never\" },\r\n    // { title: \"Student Name\", field: \"studentName\", editable: \"never\" },\r\n    // { title: \"Purchase time\", field: \"time\", editable: \"never\" },\r\n    // { title: \"Purchase Amount\", field: \"amount\", editable: \"never\" },\r\n  ]);\r\n  const [data, setData] = useState([\r\n    {\r\n      image: <Image />,\r\n      courseName: \"Course Name Course Name Course Name Course Name Course Name\",\r\n      studentImage: <Image />,\r\n      studentName: \"StudentName\",\r\n      time: new Date().toDateString(),\r\n      amount: 3000,\r\n    },\r\n  ]);\r\n  const objects: Array<IDrawerLayoutObject> = [\r\n    {\r\n      label: \"Overview\",\r\n      urlShort: \"overview\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/overview.png\").default}\r\n        />\r\n      ),\r\n      content: (\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            <Cards />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <UserRegistrationChart />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <PopularCourseAdminChart />\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <PopularCategoryChart />\r\n          </Grid>\r\n        </Grid>\r\n      ),\r\n    },\r\n    {\r\n      label: \"Homepage Slider\",\r\n      urlShort: \"slider-manager\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/list.png\").default}\r\n        />\r\n      ),\r\n      content: <SliderComponent />,\r\n    },\r\n    {\r\n      label: \"Student Info\",\r\n      urlShort: \"student-info\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/student.png\").default}\r\n        />\r\n      ),\r\n      content: <StudentInfoComponent />,\r\n    },\r\n    {\r\n      label: \"Teacher Info\",\r\n      urlShort: \"teacher-info\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/teacher.png\").default}\r\n        />\r\n      ),\r\n      content: <TeacherInfoComponent />,\r\n    },\r\n    {\r\n      label: \"Course Approval\",\r\n      urlShort: \"course-approval\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/course.png\").default}\r\n        />\r\n      ),\r\n      content: <CourseApprovalComponent />,\r\n    },\r\n    {\r\n      label: \"Category\",\r\n      urlShort: \"category\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/root.png\").default}\r\n        />\r\n      ),\r\n      content: <MultiSelectTreeView />,\r\n    },\r\n    {\r\n      label: \"Country\",\r\n      urlShort: \"country\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/country.png\").default}\r\n        />\r\n      ),\r\n      content: <CountryComponent />,\r\n    },\r\n    {\r\n      label: \"Language\",\r\n      urlShort: \"language\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/language.png\").default}\r\n        />\r\n      ),\r\n      content: <LanguageComponent />,\r\n    },\r\n    {\r\n      label: \"Designation\",\r\n      urlShort: \"designation\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/designation.png\").default}\r\n        />\r\n      ),\r\n      content: <DesignationComponent />,\r\n    },\r\n    {\r\n      label: \"Educational Status\",\r\n      urlShort: \"educational-status\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/edustatus.png\").default}\r\n        />\r\n      ),\r\n      content: <EduStatusComponent />,\r\n    },\r\n  ];\r\n\r\n  const route = useRouteMatch();\r\n  const pageNotFound = !(AuthService.getCurrentAccountType() === \"Admin\");\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        {objects.map((item, idx) => (\r\n          <Route key={idx} exact path={`${route.path}/${item.urlShort}`}>\r\n            <DrawerLayout\r\n              objects={objects}\r\n              defaultTabIndex={idx}\r\n              pageNotFound={pageNotFound}\r\n            />\r\n          </Route>\r\n        ))}\r\n        <Route path={`${route.path}/**`}>\r\n          <Redirect to={`${route.path}`} />\r\n        </Route>\r\n        <Route path={`${route.path}`}>\r\n          <DrawerLayout\r\n            objects={objects}\r\n            defaultTabIndex={0}\r\n            pageNotFound={pageNotFound}\r\n          />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AdminDashboard;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\CoursePage.tsx",["570","571","572","573","574","575","576"],"import {\r\n  Breadcrumbs,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Chip,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Grid,\r\n  Link,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { DoneAll, LabelImportant, NavigateNext } from \"@material-ui/icons\";\r\nimport { Rating } from \"@material-ui/lab\";\r\nimport { Course, PublicResponse } from \"classes/Course\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport {\r\n  CheckoutDialog,\r\n  CongratulationDialog,\r\n} from \"components/course/courseView/Checkout\";\r\nimport { FAQSection } from \"components/course/courseView/FAQ\";\r\nimport InstructorShortDetailsBox from \"components/course/courseView/InstructorShortDetails\";\r\nimport RatingSection from \"components/course/courseView/Rating\";\r\nimport { ReviewSection } from \"components/course/courseView/Review\";\r\nimport { Curriculum } from \"components/course/createCourse/Curriculum/Curriculum\";\r\nimport TeacherService from \"components/person/api/TeacherService\";\r\nimport { format } from \"date-fns\";\r\nimport User from \"layout/User\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { IconPickerItem } from \"react-fa-icon-picker\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Sticky, StickyContainer } from \"react-sticky\";\r\nimport GridImageView from \"tools/customDesign/ImageVeiw\";\r\nimport { Responsive } from \"tools/responsive/Responsive\";\r\nimport CourseService from \"../api/CourseService\";\r\nimport { TeacherMiniInfo } from \"./../../../classes/Person\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  MuiListItemRoot: {\r\n    alignItems: \"flex-start\",\r\n  },\r\n  MuiListItemGutters: {\r\n    paddingLeft: 0,\r\n    paddingRight: 0,\r\n  },\r\n  MuiListItemAvatarRoot: {\r\n    minWidth: 30,\r\n  },\r\n  MuiSvgIconRoot: {\r\n    fontSize: \"1.2rem\",\r\n    marginTop: 3,\r\n  },\r\n}));\r\n\r\nexport function CourseView() {\r\n  const { courseId } = useParams();\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [checkoutShow, setCheckoutShow] = useState(false);\r\n  const [congratulationShow, setCongratulationShow] = useState(false);\r\n  const [course, setCourse] = useState<Course>(new Course());\r\n  const [teacherInfo, setTeacherInfo] = useState<TeacherMiniInfo>();\r\n  const [publicResponse, setPublicResponse] = useState<PublicResponse>();\r\n  const [buyNowShow, setBuyNowShow] = useState(true);\r\n  const [deleteConfirmation, setDeleteConfirmation] = useState(false);\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [pageNotFound, setPageNotFound] = useState(false);\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  useEffect(() => {\r\n    if (courseId) {\r\n      CourseService.existCourseByIdToShow(courseId).then((response) => {\r\n        if (response.data) {\r\n          loadCourseContent();\r\n        } else {\r\n          setPageNotFound(true);\r\n        }\r\n      });\r\n    } else {\r\n      setPageNotFound(true);\r\n    }\r\n  }, [courseId]);\r\n\r\n  function handleCongratulationClose() {\r\n    setCongratulationShow(false);\r\n    loadCourseContent();\r\n    // history.push(`/course/${courseId}`);\r\n  }\r\n\r\n  function handleOnPurchase() {\r\n    CourseService.purchase(courseId).then((response) => {\r\n      if (response.status == 200) {\r\n        setCheckoutShow(false);\r\n        setCongratulationShow(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  function handleBuyNowClick() {\r\n    if (AuthService.getCurrentAccountType() === \"Student\") {\r\n      setCheckoutShow(true);\r\n    } else {\r\n      enqueueSnackbar('Please log in as \"Student\" to buy this course', {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  }\r\n\r\n  async function loadCourseContent() {\r\n    let teacherUsername = \"\";\r\n    await CourseService.getCourseToShow(courseId).then((response) => {\r\n      console.log(\"Course fetched\", response.data);\r\n      teacherUsername = response.data.teacherUsername;\r\n      setCourse(response.data);\r\n      handleReloadPublicResponse(response.data.teacherUsername);\r\n    });\r\n    if (AuthService.getCurrentAccountType() === \"Student\") {\r\n      await CourseService.isBought(courseId).then((response) => {\r\n        console.log(\"course bought\", response.data);\r\n        console.log(\"teacher username\", course.teacherUsername);\r\n        if (response.data) {\r\n          setBuyNowShow(false);\r\n        }\r\n      });\r\n    } else if (\r\n      AuthService.getCurrentAccountType() == \"Admin\" ||\r\n      AuthService.getCurrentUsername() == teacherUsername\r\n    ) {\r\n      setBuyNowShow(false);\r\n    }\r\n    console.log(\"loading will be false\");\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleReloadPublicResponse(teacherUsername: string) {\r\n    await TeacherService.getMiniInfo(teacherUsername).then((response) => {\r\n      console.log(\"Teacher mini info loaded\", response.data);\r\n      setTeacherInfo(response.data);\r\n    });\r\n    await CourseService.courseRatingReview(courseId).then((response) => {\r\n      console.log(\"Course additional property fetched\", response.data);\r\n      setPublicResponse(response.data);\r\n    });\r\n  }\r\n\r\n  function Price() {\r\n    return (\r\n      <Grid\r\n        item\r\n        container\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        spacing={1}\r\n      >\r\n        {course?.mainPrice == 0 && (\r\n          <Grid item>\r\n            <Typography variant=\"h5\">FREE</Typography>\r\n          </Grid>\r\n        )}\r\n        {course?.mainPrice != 0 && (\r\n          <>\r\n            <Grid item>\r\n              <Typography variant=\"h5\">\r\n                ৳\r\n                {course?.mainPrice\r\n                  ? course?.mainPrice - (course?.mainPrice * course?.off) / 100\r\n                  : \"\"}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography\r\n                variant=\"body2\"\r\n                style={{ textDecoration: \"line-through\" }}\r\n              >\r\n                ৳{course?.mainPrice}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"body1\">{course?.off}% off</Typography>\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n    );\r\n  }\r\n  function TitleSection() {\r\n    let date = new Date(course?.publishDate);\r\n    let formattedDate = \"\";\r\n    if (course.publishDate)\r\n      formattedDate = format(date as Date, \"hh:mm a - dd MMMM, yyyy\");\r\n    return (\r\n      <>\r\n        <Grid item>\r\n          <Typography variant=\"h4\">{course?.title}</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant=\"h6\">{course?.subTitle}</Typography>\r\n        </Grid>\r\n        <Grid item container direction=\"row\" alignItems=\"center\" spacing={1}>\r\n          <Grid item>\r\n            <Rating\r\n              value={publicResponse?.ratingValue}\r\n              readOnly\r\n              name=\"rating\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography>\r\n              ({publicResponse?.ratingCount} rating\r\n              {publicResponse?.ratingCount && publicResponse?.ratingCount > 1\r\n                ? \"s\"\r\n                : \"\"}\r\n              )\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            {publicResponse?.enrolledStudentCount} student enrolled\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"row\">\r\n          <Typography>Created by :</Typography>\r\n          <Link color=\"primary\" href={`/profile/${course?.teacherUsername}`}>\r\n            {course?.teacherName}\r\n          </Link>\r\n        </Grid>\r\n        <Grid item container direction=\"row\">\r\n          <Grid item>Published date: {formattedDate}</Grid>\r\n          <Grid item container direction=\"row\" alignItems=\"center\" spacing={1}>\r\n            <Grid item>\r\n              <Typography>Languages:</Typography>\r\n            </Grid>\r\n            {course?.languages.map((lang) => (\r\n              <Grid item key={lang.id}>\r\n                <Chip\r\n                  style={{ color: \"#ACE1E1\", border: \"2px solid #ACE1E1\" }}\r\n                  variant=\"outlined\"\r\n                  label={lang.name}\r\n                />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n  function CourseProperties() {\r\n    return (\r\n      <Grid item container direction=\"column\">\r\n        <Grid item>\r\n          <Typography variant=\"h6\">This course includes:</Typography>\r\n        </Grid>\r\n        <List dense={true}>\r\n          {course?.properties.map((item, index) => (\r\n            <ListItem\r\n              key={item.id ? item.id : index}\r\n              classes={{\r\n                root: classes.MuiListItemRoot,\r\n                gutters: classes.MuiListItemGutters,\r\n              }}\r\n            >\r\n              <ListItemAvatar classes={{ root: classes.MuiListItemAvatarRoot }}>\r\n                <IconPickerItem\r\n                  // classes={{ root: classes.MuiSvgIconRoot }}\r\n                  //@ts-ignore\r\n                  icon={item.icon.content}\r\n                  containerStyles={{ fontSize: \"15px\", color: \"white\" }}\r\n                />\r\n              </ListItemAvatar>\r\n              <ListItemText>{item.text}</ListItemText>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  function PCHeader() {\r\n    return (\r\n      <Card\r\n        style={{\r\n          backgroundColor: \"black\",\r\n          position: \"relative\",\r\n          overflow: \"inherit\",\r\n          boxShadow:\r\n            \"rgb(255 255 255 / 20%) 0px 0px 6px 3px, rgb(120 120 120 / 19%) 0px 0px 20px 7px\",\r\n        }}\r\n      >\r\n        <CardContent>\r\n          <Grid container direction=\"row\">\r\n            <Grid item container md={8} xs={12} direction=\"column\">\r\n              <TitleSection />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              md={4}\r\n              xs={12}\r\n              style={{\r\n                width: \"100%\",\r\n                position: \"absolute\",\r\n                right: 16,\r\n              }}\r\n            >\r\n              <Sticky>\r\n                {({ style }) => (\r\n                  <Card style={{ ...style, zIndex: 999, marginLeft: 16 }}>\r\n                    <CardContent>\r\n                      <img src={course?.cover?.content} />\r\n                      <Grid container>\r\n                        <Grid\r\n                          item\r\n                          container\r\n                          direction=\"row\"\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                          spacing={1}\r\n                        >\r\n                          <Price />\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      {buyNowShow && (\r\n                        <>\r\n                          <Grid item>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              style={{ width: \"100%\" }}\r\n                              onClick={handleBuyNowClick}\r\n                            >\r\n                              Buy now\r\n                            </Button>\r\n                            <CheckoutDialog\r\n                              open={checkoutShow}\r\n                              course={course}\r\n                              onClose={() => setCheckoutShow(false)}\r\n                              onPurchase={handleOnPurchase}\r\n                            />\r\n                            <CongratulationDialog\r\n                              open={congratulationShow}\r\n                              course={course}\r\n                              onClose={handleCongratulationClose}\r\n                            />\r\n                          </Grid>\r\n                        </>\r\n                      )}\r\n                      <CourseProperties />\r\n                    </CardContent>\r\n                  </Card>\r\n                )}\r\n              </Sticky>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n  function MobileHeader() {\r\n    return (\r\n      <Card style={{ width: \"100%\", backgroundColor: \"black\" }}>\r\n        <CardContent>\r\n          <Grid container direction=\"column\" spacing={1}>\r\n            <Grid item container>\r\n              <GridImageView\r\n                src={course?.cover?.content}\r\n                wrapperProps={{ xs: 8 }}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TitleSection />\r\n            </Grid>\r\n            <Grid item>\r\n              <CourseProperties />\r\n            </Grid>\r\n\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"row\"\r\n              style={{\r\n                zIndex: 999,\r\n                position: \"fixed\",\r\n                bottom: 0,\r\n                left: 0,\r\n                padding: 0,\r\n                backgroundColor: \"#F3AA08\",\r\n                color: \"black\",\r\n              }}\r\n            >\r\n              <Grid item xs={buyNowShow ? 6 : 12}>\r\n                <Price />\r\n              </Grid>\r\n\r\n              {buyNowShow && (\r\n                <Grid item container xs={6}>\r\n                  <Button\r\n                    onClick={handleBuyNowClick}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    style={{ width: \"100%\", borderRadius: 0, color: \"black\" }}\r\n                  >\r\n                    Buy now\r\n                  </Button>\r\n                  <CheckoutDialog\r\n                    open={checkoutShow}\r\n                    course={course}\r\n                    onClose={() => setCheckoutShow(false)}\r\n                    onPurchase={handleOnPurchase}\r\n                  />\r\n                  <CongratulationDialog\r\n                    open={congratulationShow}\r\n                    course={course}\r\n                    onClose={handleCongratulationClose}\r\n                  />\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n  function EditableButtons() {\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignContent=\"center\"\r\n        spacing={2}\r\n      >\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(event) => {\r\n              history.push(`/create-course/${courseId}`);\r\n            }}\r\n          >\r\n            Update\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={(event) => {\r\n              history.push({\r\n                pathname: `/create-course/${courseId}`,\r\n                state: { duplicate: true },\r\n              });\r\n            }}\r\n          >\r\n            Duplicate\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={(event) => setDeleteConfirmation(true)}\r\n          >\r\n            Delete\r\n          </Button>\r\n          <Dialog open={deleteConfirmation}>\r\n            <DialogTitle>Do you want to delete this course?</DialogTitle>\r\n            <DialogContent>\r\n              If you delete, you can not recover it.\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"center\"\r\n                spacing={2}\r\n              >\r\n                <Grid item>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={(event) => {\r\n                      CourseService.deleteCourse(courseId).then((response) => {\r\n                        if (response.status === 200) {\r\n                          enqueueSnackbar(\"Course successfully deleted\");\r\n                          history.push(`/profile/${course.teacherUsername}`);\r\n                        }\r\n                      });\r\n                    }}\r\n                  >\r\n                    Yes\r\n                  </Button>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={(event) => setDeleteConfirmation(false)}\r\n                  >\r\n                    No\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  function Info() {\r\n    return (\r\n      <>\r\n        <Grid item container>\r\n          <Card style={{ width: \"100%\" }}>\r\n            <CardContent>\r\n              <Grid container direction=\"column\">\r\n                <Grid item>\r\n                  <Typography variant=\"h5\">What you'll learn</Typography>\r\n                </Grid>\r\n                <List dense={false}>\r\n                  {course?.outcomes.map((item, index) => (\r\n                    <ListItem\r\n                      key={index}\r\n                      classes={{\r\n                        root: classes.MuiListItemRoot,\r\n                        gutters: classes.MuiListItemGutters,\r\n                      }}\r\n                    >\r\n                      <ListItemAvatar\r\n                        classes={{ root: classes.MuiListItemAvatarRoot }}\r\n                      >\r\n                        <DoneAll classes={{ root: classes.MuiSvgIconRoot }} />\r\n                      </ListItemAvatar>\r\n                      <ListItemText>{item}</ListItemText>\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Grid>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item container>\r\n          <Card style={{ width: \"100%\" }}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\">Requirements</Typography>\r\n              <List dense={false}>\r\n                {course?.prerequisites.map((item, index) => (\r\n                  <ListItem\r\n                    key={index}\r\n                    classes={{\r\n                      root: classes.MuiListItemRoot,\r\n                      gutters: classes.MuiListItemGutters,\r\n                    }}\r\n                  >\r\n                    <ListItemAvatar\r\n                      classes={{ root: classes.MuiListItemAvatarRoot }}\r\n                    >\r\n                      <LabelImportant\r\n                        classes={{ root: classes.MuiSvgIconRoot }}\r\n                      />\r\n                    </ListItemAvatar>\r\n                    <ListItemText>{item}</ListItemText>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item container>\r\n          <Card style={{ width: \"100%\" }}>\r\n            <CardContent>\r\n              <Typography variant=\"h5\">Description</Typography>\r\n              <Typography>{course?.description}</Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n  function Content() {\r\n    return (\r\n      <Card style={{ width: \"100%\" }}>\r\n        <CardContent>\r\n          <Grid container direction=\"column\">\r\n            <Grid item>\r\n              <Typography variant=\"h5\">Course content</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Curriculum\r\n                editable={false}\r\n                course={course}\r\n                onCourseAttrChange={(course) => {}}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n  function InstructorDetails() {\r\n    return <InstructorShortDetailsBox details={teacherInfo} />;\r\n  }\r\n  return (\r\n    <User loading={loading} pageNotFound={pageNotFound}>\r\n      <StickyContainer>\r\n        <Grid container direction=\"column\" spacing={2}>\r\n          <Breadcrumbs\r\n            separator={<NavigateNext fontSize=\"small\" />}\r\n            aria-label=\"breadcrumb\"\r\n          >\r\n            <Link color=\"inherit\" href=\"/\">\r\n              {course?.mainCategory?.name}\r\n            </Link>\r\n            <Typography color=\"textPrimary\">\r\n              {\" \"}\r\n              {course?.subCategory?.name}\r\n            </Typography>\r\n          </Breadcrumbs>\r\n          <Grid item>\r\n            <Responsive displayIn={[\"Laptop\"]}>\r\n              <PCHeader />\r\n            </Responsive>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n            md={8}\r\n          >\r\n            <Grid item container>\r\n              <Responsive displayIn={[\"Mobile\", \"Tablet\"]}>\r\n                <MobileHeader />\r\n              </Responsive>\r\n            </Grid>\r\n            {AuthService.getCurrentUsername() === course.teacherUsername && (\r\n              <Grid item>\r\n                <EditableButtons />\r\n              </Grid>\r\n            )}\r\n            <Info />\r\n            <Grid item container>\r\n              <Content />\r\n            </Grid>\r\n            <Grid item container>\r\n              <InstructorDetails />\r\n            </Grid>\r\n            <Grid item container>\r\n              <RatingSection\r\n                courseId={courseId}\r\n                data={publicResponse}\r\n                onRatingSubmit={() =>\r\n                  handleReloadPublicResponse(course?.teacherUsername)\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item container>\r\n              <ReviewSection\r\n                courseId={courseId}\r\n                teacherUsername={course.teacherUsername}\r\n                reviews={\r\n                  publicResponse?.reviews\r\n                    ? publicResponse?.reviews[0].reviewInfos\r\n                    : undefined\r\n                }\r\n                onReviewSubmit={() =>\r\n                  handleReloadPublicResponse(course?.teacherUsername)\r\n                }\r\n              />\r\n            </Grid>\r\n            <Grid item container>\r\n              <FAQSection\r\n                courseId={courseId}\r\n                teacherUsername={course.teacherUsername}\r\n                faqs={\r\n                  publicResponse?.faqs\r\n                    ? publicResponse?.faqs[0].faqInfos\r\n                    : undefined\r\n                }\r\n                onSubmit={() => {\r\n                  handleReloadPublicResponse(course?.teacherUsername);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </StickyContainer>\r\n    </User>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\messenger\\Messenger.tsx",["577","578","579","580","581","582","583","584","585","586","587"],"import {\r\n  Avatar,\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  Grid,\r\n  IconButton,\r\n  TextField,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { ImageTwoTone, Send } from \"@material-ui/icons\";\r\nimport { Files } from \"classes/Files\";\r\nimport { Conversation, Message, MessageData } from \"classes/Message\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport User from \"layout/User\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport GridImageView from \"tools/customDesign/ImageVeiw\";\r\nimport ShadowText from \"tools/customDesign/ShadowText\";\r\nimport { getDifference } from \"tools/Tools\";\r\nimport useWindowDimensions from \"tools/useWindowDimension\";\r\nimport MessageService from \"./MessageService\";\r\n\r\nfunction InboxNameContainer({ data }: { data: Conversation }) {\r\n  const history = useHistory();\r\n  const [width, setWidth] = useState({ parentWidth: 0, avatarWidth: 0 });\r\n  console.log(\"in body side container\", data);\r\n  useEffect(() => {\r\n    setWidth({\r\n      ...width,\r\n      parentWidth:\r\n        document.getElementsByClassName(\"inbox-name-container-root\")[0]\r\n          ?.clientWidth - 16 || 0,\r\n      avatarWidth:\r\n        document.getElementsByClassName(\"inbox-name-container-avatar\")[0]\r\n          ?.clientWidth || 0,\r\n    });\r\n  }, []);\r\n  let nameWidth = width.parentWidth - width.avatarWidth;\r\n  let role =\r\n    data.message.senderId == AuthService.getCurrentUsername()\r\n      ? \"SENDER\"\r\n      : \"RECEIVER\";\r\n  let username =\r\n    role === \"SENDER\" ? data.message.receiverId : data.message.senderId;\r\n\r\n  let messageText = \"\";\r\n  if (role === \"SENDER\") {\r\n    if (data.message.file.title === \"picture\") {\r\n      messageText = \"You sent a picture\";\r\n    } else {\r\n      messageText = \"You : \" + data.message.file.content;\r\n    }\r\n  } else {\r\n    if (data.message.file.title === \"picture\") {\r\n      messageText = data.firstName + \" sent a picture\";\r\n    } else {\r\n      messageText = data.message.file.content;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      className=\"inbox-name-container-root\"\r\n      wrap=\"nowrap\"\r\n      spacing={1}\r\n      alignItems=\"center\"\r\n      style={{ cursor: \"pointer\", padding: \"8px\" }}\r\n      onClick={(event) => {\r\n        history.push(`/message/${username}`);\r\n      }}\r\n      // href={`/message/${data.username}`}\r\n      // component='div'\r\n    >\r\n      <Grid item className=\"inbox-name-container-avatar\">\r\n        <Avatar src={data.photo} />\r\n      </Grid>\r\n      <Grid item container direction=\"column\" style={{ width: nameWidth }}>\r\n        <Grid item>\r\n          <Typography display=\"block\" variant=\"h6\" noWrap>\r\n            {data.fullName}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"row\"\r\n          // wrap=\"nowrap\"\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          <Grid item xs={8}>\r\n            <Typography variant=\"body1\" noWrap>\r\n              {messageText}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Typography align=\"right\" variant=\"body2\">\r\n              {getDifference(new Date(data.message.file.uploadTime))}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\nfunction SideContainer({\r\n  conversationList,\r\n}: {\r\n  conversationList?: Conversation[];\r\n}) {\r\n  return (\r\n    <Grid container direction=\"column\">\r\n      {conversationList?.map((item, idx) => (\r\n        <React.Fragment key={item.message.id}>\r\n          <Grid item container>\r\n            <InboxNameContainer data={item} />\r\n          </Grid>\r\n\r\n          <Grid item container>\r\n            <Divider style={{ width: \"100%\" }} />\r\n          </Grid>\r\n        </React.Fragment>\r\n      ))}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction SendMessageFormat({ message, children }) {\r\n  let value = \"\";\r\n  let time = new Date(message.file.uploadTime);\r\n  let curTime = new Date();\r\n  if (curTime.getTime() - time.getTime() < 24 * 3600 * 1000)\r\n    value = time.toLocaleTimeString();\r\n  else value = time.toLocaleString();\r\n\r\n  return (\r\n    <Grid item container wrap=\"nowrap\">\r\n      <Grid item xs={false} md={2} />\r\n      <Grid item container justifyContent=\"flex-end\">\r\n        <Tooltip title={value} placement=\"left\" arrow>\r\n          <Grid\r\n            item\r\n            style={{\r\n              padding: 10,\r\n              borderRadius: 5,\r\n              backgroundColor: \"wheat\",\r\n              color: \"black\",\r\n            }}\r\n          >\r\n            {children}\r\n          </Grid>\r\n        </Tooltip>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\nfunction ReceiveMessageFormat({ message, photo, children }) {\r\n  let value = \"\";\r\n  let time = new Date(message.file.uploadTime);\r\n  let curTime = new Date();\r\n  if (curTime.getTime() - time.getTime() < 24 * 3600 * 1000)\r\n    value = time.toLocaleTimeString();\r\n  else value = time.toLocaleString();\r\n  return (\r\n    <Grid item container wrap=\"nowrap\">\r\n      <Grid\r\n        item\r\n        container\r\n        xs={12}\r\n        md={10}\r\n        direction=\"row\"\r\n        wrap=\"nowrap\"\r\n        spacing={1}\r\n        justifyContent=\"flex-start\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <Grid item>\r\n          <Avatar src={photo} />\r\n        </Grid>\r\n        <Tooltip title={value} placement=\"right\" arrow>\r\n          <Grid\r\n            item\r\n            style={{\r\n              padding: 10,\r\n              borderRadius: 5,\r\n              backgroundColor: \"pink\",\r\n              color: \"black\",\r\n              minHeight: 48,\r\n            }}\r\n          >\r\n            {children}\r\n          </Grid>\r\n        </Tooltip>\r\n      </Grid>\r\n      <Grid item xs={false} md={2} />\r\n    </Grid>\r\n  );\r\n}\r\nfunction SendMessage({ message }: { message: Message }) {\r\n  // function SendMessage({ type }: { type: \"picture\" | \"text\" }) {\r\n  function PictureMessage() {\r\n    return (\r\n      <SendMessageFormat message={message}>\r\n        <GridImageView src={message.file.content} />\r\n      </SendMessageFormat>\r\n    );\r\n  }\r\n  function TextMessage() {\r\n    return (\r\n      <SendMessageFormat message={message}>\r\n        <Typography variant=\"body1\">{message.file.content}</Typography>\r\n      </SendMessageFormat>\r\n    );\r\n  }\r\n  if (message.file.title === \"picture\") {\r\n    return <PictureMessage />;\r\n  } else if (message.file.title === \"text\") {\r\n    return <TextMessage />;\r\n  }\r\n  return <></>;\r\n}\r\nfunction ReceiveMessage({\r\n  message,\r\n  photo,\r\n}: {\r\n  message: Message;\r\n  photo: string;\r\n}) {\r\n  function PictureMessage() {\r\n    return (\r\n      <ReceiveMessageFormat message={message} photo={photo}>\r\n        <GridImageView src={message.file.content} />\r\n      </ReceiveMessageFormat>\r\n    );\r\n  }\r\n  function TextMessage() {\r\n    return (\r\n      <ReceiveMessageFormat message={message} photo={photo}>\r\n        <Typography variant=\"body1\">{message.file.content}</Typography>\r\n      </ReceiveMessageFormat>\r\n    );\r\n  }\r\n  if (message.file.title === \"picture\") {\r\n    return <PictureMessage />;\r\n  } else if (message.file.title === \"text\") {\r\n    return <TextMessage />;\r\n  }\r\n  return <></>;\r\n}\r\nfunction InboxBody({\r\n  messages,\r\n  photo,\r\n}: {\r\n  messages?: Message[];\r\n  photo?: string;\r\n}) {\r\n  const bodyRef = useRef(null);\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    if (bodyRef && bodyRef.current) {\r\n      // @ts-ignore\r\n      bodyRef.current.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"end\",\r\n        inline: \"nearest\",\r\n      });\r\n    }\r\n  }, [messages]);\r\n  return (\r\n    <>\r\n      {messages?.length == 0 && (\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          style={{ height: \"100%\" }}\r\n        >\r\n          <ShadowText>\r\n            Please send a message to start the conversation\r\n          </ShadowText>\r\n        </Grid>\r\n      )}\r\n      {messages?.length != 0 && (\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justifyContent=\"flex-end\"\r\n          // style={{ height: \"100%\" }}\r\n          spacing={2}\r\n        >\r\n          {messages?.map((message) => {\r\n            if (message.senderId === AuthService.getCurrentUsername()) {\r\n              return (\r\n                <Grid item key={message.id} container>\r\n                  <SendMessage key={message.id} message={message} />\r\n                </Grid>\r\n              );\r\n            } else {\r\n              return (\r\n                <Grid item key={message.id} container>\r\n                  <ReceiveMessage\r\n                    key={message.id}\r\n                    message={message}\r\n                    photo={photo || \"\"}\r\n                  />\r\n                </Grid>\r\n              );\r\n            }\r\n          })}\r\n          {messages && messages?.length > 0 && (\r\n            <div\r\n              // @ts-ignore\r\n              ref={bodyRef}\r\n            />\r\n          )}\r\n        </Grid>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nfunction BottomBar({\r\n  username,\r\n  update,\r\n}: {\r\n  username?: string;\r\n  update: () => void;\r\n}) {\r\n  const fileInputRef = useRef<HTMLInputElement>();\r\n  const [message, setMessage] = useState(\"\");\r\n  async function sendMessage(file: Files) {\r\n    await MessageService.insertMessage({\r\n      id: 0,\r\n      senderId: AuthService.getCurrentUsername(),\r\n      receiverId: username || \"\",\r\n      file: file,\r\n    }).then((response) => {\r\n      update();\r\n    });\r\n  }\r\n  async function sendPictureMessage(event) {\r\n    let file = new Files(\"MESSAGE\", \"picture\").setContent({\r\n      file: event.target.files[0],\r\n    });\r\n    await file.upload();\r\n    await sendMessage(file);\r\n    console.log(event);\r\n  }\r\n  async function sendTextMessage() {\r\n    if (message === \"\") return;\r\n    var file = new Files(\"MESSAGE\", \"Message\")\r\n      .setContent(message)\r\n      .setTitle(\"text\");\r\n    await sendMessage(file);\r\n    setMessage(\"\");\r\n  }\r\n  return (\r\n    <Grid\r\n      item\r\n      container\r\n      wrap=\"nowrap\"\r\n      alignItems=\"center\"\r\n      spacing={1}\r\n      justifyContent=\"space-around\"\r\n    >\r\n      <Grid item>\r\n        <IconButton\r\n          // @ts-ignore\r\n          onClick={() => fileInputRef?.current.click()}\r\n        >\r\n          <input\r\n            onChange={sendPictureMessage}\r\n            multiple={false}\r\n            // @ts-ignore\r\n            ref={fileInputRef}\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            hidden\r\n          />\r\n          <ImageTwoTone fontSize=\"large\" />\r\n        </IconButton>\r\n      </Grid>\r\n      <Grid item container>\r\n        <TextField\r\n          value={message}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          style={{ backgroundColor: \"#3A3B3C\", borderRadius: 50 }}\r\n          placeholder=\"Write a message...\"\r\n          onChange={(event) => setMessage(event.target.value)}\r\n          InputProps={{ style: { borderRadius: 50, height: 40 } }}\r\n          onKeyPress={(event) => {\r\n            console.log(event.key);\r\n            if (event.key === \"Enter\") {\r\n              sendTextMessage();\r\n            }\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <IconButton onClick={sendTextMessage}>\r\n          <Send fontSize=\"large\" />\r\n        </IconButton>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction Inbox({ data, update }: { data?: MessageData; update: () => void }) {\r\n  const [height, setHeight] = useState({\r\n    headerHeight: 0,\r\n    inboxHeaderHeight: 0,\r\n    inboxFooterHeight: 0,\r\n  });\r\n  const { innerHeight, innerWidth } = useWindowDimensions();\r\n  useEffect(() => {\r\n    setHeight({\r\n      ...height,\r\n      headerHeight: document.getElementById(\"header-root\")?.clientHeight || 0,\r\n      inboxHeaderHeight:\r\n        document.getElementById(\"message-inbox-header\")?.clientHeight || 0,\r\n      inboxFooterHeight:\r\n        document.getElementById(\"message-inbox-footer\")?.clientHeight || 0,\r\n    });\r\n  }, [data]);\r\n\r\n  console.log(\"message\", height);\r\n  const messengerHeight = innerHeight - height?.headerHeight - 5;\r\n  const inboxBodyHeight =\r\n    messengerHeight - height.inboxHeaderHeight - height.inboxFooterHeight;\r\n  console.log(\"in inbox \", data);\r\n  if (!data?.username)\r\n    return (\r\n      <Grid\r\n        container\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        style={{ height: \"100%\" }}\r\n      >\r\n        <ShadowText>Please select a conversation</ShadowText>\r\n      </Grid>\r\n    );\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justifyContent=\"center\"\r\n      style={{ padding: \"0px\" }}\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        justifyContent=\"center\"\r\n        id=\"message-inbox-header\"\r\n        style={{\r\n          paddingBottom: 4,\r\n          borderBottom: \"1px solid #393A3B\",\r\n          padding: \"0px 12px\",\r\n        }}\r\n      >\r\n        <Typography\r\n          href={`/profile/${data?.username}`}\r\n          variant=\"h5\"\r\n          align=\"center\"\r\n          component=\"a\"\r\n          style={{ color: \"aquamarine\" }}\r\n        >\r\n          {data?.fullName}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        container\r\n        className=\"hide-scroll\"\r\n        style={{\r\n          height: inboxBodyHeight,\r\n          overflowY: \"scroll\",\r\n          overflowX: \"hidden\",\r\n          padding: \"0px 12px\",\r\n        }}\r\n      >\r\n        <InboxBody messages={data?.messages} photo={data.photo} />\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        container\r\n        id=\"message-inbox-footer\"\r\n        style={{\r\n          borderTop: \"1px solid #393A3B\",\r\n          padding: \"0px 12px\",\r\n        }}\r\n      >\r\n        <BottomBar username={data?.username} update={update} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\nexport function Messenger() {\r\n  let { username } = useParams();\r\n  let history = useHistory();\r\n  const [height, setHeight] = useState({ headerHeight: 0 });\r\n  const { innerHeight, innerWidth } = useWindowDimensions();\r\n  const [conversationList, setConversationList] = useState<Conversation[]>();\r\n  const [data, setData] = useState<MessageData>();\r\n  const [loading, setLoading] = useState(true);\r\n  const [pageNotFound, setPageNotFound] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (username) {\r\n      AuthService.existByUsername(username).then((response) => {\r\n        if (!response.data.boolValue) {\r\n          setPageNotFound(true);\r\n        }\r\n      });\r\n    }\r\n    loadSidePane();\r\n    loadInbox();\r\n    setHeight({\r\n      ...height,\r\n      headerHeight: document.getElementById(\"header-root\")?.clientHeight || 0,\r\n    });\r\n  }, [username]);\r\n  async function loadSidePane() {\r\n    await MessageService.getConversationList().then((response) => {\r\n      console.log(\"conversation list\", response.data);\r\n      setConversationList(response.data);\r\n    });\r\n  }\r\n  async function loadInbox() {\r\n    if (username) {\r\n      await MessageService.getMessages(username).then((response) => {\r\n        console.log(\"messages\", response.data);\r\n        setData(response.data);\r\n      });\r\n    }\r\n    setLoading(false);\r\n  }\r\n  console.log(\"message\", height);\r\n  const messengerHeight = innerHeight - height?.headerHeight - 1;\r\n  const leftSideHeight = messengerHeight;\r\n  return (\r\n    <User\r\n      disableFooter\r\n      disableCategoryBar\r\n      fullWidth\r\n      loading={loading}\r\n      pageNotFound={pageNotFound}\r\n    >\r\n      <Card\r\n        id=\"messenger-root\"\r\n        style={{\r\n          height: messengerHeight,\r\n          overflow: \"hidden\",\r\n          backgroundColor: \"#242526\",\r\n          borderRadius: 0,\r\n        }}\r\n      >\r\n        <CardContent\r\n          style={{\r\n            padding: 0,\r\n            height: conversationList?.length == 0 ? \"100%\" : \"\",\r\n          }}\r\n        >\r\n          {conversationList?.length == 0 && !username && (\r\n            <Grid\r\n              container\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              style={{ height: \"100%\" }}\r\n            >\r\n              <ShadowText>You have no conversation yet.</ShadowText>\r\n            </Grid>\r\n          )}\r\n          {(username || (conversationList && conversationList?.length > 0)) && (\r\n            <Grid container>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                md={3}\r\n                className=\"hide-scroll\"\r\n                style={{\r\n                  height: leftSideHeight,\r\n                  overflowY: \"auto\",\r\n                  overflowX: \"hidden\",\r\n                  borderRight: \"2px solid #393A3B\",\r\n                }}\r\n              >\r\n                <SideContainer conversationList={conversationList} />\r\n              </Grid>\r\n              <Grid item xs={12} md={9}>\r\n                <Inbox\r\n                  data={data}\r\n                  update={() => {\r\n                    loadSidePane();\r\n                    loadInbox();\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </User>\r\n  );\r\n}\r\n\r\n// import AuthService from \"components/auth/api/AuthService\";\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { StreamChat } from \"stream-chat\";\r\n// import {\r\n//   Channel,\r\n//   ChannelHeader,\r\n//   ChannelList,\r\n//   Chat,\r\n//   MessageInput,\r\n//   MessageList,\r\n//   Thread,\r\n//   Window,\r\n// } from \"stream-chat-react\";\r\n// import \"stream-chat-react/dist/css/index.css\";\r\n\r\n// const filters = { type: \"messaging\" };\r\n// const options = { state: true, presence: true, limit: 10 };\r\n// const sort = { last_message_at: -1 };\r\n\r\n// const client = StreamChat.getInstance(\"s8nme6ndn57p\");\r\n\r\n// export function Messenger() {\r\n//   // Define values.\r\n//   const api_key = \"s8nme6ndn57p\";\r\n//   const api_secret =\r\n//     \"whsbzzcuee28yzrkp4fpxpxty6gvdaang96euc5rexgn4dx8zqnrywwgq66wq9tc\";\r\n//   const user_id = AuthService.getCurrentUsername();\r\n\r\n//   // Initialize a Server Client\r\n//   const serverClient = StreamChat.getInstance(api_key, api_secret);\r\n//   // Create User Token\r\n//   const token = serverClient.createToken(user_id);\r\n\r\n//   const [clientReady, setClientReady] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     const setupClient = async () => {\r\n//       try {\r\n//         await client.connectUser(\r\n//           {\r\n//             id: \"dave-matthews\",\r\n//             name: \"Dave Matthews\",\r\n//           },\r\n//           token\r\n//         );\r\n\r\n//         setClientReady(true);\r\n//       } catch (err) {\r\n//         console.log(err);\r\n//       }\r\n//     };\r\n\r\n//     setupClient();\r\n//   }, []);\r\n\r\n//   if (!clientReady) return null;\r\n\r\n//   return (\r\n//     <Chat client={client}>\r\n//       <ChannelList\r\n//         filters={filters}\r\n//         // @ts-ignore\r\n//         sort={sort}\r\n//         options={options}\r\n//       />\r\n//       <Channel>\r\n//         <Window>\r\n//           <ChannelHeader />\r\n//           <MessageList />\r\n//           <MessageInput />\r\n//         </Window>\r\n//         <Thread />\r\n//       </Channel>\r\n//     </Chat>\r\n//   );\r\n// }\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\dashboard\\Dashboard.tsx",["588","589","590","591","592","593","594","595","596","597","598","599"],"import {\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  Divider,\r\n  Grid,\r\n  Typography,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { Looks, RateReview } from \"@material-ui/icons\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport DrawerLayout, { IDrawerLayoutObject } from \"layout/DrawerLayout\";\r\nimport React from \"react\";\r\nimport { FaChalkboardTeacher, FaDollarSign, FaQq } from \"react-icons/fa\";\r\nimport { Redirect, Route, Switch, useHistory } from \"react-router\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport IncomePerCourseChart from \"../teacher/IncomePerCourseChart\";\r\nimport { OverviewBarChart } from \"../teacher/Overview\";\r\nimport { CoursePopularityPieChart } from \"../teacher/PopularityPieChart\";\r\nimport { RatingLineChart } from \"../teacher/RatingLIneChart\";\r\nimport { EnrolledStudentListView } from \"./EnrolledStudentListView\";\r\nimport { FaqView } from \"./FAQview\";\r\nimport { PurchaseHistoryListView } from \"./PurchaseHistoryLIstView\";\r\nimport { ReviewListView } from \"./ReviewListView\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"#282C34\",\r\n    flexGrow: 1,\r\n    padding: 5,\r\n    \"& > *\": {\r\n      color: \"white\",\r\n    },\r\n    \"& input\": {\r\n      color: \"white\",\r\n    },\r\n    \"& fieldset\": {\r\n      border: \"2px solid white\",\r\n    },\r\n    \"& fieldset:focus\": {\r\n      border: \"2px solid gray\",\r\n    },\r\n  },\r\n  logo: {\r\n    width: 50,\r\n    height: 50,\r\n  },\r\n  title: {\r\n    display: \"block-inline\",\r\n    textAlign: \"center\",\r\n    marginLeft: theme.spacing(1),\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      flexGrow: 1,\r\n      padding: 0,\r\n    },\r\n    color: \"inherit\",\r\n  },\r\n  input: {\r\n    flexGrow: 1,\r\n  },\r\n  inputRoot: {\r\n    flexGrow: 1,\r\n    color: \"inherit\",\r\n    borderRadius: \"35px\",\r\n    padding: theme.spacing(0, 2, 0, 3),\r\n    margin: theme.spacing(0, 3),\r\n  },\r\n}));\r\n\r\nexport function ContentHeader({\r\n  courseId,\r\n  courseTitle,\r\n  courseSubtitle,\r\n  courseImage,\r\n  children,\r\n  contentPadding = true,\r\n}) {\r\n  const history = useHistory();\r\n  return (\r\n    <Card style={{ width: \"100%\" }}>\r\n      <CardActionArea onClick={() => history.push(`/course/${courseId}`)}>\r\n        <Grid container direction=\"row\" wrap=\"nowrap\" spacing={2}>\r\n          <Grid item>\r\n            <img src={courseImage} />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            direction=\"column\"\r\n            spacing={1}\r\n            style={{ paddingRight: 20 }}\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h5\">{courseTitle}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"body2\">{courseSubtitle}</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Divider />\r\n      </CardActionArea>\r\n      <CardContent style={{ padding: !contentPadding ? 0 : \"\" }}>\r\n        {children}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\ninterface PurchaseHistory {\r\n  image: JSX.Element;\r\n  courseName: string;\r\n  studentImage: JSX.Element;\r\n  studentName: string;\r\n  time: Date;\r\n  amount: number;\r\n}\r\n\r\nfunction Dashboard() {\r\n  const classes = useStyles();\r\n  const Overview = {\r\n    label: \"Overview\",\r\n    urlShort: \"overview\",\r\n    icon: (\r\n      <img\r\n        className={classes.logo}\r\n        src={require(\"assets/img/overview.png\").default}\r\n      />\r\n    ),\r\n    content: (\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <OverviewBarChart />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <RatingLineChart />\r\n        </Grid>\r\n        <Grid item md={6} xs={12}>\r\n          <CoursePopularityPieChart />\r\n        </Grid>\r\n        <Grid item md={6} xs={12}>\r\n          <IncomePerCourseChart />\r\n        </Grid>\r\n      </Grid>\r\n    ),\r\n  };\r\n  const PurchaseHistory = {\r\n    label: \"Purchase History\",\r\n    urlShort: \"purchase-history\",\r\n    icon: (\r\n      <img\r\n        className={classes.logo}\r\n        src={require(\"assets/img/purchase.png\").default}\r\n      />\r\n    ),\r\n    content: <PurchaseHistoryListView />,\r\n  };\r\n  const Review = {\r\n    label: \"Reviews\",\r\n    urlShort: \"review\",\r\n    icon: (\r\n      <img\r\n        className={classes.logo}\r\n        src={require(\"assets/img/review.png\").default}\r\n      />\r\n    ),\r\n    content: <ReviewListView />,\r\n  };\r\n  const FAQ = {\r\n    label: \"FAQ\",\r\n    urlShort: \"faq\",\r\n    icon: (\r\n      <img\r\n        className={classes.logo}\r\n        src={require(\"assets/img/faq.png\").default}\r\n      />\r\n    ),\r\n    content: <FaqView />,\r\n  };\r\n  const StudentList = {\r\n    label: \"Enrolled Students\",\r\n    urlShort: \"enrolled-student\",\r\n    icon: (\r\n      <img\r\n        className={classes.logo}\r\n        src={require(\"assets/img/student.png\").default}\r\n      />\r\n    ),\r\n    content: <EnrolledStudentListView />,\r\n  };\r\n  const StudentObject: Array<IDrawerLayoutObject> = [\r\n    Review,\r\n    FAQ,\r\n    PurchaseHistory,\r\n  ];\r\n  const TeacherObject: Array<IDrawerLayoutObject> = [\r\n    Overview,\r\n    PurchaseHistory,\r\n    Review,\r\n    FAQ,\r\n    StudentList,\r\n  ];\r\n  const objects =\r\n    AuthService.getCurrentAccountType() === \"Teacher\"\r\n      ? TeacherObject\r\n      : StudentObject;\r\n  const route = useRouteMatch();\r\n  const pageNotFound = !AuthService.isLogin() || (AuthService.getCurrentAccountType() === 'Admin');\r\n  return (\r\n    <>\r\n      <Switch>\r\n        {objects.map((item, idx) => (\r\n          <Route\r\n            exact\r\n            path={`${route.path}/${item.urlShort}`}\r\n            key={item.urlShort}\r\n          >\r\n            <DrawerLayout objects={objects} defaultTabIndex={idx} pageNotFound={pageNotFound} />\r\n          </Route>\r\n        ))}\r\n        <Route path={`${route.path}/**`}>\r\n          <Redirect to={`${route.path}`} />\r\n        </Route>\r\n        <Route path={`${route.path}`}>\r\n          <DrawerLayout objects={objects} defaultTabIndex={0}  pageNotFound={pageNotFound} />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\ProfileDetails.tsx",["600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626"],"import {\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Button,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport axios from \"axios\";\r\nimport { Files } from \"classes/Files\";\r\nimport { CreditCard, Designation, EduStatus, Person } from \"classes/Person\";\r\nimport CountryService from \"components/AdminPanel/api/CountryService\";\r\nimport DesignationService from \"components/AdminPanel/api/DesignationService\";\r\nimport EduStatusService from \"components/AdminPanel/api/EduStatusService\";\r\nimport AuthService, { authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure\";\r\nimport User from \"layout/User\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { ControlledTextfield } from \"tools/customDesign/ControlledTextfield\";\r\nimport { ImageUploader } from \"tools/customDesign/ImageUploader\";\r\nimport { LanguageField } from \"tools/customDesign/LanguageField\";\r\nimport { Country } from \"./../../classes/Country\";\r\nimport PersonService from \"./api/PersonService\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1, 0),\r\n    minWidth: 400,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  root: {\r\n    width: \"100%\",\r\n    minHeight: \"100vh\",\r\n    padding: \"30px 0px\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\n// const countryItem: Array<Country> = [\r\n//   { id: 1, name: \"Bangladesh\", adminId: \"Mehedi\" },\r\n//   { id: 2, name: \"India\", adminId: \"Mehedi\" },\r\n//   { id: 3, name: \"Palestain\", adminId: \"Mehedi\" },\r\n//   { id: 4, name: \"Egypt\", adminId: \"Mehedi\" },\r\n//   { id: 5, name: \"Iran\", adminId: \"Mehedi\" },\r\n// ];\r\n// const designations: Array<Designation> = [\r\n//   { id: 1, type: \"Professor\", adminId: \"Mehedi\" },\r\n//   { id: 2, type: \"Freelencer\", adminId: \"Mehedi\" },\r\n// ];\r\n// const eduStatuses: Array<EduStatus> = [\r\n//   { id: 1, type: \"HSC\", adminId: \"Mehedi\" },\r\n//   { id: 2, type: \"SSC\", adminId: \"Mehedi\" },\r\n//   { id: 3, type: \"BA\", adminId: \"Mehedi\" },\r\n//   { id: 4, type: \"BSc\", adminId: \"Mehedi\" },\r\n//   { id: 5, type: \"MA\", adminId: \"Mehedi\" },\r\n//   { id: 6, type: \"MSc\", adminId: \"Mehedi\" },\r\n// ];\r\n\r\nconst ProfileDetails = (props) => {\r\n  const history = useHistory();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [person, setPerson] = useState<Person>(\r\n    props.location.state?.person\r\n      ? props.location.state.person\r\n      : new Person(\"\", \"\", \"\")\r\n  );\r\n  // let person: Person;\r\n\r\n  const [error, setError] = useState(false);\r\n  const [dob, setDob] = React.useState<Date | null>(null);\r\n  const [countryItem, setCountryItem] = useState<Array<Country>>([]);\r\n  const [statusItem, setStatusItem] = useState<\r\n    Array<Designation> | Array<EduStatus>\r\n  >([]);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [countryId, setCountryId] = React.useState<number | undefined>();\r\n  const [statusId, setStatusId] = React.useState<number | undefined>();\r\n  const [cardExpireDate, setCardExpireDate] = React.useState<Date | null>(null);\r\n  const [oldPassword, setOldPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [againNewPassword, setAgainNewPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [pageNotFound, setPageNotFound] = useState(false);\r\n  // Snackbar control\r\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let abort = new AbortController();\r\n    console.log(\"heheh\");\r\n    if (props.location.state) {\r\n      setPerson(props.location.state.person);\r\n      setLoading(false);\r\n    } else if (AuthService.getCurrentAccountType() != \"\") {\r\n      if (AuthService.getCurrentAccountType() == \"Teacher\") {\r\n        axios\r\n          .get(GLOBAL.HOST + \"/get-teacher-self\", authHeaders())\r\n          .then((response) => {\r\n            console.log(\"Person data from header\", response);\r\n            // history.goBack();\r\n\r\n            let photo = response.data.photo;\r\n            response.data.photo = new Files(photo.type, photo.title)\r\n              .setId(photo.id)\r\n              .setContent(photo.content);\r\n            props.location.state = { person: response.data, registered: true };\r\n            setPerson(props.location.state.person);\r\n            setLoading(false);\r\n            // history.push({\r\n            //   pathname: \"/profile-details\",\r\n            //   state: {\r\n            //     person: response.data,\r\n            //     registered: true,\r\n            //   },\r\n            // });\r\n          });\r\n      } else if (AuthService.getCurrentAccountType() == \"Student\") {\r\n        axios\r\n          .get(GLOBAL.HOST + \"/get-student-self\", authHeaders())\r\n          .then((response) => {\r\n            console.log(\"Person data from header\", response);\r\n            // history.goBack();\r\n            let photo = response.data.photo;\r\n            response.data.photo = new Files(photo.type, photo.title)\r\n              .setId(photo.id)\r\n              .setContent(photo.content);\r\n\r\n            history.push({\r\n              pathname: \"/profile-details\",\r\n              state: {\r\n                person: response.data,\r\n                registered: true,\r\n              },\r\n            });\r\n            setLoading(false);\r\n          });\r\n      }\r\n    } else {\r\n      // history.goBack();\r\n      setLoading(false);\r\n      setPageNotFound(true);\r\n    }\r\n    CountryService.getAllCountries().then((response) => {\r\n      setCountryItem(response.data);\r\n    });\r\n    if (person.accountType == \"Student\") {\r\n      EduStatusService.getAllEduStatus().then((response) => {\r\n        setStatusItem(response.data);\r\n      });\r\n    } else if (person.accountType == \"Teacher\") {\r\n      DesignationService.getAllDesignation().then((response) => {\r\n        setStatusItem(response.data);\r\n      });\r\n    }\r\n    // console.log(JSON.parse(JSON.stringify(person.country)));\r\n    if (props.location.state?.registered) {\r\n      if (person.country) {\r\n        setCountryId(person.country.id);\r\n      }\r\n      if (person.accountType == \"Teacher\") {\r\n        PersonService.getDesignation().then((response) => {\r\n          setStatusId(response.data.id);\r\n        });\r\n      } else if (person.accountType == \"Student\") {\r\n        PersonService.getEduStatus().then((response) => {\r\n          setStatusId(response.data.id);\r\n        });\r\n      }\r\n      if (person.dob) {\r\n        //@ts-ignore\r\n        setDob(person.dob);\r\n      }\r\n      if (person.card && person.card.expireDate) {\r\n        setCardExpireDate(person.card.expireDate);\r\n      }\r\n    }\r\n    // if (person.dob == undefined) {\r\n    //   person.dob = dob;\r\n    // }\r\n    return () => {\r\n      // setOldPassword(null);\r\n      // setNewPassword(null);\r\n      // setAgainNewPassword(null);\r\n      // setDob(null)\r\n      // setPerson(null)\r\n      abort.abort();\r\n    };\r\n  }, []);\r\n  // Initialize - end\r\n\r\n  async function passwordInfoCheck(func) {\r\n    if (oldPassword && newPassword && againNewPassword) {\r\n      if (newPassword != againNewPassword) {\r\n        enqueueSnackbar(\"Password mismatch\", { variant: \"error\" });\r\n      }\r\n      await PersonService.changePassword(oldPassword, newPassword).then(\r\n        async (response) => {\r\n          if (response.data.stringValue) {\r\n            enqueueSnackbar(response.data.stringValue, { variant: \"error\" });\r\n          } else {\r\n            enqueueSnackbar(\"Password change successfully\", {\r\n              variant: \"success\",\r\n            });\r\n            await func();\r\n          }\r\n        }\r\n      );\r\n    } else if (!oldPassword && !newPassword && !againNewPassword) {\r\n      await func();\r\n    } else {\r\n      enqueueSnackbar(\"Fill up password field properly\", { variant: \"error\" });\r\n    }\r\n  }\r\n\r\n  async function register() {\r\n    if (person.accountType == \"Student\") {\r\n      // @ts-ignore\r\n      await AuthService.registerStudent(person, statusId).then((response) => {\r\n        if (response.data.token) {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n        console.log(\"done\");\r\n        history.push(\"/home\");\r\n      });\r\n    } else if (person.accountType == \"Teacher\") {\r\n      // @ts-ignore\r\n      await AuthService.registerTeacher(person, statusId).then((response) => {\r\n        if (response.data.token) {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n        console.log(\"done\");\r\n        history.push(\"/home\");\r\n      });\r\n    }\r\n  }\r\n\r\n  async function update() {\r\n    if (person.accountType == \"Student\") {\r\n      // @ts-ignore\r\n      await PersonService.updateStudent(person, statusId).then((response) => {\r\n        if (response.data.stringValue) {\r\n          enqueueSnackbar(response.data.stringValue, { variant: \"error\" });\r\n        } else {\r\n          props.location.state.person = person;\r\n          console.log(\"updated\");\r\n          enqueueSnackbar(\"Successfully updated\", { variant: \"success\" });\r\n\r\n          let user = JSON.parse(localStorage.getItem(\"user\") + \"\");\r\n          user.photo = person.photo;\r\n          localStorage.setItem(\"user\", JSON.stringify(user));\r\n        }\r\n      });\r\n    } else if (person.accountType == \"Teacher\") {\r\n      // @ts-ignore\r\n      await PersonService.updateTeacher(person, statusId).then((response) => {\r\n        if (response.data.stringValue) {\r\n          enqueueSnackbar(response.data.stringValue, { variant: \"error\" });\r\n        } else {\r\n          props.location.state.person = person;\r\n          enqueueSnackbar(\"Successfully updated\", { variant: \"success\" });\r\n\r\n          let user = JSON.parse(localStorage.getItem(\"user\") + \"\");\r\n          user.photo = person.photo;\r\n          localStorage.setItem(\"user\", JSON.stringify(user));\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  async function handleSaveClicked(event) {\r\n    event.preventDefault();\r\n    if (person.card) {\r\n      if (\r\n        !person.card.cardNo ||\r\n        !person.card.expireDate ||\r\n        !person.card.nameOnCard\r\n      ) {\r\n        enqueueSnackbar(\"Please set all information of credit card properly\", {\r\n          variant: \"warning\",\r\n        });\r\n        return;\r\n      }\r\n    }\r\n    if (props.location.state?.registered) {\r\n      enqueueSnackbar(\"Please wait, your profile is updating...\", {\r\n        variant: \"info\",\r\n      });\r\n      await passwordInfoCheck(async () => {\r\n        console.log(\"Updated person \", person);\r\n        //@ts-ignore\r\n        if (person?.photo?.content?.file) {\r\n          await person.photo.upload();\r\n          await update();\r\n        } else {\r\n          await update();\r\n        }\r\n      });\r\n    } else {\r\n      enqueueSnackbar(\r\n        \"Please wait, your account registration is processing...\",\r\n        { variant: \"info\" }\r\n      );\r\n      console.log(person);\r\n      if (person.photo) {\r\n        await person.photo.upload().then(register);\r\n      } else {\r\n        await register();\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleCountryChange = (event) => {\r\n    let country = countryItem.filter(\r\n      (item) => item.id == event.target.value\r\n    )[0];\r\n    person.country = country;\r\n    setCountryId(event.target.value);\r\n  };\r\n  const handleStatusChange = (event) => {\r\n    setStatusId(event.target.value);\r\n  };\r\n\r\n  // function handleProfilePicChange(event) {\r\n  //   event.preventDefault();\r\n  //   setFiles(event.target.files[0]);\r\n  //   person.photo = new Files(\"PICTURE\", \"Profile Picture\").setFile(\r\n  //     event.target.files[0]\r\n  //   );\r\n  // }\r\n\r\n  const [expanded, setExpanded] = React.useState(\"panel1\");\r\n\r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n\r\n  function PersonalDetails() {\r\n    return (\r\n      <Grid container direction=\"column\">\r\n        <ControlledTextfield\r\n          label=\"First Name\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          defaultValue={person.firstName}\r\n          onChange={(event) => {\r\n            person.firstName = event.target.value;\r\n            console.log(person);\r\n          }}\r\n          required\r\n          pattern=\"name\"\r\n        />\r\n        <ControlledTextfield\r\n          label=\"Last Name\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          defaultValue={person.lastName}\r\n          onChange={(event) => (person.lastName = event.target.value)}\r\n          required\r\n          pattern=\"name\"\r\n        />\r\n        <FormControl\r\n          variant=\"outlined\"\r\n          className={classes.formControl}\r\n          required\r\n        >\r\n          <InputLabel>Country</InputLabel>\r\n          <Select\r\n            value={countryId}\r\n            onChange={handleCountryChange}\r\n            label=\"Country *\"\r\n          >\r\n            {countryItem.map((item) => (\r\n              <MenuItem key={item.id} value={item.id}>\r\n                {item.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl\r\n          variant=\"outlined\"\r\n          className={classes.formControl}\r\n          required\r\n        >\r\n          <InputLabel>\r\n            {person.accountType == \"Student\"\r\n              ? \"Educational Status\"\r\n              : \"Designation\"}\r\n          </InputLabel>\r\n          <Select\r\n            value={statusId}\r\n            onChange={handleStatusChange}\r\n            label={\r\n              person.accountType == \"Student\"\r\n                ? \"Educational Status *\"\r\n                : \"Designation *\"\r\n            }\r\n          >\r\n            {statusItem.map((item) => (\r\n              <MenuItem key={item.id} value={item.id}>\r\n                {item.type}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <KeyboardDatePicker\r\n          variant=\"inline\"\r\n          format=\"dd/MMM/yyyy\"\r\n          label=\"Date of Birth\"\r\n          inputVariant=\"outlined\"\r\n          value={dob}\r\n          margin=\"normal\"\r\n          onChange={(date) => {\r\n            setDob(date);\r\n            person.dob = date;\r\n          }}\r\n          // KeyboardButtonProps={{\r\n          //   \"aria-label\": \"change date\",\r\n          // }}\r\n          required\r\n        />\r\n        <LanguageField\r\n          objects={person.languages}\r\n          onObjectsChange={(selected) => (person.languages = selected)}\r\n        />\r\n        <TextField\r\n          label=\"Institution\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          defaultValue={person.institution}\r\n          onChange={(event) => (person.institution = event.target.value)}\r\n        />\r\n        <TextField\r\n          label=\"Website\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          defaultValue={person.website}\r\n          onChange={(event) => (person.website = event.target.value)}\r\n          // inputProps={{\r\n          //   type: \"url\",\r\n          // }}\r\n        />\r\n        <TextField\r\n          label=\"Facebook\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          InputProps={{\r\n            startAdornment: \"http://www.facebook.com/\",\r\n          }}\r\n          defaultValue={person.fbURL}\r\n          onChange={(event) => (person.fbURL = event.target.value)}\r\n        />\r\n        <TextField\r\n          label=\"YouTube\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          InputProps={{\r\n            startAdornment: \"http://www.youtube.com/channel/\",\r\n          }}\r\n          defaultValue={person.youtubeURL}\r\n          onChange={(event) => (person.youtubeURL = event.target.value)}\r\n        />\r\n        <TextField\r\n          label=\"LinkedIn\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          InputProps={{\r\n            startAdornment: \"http://www.linkedin.com/\",\r\n          }}\r\n          defaultValue={person.linkedInURL}\r\n          onChange={(event) => (person.linkedInURL = event.target.value)}\r\n        />\r\n        <TextField\r\n          label=\"About\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          multiline\r\n          rows={6}\r\n          defaultValue={person.about}\r\n          onChange={(event) => (person.about = event.target.value)}\r\n        />\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  function CreditCardInfo() {\r\n    return (\r\n      <Grid container direction=\"column\">\r\n        <TextField\r\n          label=\"Credit Card No\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          defaultValue={person?.card?.cardNo ?? \"\"}\r\n          onChange={(event) => {\r\n            if (person.card == undefined) person.card = new CreditCard();\r\n            person.card.cardNo = event.target.value;\r\n          }}\r\n        />\r\n        <TextField\r\n          label=\"Name on Card\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          defaultValue={person?.card?.nameOnCard ?? \"\"}\r\n          onChange={(event) => {\r\n            if (person.card == undefined) person.card = new CreditCard();\r\n            person.card.nameOnCard = event.target.value;\r\n          }}\r\n        />\r\n        <KeyboardDatePicker\r\n          variant=\"inline\"\r\n          format=\"dd/MMM/yyyy\"\r\n          label=\"Expire Date\"\r\n          margin=\"normal\"\r\n          inputVariant=\"outlined\"\r\n          value={cardExpireDate}\r\n          onChange={(date) => {\r\n            setCardExpireDate(date as Date);\r\n            if (person.card == undefined) person.card = new CreditCard();\r\n            person.card.expireDate = date;\r\n          }}\r\n          KeyboardButtonProps={{\r\n            \"aria-label\": \"change date\",\r\n          }}\r\n        />\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  function ProfilePicture() {\r\n    return (\r\n      <ImageUploader\r\n        title=\"Profile Picture\"\r\n        onSetClick={(file) => {\r\n          //@ts-ignore\r\n          setPerson({ ...person, photo: file });\r\n          setErrorMessage(\"\");\r\n        }}\r\n        onDeleteClick={() => {\r\n          person.photo = undefined;\r\n          setErrorMessage(\"\");\r\n        }}\r\n        imageDestination={person?.photo}\r\n      />\r\n    );\r\n  }\r\n  function Security() {\r\n    return (\r\n      <Grid container direction=\"column\">\r\n        <TextField\r\n          label=\"Username\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          disabled\r\n          defaultValue={person.username}\r\n        />\r\n        <TextField\r\n          label=\"Email\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          disabled\r\n          defaultValue={person.email}\r\n        />\r\n        <ControlledTextfield\r\n          label=\"Old Password\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          defaultValue={oldPassword}\r\n          onBlur={(event) => setOldPassword(event.target.value)}\r\n          type=\"password\"\r\n        />\r\n        <ControlledTextfield\r\n          label=\"New Password\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          defaultValue={newPassword}\r\n          onBlur={(event) => setNewPassword(event.target.value)}\r\n          type=\"password\"\r\n        />\r\n        <ControlledTextfield\r\n          label=\"New Password (Again)\"\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          defaultValue={againNewPassword}\r\n          onBlur={(event) => setAgainNewPassword(event.target.value)}\r\n          type=\"password\"\r\n        />\r\n      </Grid>\r\n    );\r\n  }\r\n  function FullPage() {\r\n    return (\r\n      <form encType=\"multipart/form-data\" onSubmit={handleSaveClicked}>\r\n        <Grid container direction=\"column\" spacing={2}>\r\n          <Grid item container>\r\n            <Accordion\r\n              expanded={true}\r\n              style={{ width: \"100%\" }}\r\n              // expanded={expanded === \"panel1\"}\r\n              // onChange={handleChange(\"panel1\")}\r\n            >\r\n              <AccordionSummary>\r\n                <Typography style={{ width: \"100%\", textAlign: \"center\" }}>\r\n                  General settings\r\n                </Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <PersonalDetails />\r\n              </AccordionDetails>\r\n            </Accordion>\r\n          </Grid>\r\n          <Grid item container>\r\n            <Accordion\r\n              expanded={true}\r\n              style={{ width: \"100%\" }}\r\n              // expanded={expanded === \"panel2\"}\r\n              // onChange={handleChange(\"panel2\")}\r\n            >\r\n              <AccordionSummary>\r\n                <Typography style={{ width: \"100%\", textAlign: \"center\" }}>\r\n                  Profile Picture\r\n                </Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <ProfilePicture />\r\n              </AccordionDetails>\r\n            </Accordion>\r\n          </Grid>\r\n          <Grid item container>\r\n            <Accordion\r\n              expanded={true}\r\n              style={{ width: \"100%\" }}\r\n              // expanded={expanded === \"panel3\"}\r\n              // onChange={handleChange(\"panel3\")}\r\n            >\r\n              <AccordionSummary>\r\n                <Typography style={{ width: \"100%\", textAlign: \"center\" }}>\r\n                  Credit Card Information\r\n                </Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <CreditCardInfo />\r\n              </AccordionDetails>\r\n            </Accordion>\r\n          </Grid>\r\n          {props.location.state?.registered && (\r\n            <Grid item container>\r\n              <Accordion\r\n                expanded={true}\r\n                style={{ width: \"100%\" }}\r\n                // expanded={expanded === \"panel4\"}\r\n                // onChange={handleChange(\"panel4\")}\r\n              >\r\n                <AccordionSummary>\r\n                  <Typography style={{ width: \"100%\", textAlign: \"center\" }}>\r\n                    Security\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  <Security />\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"center\"\r\n          spacing={3}\r\n          style={{ padding: 15 }}\r\n        >\r\n          <Grid item>\r\n            <Button\r\n              // onClick={handleSaveClicked}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Save\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              onClick={(event) => history.goBack()}\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              style={{ marginLeft: 10 }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      {props.location.state?.registered || loading || pageNotFound ? (\r\n        <User loading={loading} pageNotFound={pageNotFound}>\r\n          <Grid container justifyContent=\"center\">\r\n            <Grid item xs={12} sm={8} md={5} style={{ margin: \"0 auto\" }}>\r\n              <FullPage />\r\n            </Grid>\r\n          </Grid>\r\n        </User>\r\n      ) : (\r\n        <Grid item xs={12} style={{ margin: \"0 auto\" }}>\r\n          <FullPage />\r\n        </Grid>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileDetails;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\CategoryCourse.tsx",["627"],"import axios from \"axios\";\r\nimport { MiniCourse } from \"classes/Course\";\r\nimport { authHeaders } from \"components/auth/api/AuthService\";\r\nimport CoursePagination from \"components/course/CustomPagination\";\r\nimport { GLOBAL } from \"Configure\";\r\nimport User from \"layout/User\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction CategoryCourse() {\r\n  const [courses, setCourses] = useState<MiniCourse>();\r\n  const [title, setTitle] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [pageNotFound, setPageNotFound] = useState(false);\r\n  const { categoryId } = useParams();\r\n  useEffect(() => {\r\n    axios.get(GLOBAL.HOST + `/public/exist-category/${categoryId}`).then(response=>{\r\n      if(response.data){\r\naxios\r\n      .get(\r\n        GLOBAL.HOST + `/public/get-course-by-category/${categoryId}`,\r\n        authHeaders()\r\n      )\r\n      .then((response) => {\r\n        setCourses(response.data);\r\n        setLoading(false);\r\n      });\r\n    axios\r\n      .get(GLOBAL.HOST + `/public/get-category-by-name/${categoryId}`)\r\n      .then((response) => {\r\n        setTitle(response.data.name);\r\n      });\r\n      }\r\n      else {\r\n        setPageNotFound(true);\r\n      }\r\n    })\r\n    \r\n  }, []);\r\n  return (\r\n    <User loading={loading} pageNotFound={pageNotFound}>\r\n      <CoursePagination courses={courses} title={title} />\r\n    </User>\r\n  );\r\n}\r\n\r\nexport default CategoryCourse;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\Profile.tsx",["628","629","630","631","632"],"import {\r\n  Avatar,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Chip,\r\n  Grid,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { LinkedIn, WorkOutlined } from \"@material-ui/icons\";\r\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\r\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\r\nimport { Rating } from \"@material-ui/lab\";\r\nimport { MiniCourse } from \"classes/Course\";\r\nimport { Person, Student, Teacher } from \"classes/Person\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport CoursePagination from \"components/course/CustomPagination\";\r\nimport User from \"layout/User\";\r\nimport React, { CSSProperties, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { TeacherMiniInfo } from \"./../../classes/Person\";\r\nimport PersonService from \"./api/PersonService\";\r\nimport StudentService from \"./api/StudentService\";\r\nimport TeacherService from \"./api/TeacherService\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  avatar: {\r\n    width: \"200px\",\r\n    height: \"200px\",\r\n  },\r\n  cardHeader: {\r\n    fontSize: \"2.5rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  cardContent: {\r\n    textAlign: \"center\",\r\n    fontSize: \"1.5rem\",\r\n  },\r\n}));\r\n\r\nconst data = {\r\n  general: [\r\n    {\r\n      type: \"Name\",\r\n      value: \"Md. Mehedi Hasan\",\r\n    },\r\n    {\r\n      type: \"Institution\",\r\n      value: \"Bangladesh University of Engineering and Technology\",\r\n    },\r\n    {\r\n      type: \"About\",\r\n      value:\r\n        \"Lorem ipsum dolor sit amet consectetur, adipisicing elit.Ex reprehenderit aut similique ut nostrum, repellat iusto beatae eum, est sed impedit assumenda molestiae accusamus cum voluptatum ab minima quaerat nam? Lorem ipsum dolor sit amet consectetur, adipisicing elit.Ex reprehenderit aut similique ut nostrum, repellat iusto beatae eum, est sed impedit assumenda molestiae accusamus cum voluptatum ab minima quaerat nam? Lorem ipsum dolor sit amet consectetur, adipisicing elit.Ex reprehenderit aut similique ut nostrum, repellat iusto beatae eum, est sed impedit assumenda molestiae accusamus cum voluptatum ab minima quaerat nam? Lorem ipsum dolor sit amet consectetur, adipisicing elit.Ex reprehenderit aut similique ut nostrum, repellat iusto beatae eum, est sed impedit assumenda molestiae accusamus cum voluptatum ab minima quaerat nam?\",\r\n    },\r\n  ],\r\n  socialMediaData: [\r\n    {\r\n      type: \"Email\",\r\n      link: \"66.mehedi@gmail.com\",\r\n      icon: \"<EmailIcon/>\",\r\n    },\r\n    {\r\n      type: \"Facebook\",\r\n      link: \"66.mehedi\",\r\n      icon: \"FacebookIcon\",\r\n    },\r\n    {\r\n      type: \"YouTube\",\r\n      link: \"66.mehedi\",\r\n      icon: \"YoutubeIcon\",\r\n    },\r\n    {\r\n      type: \"Twitter\",\r\n      link: \"66.mehedi\",\r\n      icon: \"TwitterIcon\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst Profile = () => {\r\n  const classes = useStyles();\r\n  const { username } = useParams();\r\n  const [person, setPerson] = useState<Student | Teacher | Person>();\r\n  const [courses, setCourses] = useState<Array<MiniCourse>>();\r\n  const [miniInfo, setMiniInfo] = useState<TeacherMiniInfo>();\r\n  const [status, setStatus] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [pageNotFound, setPageNotFound] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [username]);\r\n\r\n  async function loadData() {\r\n    AuthService.existByUsername(username).then(async (response) => {\r\n      if (response.data.boolValue) {\r\n        await PersonService.getPersonToShow(username).then(async (response) => {\r\n          console.log(\"Fetched person\", response.data);\r\n          setPerson(response.data);\r\n          switch (response.data.accountType) {\r\n            case \"Teacher\":\r\n              await TeacherService.getCreateCourseByUsername(username).then(\r\n                (response) => {\r\n                  console.log(\"Fetched created course list\", response.data);\r\n                  setCourses(response.data);\r\n                }\r\n              );\r\n              await TeacherService.getMiniInfo(username).then((response) => {\r\n                console.log(\"Teacher mini info \", response.data);\r\n                setMiniInfo(response.data);\r\n              });\r\n              await TeacherService.getDesignation(username).then((response) => {\r\n                setStatus(response.data.type);\r\n              });\r\n              break;\r\n            case \"Student\":\r\n              await StudentService.getPurchaseCourseByUsername(username).then(\r\n                (response) => {\r\n                  setCourses(response.data);\r\n                }\r\n              );\r\n              await StudentService.getEduStatus(username).then((response) => {\r\n                setStatus(response.data.type);\r\n              });\r\n              await StudentService.getStudentMiniInfo(username).then(\r\n                (response) => {\r\n                  setMiniInfo(response.data);\r\n                }\r\n              );\r\n              break;\r\n          }\r\n        });\r\n      } else {\r\n        setPageNotFound(true);\r\n      }\r\n      setLoading(false);\r\n    });\r\n  }\r\n  function LeftComponent() {\r\n    return (\r\n      <Card>\r\n        <CardContent>\r\n          <Grid container direction=\"column\" spacing={3}>\r\n            <Grid item container justifyContent=\"center\">\r\n              <Avatar className={classes.avatar} src={person?.photo?.content} />\r\n            </Grid>\r\n            <Grid item container>\r\n              <Details />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n  function RightComponent() {\r\n    function InfoCard({\r\n      title,\r\n      value,\r\n      renderTitle,\r\n      style,\r\n    }: {\r\n      title?: string;\r\n      value?: string | number;\r\n      renderTitle?: JSX.Element | JSX.Element[];\r\n      style?: CSSProperties;\r\n    }) {\r\n      return (\r\n        <Card style={style}>\r\n          <CardHeader title={value} classes={{ title: classes.cardHeader }} />\r\n          <CardContent classes={{ root: classes.cardContent }}>\r\n            {renderTitle ? renderTitle : title}\r\n          </CardContent>\r\n        </Card>\r\n      );\r\n    }\r\n    return (\r\n      <Grid container direction=\"column\" spacing={2}>\r\n        <Grid item container justifyContent=\"space-around\" spacing={2}>\r\n          {person?.accountType === \"Teacher\" ? (\r\n            <>\r\n              <Grid item md={3} xs={12}>\r\n                <InfoCard\r\n                  style={{ backgroundColor: \"#607d8b\" }}\r\n                  title=\"Course\"\r\n                  value={miniInfo?.courseCount}\r\n                />\r\n              </Grid>\r\n              <Grid item md={3} xs={12}>\r\n                <InfoCard\r\n                  style={{ backgroundColor: \"#607d8b\" }}\r\n                  title=\"Students\"\r\n                  value={miniInfo?.studentCount}\r\n                />\r\n              </Grid>\r\n              <Grid item md={3} xs={12}>\r\n                <InfoCard\r\n                  style={{ backgroundColor: \"#607d8b\" }}\r\n                  title=\"Review\"\r\n                  value={miniInfo?.reviewCount}\r\n                />\r\n              </Grid>\r\n              <Grid item md={3} xs={12}>\r\n                <InfoCard\r\n                  style={{ backgroundColor: \"#607d8b\" }}\r\n                  renderTitle={\r\n                    <Rating value={miniInfo?.rating} precision={0.1} readOnly />\r\n                  }\r\n                  value={miniInfo?.ratingCount}\r\n                />\r\n              </Grid>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Grid item md={3} xs={12}>\r\n                <InfoCard\r\n                  style={{ backgroundColor: \"#0091ea\" }}\r\n                  title=\"Purchased Course\"\r\n                  value={miniInfo?.courseCount}\r\n                />\r\n              </Grid>\r\n              <Grid item md={3} xs={12}>\r\n                <InfoCard\r\n                  style={{ backgroundColor: \"#0091ea\" }}\r\n                  title=\"Reviewed\"\r\n                  value={miniInfo?.reviewCount}\r\n                />\r\n              </Grid>\r\n            </>\r\n          )}\r\n        </Grid>\r\n        <Grid item container>\r\n          <CoursePagination\r\n            courses={courses}\r\n            title={\r\n              person?.accountType === \"Student\"\r\n                ? \"Purchased Courses\"\r\n                : \"Created Courses\"\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  // const SocialMedia = () => {\r\n  //   return (\r\n  //     <Grid item container direction=\"row\" justifyContent=\"space-around\">\r\n  //       {data.socialMediaData.map((item) => (\r\n  //         <Link href=\"#\">\r\n  //           <IconButton>\r\n  //             <Icon iconName={item.type} />\r\n  //           </IconButton>\r\n  //         </Link>\r\n  //       ))}\r\n  //     </Grid>\r\n  //   );\r\n  // };\r\n\r\n  // function Icon({ iconName }) {\r\n  //   if (iconName === \"Email\") return <EmailIcon />;\r\n  //   else if (iconName === \"Facebook\") return <FacebookIcon />;\r\n  //   else if (iconName === \"Twitter\") return <TwitterIcon />;\r\n  //   else if (iconName === \"YouTube\") return <YouTubeIcon />;\r\n  //   return null;\r\n  // }\r\n  function Details() {\r\n    function CreateItem({\r\n      attribute,\r\n      value = undefined,\r\n      children = undefined,\r\n    }: {\r\n      attribute: string;\r\n      value?: string | number;\r\n      children?: JSX.Element | JSX.Element[];\r\n    }) {\r\n      return (\r\n        <>\r\n          {((value != undefined && value != \"\") || children != undefined) && (\r\n            <Grid item container direction=\"column\" alignItems=\"flex-start\">\r\n              <Grid item>\r\n                <Typography variant=\"h6\">{attribute}</Typography>\r\n              </Grid>\r\n              <Grid item container>\r\n                <Typography variant=\"body1\">{value}</Typography>\r\n                {children}\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </>\r\n      );\r\n    }\r\n    function ContactChip({ url, icon, text }) {\r\n      return (\r\n        <Chip\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          clickable\r\n          icon={icon}\r\n          label={text}\r\n          onClick={(event) => window.open(url, \"_blank\")}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <Grid item container direction=\"column\" spacing={2}>\r\n        <CreateItem\r\n          attribute=\"Name\"\r\n          value={person?.firstName + \" \" + person?.lastName}\r\n        />\r\n        <CreateItem attribute=\"Country\" value={person?.country?.name} />\r\n        <CreateItem attribute=\"Languages\">\r\n          <Grid container spacing={1}>\r\n            {person?.languages?.map((lang) => (\r\n              <Grid item key={lang.id}>\r\n                <Chip variant=\"outlined\" color=\"primary\" label={lang?.name} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </CreateItem>\r\n        <CreateItem attribute=\"Institution\" value={person?.institution} />\r\n        <CreateItem\r\n          attribute={\r\n            person?.accountType === \"Student\"\r\n              ? \"Educational Status\"\r\n              : \"Designation\"\r\n          }\r\n          value={status}\r\n        />\r\n        <CreateItem attribute=\"About\" value={person?.about} />\r\n        <CreateItem attribute=\"Contact\">\r\n          <Grid container direction=\"column\" spacing={1}>\r\n            {AuthService.getCurrentUsername() !== username && (\r\n              <Grid item container>\r\n                <Button\r\n                  style={{ width: \"100%\" }}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  href={`/message/${person?.username}`}\r\n                >\r\n                  Send Message\r\n                </Button>\r\n              </Grid>\r\n            )}\r\n\r\n            {person?.fbURL && (\r\n              <Grid item>\r\n                <ContactChip\r\n                  url={\"http://www.fb.com/\" + person?.fbURL}\r\n                  icon={<FacebookIcon />}\r\n                  text={`/${person?.fbURL}`}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {person?.youtubeURL && (\r\n              <Grid item>\r\n                <ContactChip\r\n                  url={\"http://www.youtube.com/channel/\" + person?.fbURL}\r\n                  icon={<YouTubeIcon />}\r\n                  text={`/${person?.youtubeURL}`}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {person?.linkedInURL && (\r\n              <Grid item>\r\n                <ContactChip\r\n                  url={\"http://www.linkedin.com/\" + person?.fbURL}\r\n                  icon={<LinkedIn />}\r\n                  text={`/${person?.linkedInURL}`}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {person?.website && (\r\n              <Grid item>\r\n                <ContactChip\r\n                  url={person?.website}\r\n                  icon={<WorkOutlined />}\r\n                  text={person?.website}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </CreateItem>\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <User loading={loading} pageNotFound={pageNotFound}>\r\n      <Grid container>\r\n        <Grid container direction=\"row\" alignItems=\"flex-start\" spacing={2}>\r\n          <Grid item xs={12} sm={4} lg={3}>\r\n            <LeftComponent />\r\n          </Grid>\r\n          <Grid item xs={12} sm={8} lg={9}>\r\n            <RightComponent />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </User>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\CreateCoursePage.tsx",["633","634","635","636","637","638","639","640","641","642","643","644"],"import { makeStyles } from \"@material-ui/core\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport { Course } from \"classes/Course\";\r\nimport { Files } from \"classes/Files\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport { CoursePrice } from \"components/course/createCourse/CoursePrice\";\r\nimport { Curriculum } from \"components/course/createCourse/Curriculum/Curriculum\";\r\nimport { TargetStudent } from \"components/course/createCourse/TargetStudent\";\r\nimport DrawerLayout, { IDrawerLayoutObject } from \"layout/DrawerLayout\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport CourseService from \"../api/CourseService\";\r\nimport { LandingPage } from \"./Landing\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"#282C34\",\r\n    flexGrow: 1,\r\n    padding: 5,\r\n    \"& > *\": {\r\n      color: \"white\",\r\n    },\r\n    \"& input\": {\r\n      color: \"white\",\r\n    },\r\n    \"& fieldset\": {\r\n      border: \"2px solid white\",\r\n    },\r\n    \"& fieldset:focus\": {\r\n      border: \"2px solid gray\",\r\n    },\r\n  },\r\n  logo: {\r\n    width: 50,\r\n    height: 50,\r\n  },\r\n  title: {\r\n    display: \"block-inline\",\r\n    textAlign: \"center\",\r\n    marginLeft: theme.spacing(1),\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      flexGrow: 1,\r\n      padding: 0,\r\n    },\r\n    color: \"inherit\",\r\n  },\r\n  input: {\r\n    flexGrow: 1,\r\n  },\r\n  inputRoot: {\r\n    flexGrow: 1,\r\n    color: \"inherit\",\r\n    borderRadius: \"35px\",\r\n    padding: theme.spacing(0, 2, 0, 3),\r\n    margin: theme.spacing(0, 3),\r\n  },\r\n}));\r\n\r\nfunction CreateCourse(props) {\r\n  const classes = useStyles();\r\n  let { courseId } = useParams();\r\n  let history = useHistory();\r\n  const icon = <InboxIcon />;\r\n  const [course, setCourse] = useState(new Course());\r\n  console.log(course);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [pageNotFound, setPageNotFound] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (AuthService.getCurrentAccountType() === \"Teacher\") {\r\n      if (courseId != undefined) {\r\n        CourseService.existCourseByIdToUpdate(courseId).then((response) => {\r\n          if (response.data) {\r\n            CourseService.getCourseForUpdate(courseId).then((response) => {\r\n              console.log(\"Course fetched\", response.data);\r\n              if (history.location?.state?.duplicate) {\r\n                removeId(response.data);\r\n                console.log(\"after removing id\", response.data);\r\n              }\r\n              let cover = response.data.cover;\r\n              response.data.cover = new Files(cover.type, cover.title)\r\n                .setId(cover.id)\r\n                .setContent(cover.content);\r\n              response.data.weeks = response.data.weeks.map((week) => {\r\n                week.lectures = week.lectures.map((lecture) => {\r\n                  let file: Files = lecture.file;\r\n                  file = new Files(file.type, file.title)\r\n                    .setId(file.id)\r\n                    .setContent(file.content);\r\n                  lecture.file = file;\r\n                  return lecture;\r\n                });\r\n                return week;\r\n              });\r\n              setCourse(response.data);\r\n              setLoading(false);\r\n            });\r\n          } else {\r\n            setPageNotFound(true);\r\n          }\r\n        });\r\n      } else {\r\n        setCourse({\r\n          ...course,\r\n          teacherUsername: AuthService.getCurrentUsername(),\r\n        });\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setPageNotFound(true);\r\n    }\r\n  }, []);\r\n\r\n  function removeId(course: any) {\r\n    course.id = undefined;\r\n    course.cover.id = undefined;\r\n    course.properties = course.properties.map((item) => ({\r\n      ...item,\r\n      id: undefined,\r\n      icon: { ...item.icon, id: undefined },\r\n    }));\r\n    course.weeks = course.weeks.map((week) => ({\r\n      ...week,\r\n      id: undefined,\r\n      lectures: week.lectures.map((lecture) => ({\r\n        ...lecture,\r\n        id: undefined,\r\n        file: { ...lecture.file, id: undefined },\r\n      })),\r\n    }));\r\n  }\r\n\r\n  function handleOnSave() {\r\n    let error = false;\r\n    if (!course.title) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please set Course Title\", { variant: \"warning\" });\r\n    }\r\n    if (!course.subTitle) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please set Course Subtitle\", { variant: \"warning\" });\r\n    }\r\n    if (\r\n      !course.languages ||\r\n      (course.languages && course.languages.length == 0)\r\n    ) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please associate at least one language\", {\r\n        variant: \"warning\",\r\n      });\r\n    }\r\n    if (!course.description) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please set Description\", { variant: \"warning\" });\r\n    }\r\n    if (!course.mainCategory || !course.subCategory) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please associate a Category and Sub-Category\", {\r\n        variant: \"warning\",\r\n      });\r\n    }\r\n    if (!course.cover) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please associate an attractive cover photo\", {\r\n        variant: \"warning\",\r\n      });\r\n    }\r\n    if (course.mainPrice < 0) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please set a price or set to 0 for FREE\", {\r\n        variant: \"warning\",\r\n      });\r\n    }\r\n    if (\r\n      !course.prerequisites ||\r\n      (course.prerequisites && course.prerequisites.length == 0)\r\n    ) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please set at least one prerequisite\", {\r\n        variant: \"warning\",\r\n      });\r\n    }\r\n    course.prerequisites &&\r\n      course.prerequisites.forEach((element) => {\r\n        if (!element) {\r\n          error = true;\r\n          enqueueSnackbar(\r\n            \"Please set up prerequisite field properly or remove empty field\",\r\n            { variant: \"warning\" }\r\n          );\r\n          return;\r\n        }\r\n      });\r\n    if (!course.outcomes || (course.outcomes && course.outcomes.length == 0)) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please set at least one outcome\", {\r\n        variant: \"warning\",\r\n      });\r\n    }\r\n    course.outcomes &&\r\n      course.outcomes.forEach((element) => {\r\n        if (!element) {\r\n          error = true;\r\n          enqueueSnackbar(\r\n            \"Please set up outcome field properly or remove empty field\",\r\n            { variant: \"warning\" }\r\n          );\r\n          return;\r\n        }\r\n      });\r\n    if (\r\n      !course.properties ||\r\n      (course.properties && course.properties.length < 3)\r\n    ) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please set at least three short properties\", {\r\n        variant: \"warning\",\r\n      });\r\n    }\r\n    course.properties &&\r\n      course.properties.forEach((element) => {\r\n        if (!element.text) {\r\n          error = true;\r\n          enqueueSnackbar(\r\n            \"Please set up properties field properly or remove empty field\",\r\n            { variant: \"warning\" }\r\n          );\r\n          return;\r\n        }\r\n      });\r\n    if (course.weeks.length == 0) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please set at least one week with lecture\", {\r\n        variant: \"warning\",\r\n      });\r\n    }\r\n    course.weeks.forEach((element) => {\r\n      if (element.lectures.length == 0) {\r\n        error = true;\r\n        enqueueSnackbar(\r\n          \"Please set up at least one lecture in week: \" + element.weekNo,\r\n          { variant: \"warning\" }\r\n        );\r\n        return;\r\n      }\r\n      element.lectures.forEach((lecture) => {\r\n        if (!lecture.file) {\r\n          error = true;\r\n          enqueueSnackbar(\r\n            `Please set up lecture properly in week: ${element.weekNo} and lecture: ${lecture.lectureNo}`,\r\n            { variant: \"warning\" }\r\n          );\r\n          return;\r\n        }\r\n      });\r\n    });\r\n    if (error) return;\r\n\r\n    if (course.id) {\r\n      CourseService.updateCourse(course).then((response) => {\r\n        if (response.status === 200) {\r\n          enqueueSnackbar(\"Course updated successfully\", {\r\n            variant: \"success\",\r\n          });\r\n          history.push(`/course/${courseId}`);\r\n        }\r\n      });\r\n    } else {\r\n      CourseService.addCourse(course).then((response) => {\r\n        if (response.status === 200) {\r\n          enqueueSnackbar(\"Course uploaded successfully\", {\r\n            variant: \"success\",\r\n          });\r\n          history.push(`/course/${response.data}`);\r\n        }\r\n      });\r\n    }\r\n    //   .then((response) => {\r\n    //   if (response.status == 200) {\r\n    //     enqueueSnackbar(\"Successfully uploaded\", { variant: \"success\" });\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  function handleOnCancel() {}\r\n\r\n  function handleCourseAttrChange(attribute) {\r\n    setCourse({ ...course, ...attribute });\r\n    console.log(course);\r\n  }\r\n\r\n  const topics: Array<IDrawerLayoutObject> = [\r\n    {\r\n      label: \"Landing Page\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/landingpage.png\").default}\r\n        />\r\n      ),\r\n      content: (\r\n        <LandingPage\r\n          course={course}\r\n          onCourseAttrChange={handleCourseAttrChange}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      label: \"Target Your Student\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/target.png\").default}\r\n        />\r\n      ),\r\n      content: (\r\n        <TargetStudent\r\n          course={course}\r\n          onCourseAttrChange={handleCourseAttrChange}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      label: \"Set your curriculum\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/curriculum.png\").default}\r\n        />\r\n      ),\r\n      content: (\r\n        <Curriculum\r\n          editable={true}\r\n          course={course}\r\n          onCourseAttrChange={handleCourseAttrChange}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      label: \"Set a price\",\r\n      icon: (\r\n        <img\r\n          className={classes.logo}\r\n          src={require(\"assets/img/price.png\").default}\r\n        />\r\n      ),\r\n      content: (\r\n        <CoursePrice\r\n          course={course}\r\n          onCourseAttrChange={handleCourseAttrChange}\r\n          onSave={handleOnSave}\r\n          onCancel={handleOnCancel}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <DrawerLayout\r\n      objects={topics}\r\n      pageNotFound={pageNotFound}\r\n      loading={loading}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CreateCourse;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\api\\TeacherService.tsx",["645"],"import axios from \"axios\";\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure.js\";\r\n\r\nclass TeacherService {\r\n  getPerson(username: string) {\r\n    return axios.get(GLOBAL.HOST + `/get-person`, authHeaders());\r\n  }\r\n  getCreateCourseByUsername(username: string) {\r\n    return axios.get(\r\n      GLOBAL.HOST + `/public/get-created-courses/${username}`,\r\n      authHeaders()\r\n    );\r\n  }\r\n  getMiniInfo(username: string) {\r\n    return axios.get(\r\n      GLOBAL.HOST + `/public/get-teacher-mini/${username}`,\r\n      authHeaders()\r\n    );\r\n  }\r\n  getDesignation(username: string){\r\n    return axios.get(GLOBAL.HOST + `/public/get-teacher-designation/${username}`, authHeaders());\r\n  }\r\n  getCreateCourse() {\r\n    return axios.get(GLOBAL.HOST + `/get-created-courses`, authHeaders());\r\n  }\r\n  getEnrolledStudentList() {\r\n    return axios.get(GLOBAL.HOST + `/get-student-list-teacher`, authHeaders());\r\n  }\r\n  getFAQList() {\r\n    return axios.get(GLOBAL.HOST + `/get-faq-for-teacher`, authHeaders());\r\n  }\r\n  getReviewList() {\r\n    return axios.get(GLOBAL.HOST + `/get-review-teacher`, authHeaders());\r\n  }\r\n  getPurchaseHistory() {\r\n    return axios.get(\r\n      GLOBAL.HOST + `/get-purchase-history-teacher`,\r\n      authHeaders()\r\n    );\r\n  }\r\n}\r\nexport default new TeacherService();\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\api\\PersonService.tsx",["646"],"import axios from \"axios\";\r\nimport { Person } from \"classes/Person\";\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure.js\";\r\n\r\nclass PersonService {\r\n  getPerson(username: string) {\r\n    return axios.get(GLOBAL.HOST + `/get-person`, authHeaders());\r\n  }\r\n  getPersonSelf() {\r\n    return axios.get(GLOBAL.HOST + \"/get-person-self\", authHeaders());\r\n  }\r\n  getDesignation() {\r\n    return axios.get(GLOBAL.HOST + \"/get-designation-self\", authHeaders());\r\n  }\r\n  getEduStatus() {\r\n    return axios.get(GLOBAL.HOST + \"/get-edustatus-self\", authHeaders());\r\n  }\r\n  updateStudent(person: Person, statusId: number) {\r\n    return axios.put(\r\n      GLOBAL.HOST + `/update-student/${statusId}`,\r\n      person,\r\n      authHeaders()\r\n    );\r\n  }\r\n  updateTeacher(person: Person, statusId: number) {\r\n    return axios.put(\r\n      GLOBAL.HOST + `/update-teacher/${statusId}`,\r\n      person,\r\n      authHeaders()\r\n    );\r\n  }\r\n  changePassword(oldPassword: string, newPassword: string) {\r\n    let formData = new FormData();\r\n    formData.append(\"oldPassword\", oldPassword);\r\n    formData.append(\"newPassword\", newPassword);\r\n    return axios.put(GLOBAL.HOST + \"/change-password\", formData, authHeaders());\r\n  }\r\n  getPersonToShow(username: string) {\r\n    return axios.get(\r\n      GLOBAL.HOST + `/public/get-person-by-username/${username}`,\r\n      authHeaders()\r\n    );\r\n  }\r\n  getCreditCardDetails() {\r\n    return axios.get(GLOBAL.HOST + `/get-credit-card`, authHeaders());\r\n  }\r\n  // getProfilePhoto() {\r\n  //   return axios.get(GLOBAL.HOST + \"/get-profile-photo\", authHeaders());\r\n  // }\r\n}\r\nexport default new PersonService();\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Landing.tsx",["647","648","649","650"],"import {\r\n  Card,\r\n  CardContent,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { Category } from \"classes/Category\";\r\nimport { Course } from \"classes/Course\";\r\nimport CategoryService from \"components/AdminPanel/api/CategoryService\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ImageUploader } from \"tools/customDesign/ImageUploader\";\r\nimport { LanguageField } from \"tools/customDesign/LanguageField\";\r\n\r\nexport function LandingPage({\r\n  course,\r\n  onCourseAttrChange,\r\n}: {\r\n  course: Course;\r\n  onCourseAttrChange: any;\r\n}) {\r\n  const [categories, setCategories] = useState<Category[]>();\r\n  const [subCategories, setSubCategories] = useState<Category[]>();\r\n  const [mainCategoryId, setMainCategoryId] = useState(0);\r\n  const [subCategoryId, setSubCategoryId] = useState(0);\r\n  const [state, setState] = useState({\r\n    title: \"\",\r\n    subTitle: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  // const [course, setCourse] = useState(course);\r\n\r\n  useEffect(() => {\r\n    setState({\r\n      title: course.title,\r\n      subTitle: course.subTitle,\r\n      description: course.description,\r\n    });\r\n    CategoryService.getCategories().then((response) => {\r\n      console.log(response.data);\r\n      setCategories(response.data[0].children);\r\n      console.log(\"Course\", course);\r\n      if (course.mainCategory) {\r\n        setMainCategoryId(course.mainCategory.id);\r\n        setSubCategories(\r\n          response.data[0].children.filter(\r\n            (item) => item.id == course.mainCategory.id\r\n          )[0].children\r\n        );\r\n      }\r\n      if (course.subCategory) setSubCategoryId(course.subCategory.id);\r\n    });\r\n    return () => {\r\n      // setCategories([]);\r\n      // setSubCategories([]);\r\n    };\r\n  }, [course]);\r\n  console.log(\"cover\", course.cover);\r\n\r\n  return (\r\n    <Grid container direction=\"column\" alignContent=\"space-between\" spacing={2}>\r\n      <Grid item container>\r\n        <Card style={{ width: \"100%\" }}>\r\n          <CardContent>\r\n            <Grid\r\n              container\r\n              direction=\"column\"\r\n              alignContent=\"space-between\"\r\n              spacing={2}\r\n            >\r\n              <Grid item container>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Course title\"\r\n                  value={state.title}\r\n                  variant=\"outlined\"\r\n                  onChange={(event) =>\r\n                    setState({ ...state, title: event.target.value })\r\n                  }\r\n                  onBlur={(event) =>\r\n                    onCourseAttrChange({ title: event.target.value })\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Course subtitle\"\r\n                  value={state.subTitle}\r\n                  onChange={(event) =>\r\n                    setState({ ...state, subTitle: event.target.value })\r\n                  }\r\n                  variant=\"outlined\"\r\n                  onBlur={(event) =>\r\n                    onCourseAttrChange({ subTitle: event.target.value })\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Course description\"\r\n                  value={state.description}\r\n                  onChange={(event) =>\r\n                    setState({ ...state, description: event.target.value })\r\n                  }\r\n                  variant=\"outlined\"\r\n                  multiline\r\n                  rows={4}\r\n                  onBlur={(event) =>\r\n                    onCourseAttrChange({ description: event.target.value })\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <LanguageField\r\n                  objects={course.languages}\r\n                  onObjectsChange={(languages) =>\r\n                    onCourseAttrChange({ languages: languages })\r\n                  }\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item container>\r\n        <Card style={{ width: \"100%\" }}>\r\n          <CardContent>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n                  Category\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                {/* <Typography>Category</Typography> */}\r\n                <FormControl variant=\"outlined\" required fullWidth>\r\n                  <InputLabel>Main Category</InputLabel>\r\n                  <Select\r\n                    value={mainCategoryId}\r\n                    onChange={(event) => {\r\n                      if (event.target.value != 0) {\r\n                        setMainCategoryId(event.target.value as number);\r\n                        setSubCategories(\r\n                          categories?.filter(\r\n                            (item) => item.id == event.target.value\r\n                          )[0].children\r\n                        );\r\n                        setSubCategoryId(0);\r\n                        onCourseAttrChange({\r\n                          mainCategory: categories?.filter(\r\n                            (cat) => cat.id === (event.target.value as number)\r\n                          )[0],\r\n                        });\r\n                      }\r\n                    }}\r\n                    label=\"Main Category *\"\r\n                  >\r\n                    <MenuItem key={0} value={0}>\r\n                      {\"--Select--\"}\r\n                    </MenuItem>\r\n                    {console.log(categories)}\r\n                    {categories?.map((item) => (\r\n                      <MenuItem key={item.id} value={item.id}>\r\n                        {item.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <FormControl variant=\"outlined\" required fullWidth>\r\n                  <InputLabel>Sub Category</InputLabel>\r\n                  <Select\r\n                    value={subCategoryId}\r\n                    onChange={(event) => {\r\n                      setSubCategoryId(event.target.value as number);\r\n                      onCourseAttrChange({\r\n                        subCategory: subCategories?.filter(\r\n                          (cat) => cat.id === (event.target.value as number)\r\n                        )[0],\r\n                      });\r\n                    }}\r\n                    label=\"Sub Category *\"\r\n                  >\r\n                    <MenuItem key={0} value={0}>\r\n                      {\"--Select--\"}\r\n                    </MenuItem>\r\n                    {subCategories?.map((item) => (\r\n                      <MenuItem key={item.id} value={item.id}>\r\n                        {item.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item container>\r\n        <Card style={{ width: \"100%\" }}>\r\n          <CardContent>\r\n            <Grid container>\r\n              <ImageUploader\r\n                title=\"Course Cover\"\r\n                imageDestination={course.cover}\r\n                onSetClick={(file) => {\r\n                  onCourseAttrChange({ cover: file });\r\n                }}\r\n                onDeleteClick={() => {\r\n                  onCourseAttrChange({ cover: undefined });\r\n                }}\r\n              />\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\n{\r\n  /* <Grid container direction=\"column\" spacing={2}>\r\n                  <Grid item container sm>\r\n                    {categories.map((category, idx) => (\r\n                      <Grid item key={category.id}>\r\n                        <Chip\r\n                          size=\"medium\"\r\n                          style={{\r\n                            width: \"100%\",\r\n                            marginTop: 5,\r\n                            marginRight: 5,\r\n                          }}\r\n                          label={category.name}\r\n                          onDelete={() => {\r\n                            let array = [...categories];\r\n                            array.splice(idx, 1);\r\n                            setCategories(array);\r\n                            onCourseAttrChange({ categories: array });\r\n                          }}\r\n                          color=\"secondary\"\r\n                        />\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                  <Grid item container justifyContent=\"center\">\r\n                    {categories.length > 0 && (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={() => setCategories([])}\r\n                      >\r\n                        Clear All\r\n                      </Button>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n                <CategorySelector\r\n                  categories={categoryList}\r\n                  selectedCategories={categories}\r\n                  onCategorySelectionChange={handleCategoriesChange}\r\n                /> */\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\api\\StudentService.tsx",["651"],"import axios from \"axios\";\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure.js\";\r\n\r\nclass StudentService {\r\n  getPurchaseCourse() {\r\n    return axios.get(GLOBAL.HOST + `/get-purchased-courses-self`, authHeaders());\r\n  }\r\n  getPurchaseCourseByUsername(username: string) {\r\n    return axios.get(GLOBAL.HOST + `/public/get-purchased-courses/${username}`, authHeaders());\r\n  \r\n  }\r\n  getFAQList() {\r\n    return axios.get(GLOBAL.HOST + `/get-faq-for-student`, authHeaders());\r\n  }\r\n  getReviewList() {\r\n  return axios.get(GLOBAL.HOST + `/get-review-student`, authHeaders());\r\n  }\r\n  getPurchaseHistory() {\r\n    return axios.get(\r\n      GLOBAL.HOST + `/get-purchase-history-student`,\r\n      authHeaders()\r\n    );\r\n  }\r\n  getEduStatus(username:  string) {\r\n    return axios.get(\r\n      GLOBAL.HOST + `/public/get-student-edustatus/${username}`\r\n    );\r\n  }\r\n  getStudentMiniInfo(username: string) {\r\n    return axios.get(\r\n      GLOBAL.HOST + `/public/get-student-mini/${username}`\r\n    )\r\n  }\r\n}\r\nexport default new StudentService();\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\api\\CourseService.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\layout\\User.tsx",["652"],"// components\r\nimport Footer from \"components/footer/Footer\";\r\nimport { Header } from \"components/header/Header\";\r\nimport React from \"react\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport GridImageView from \"tools/customDesign/ImageVeiw\";\r\nimport SimpleBackdrop from \"tools/SimpleBackdrop\";\r\n\r\nexport default function User({\r\n  loading = false,\r\n  pageNotFound = false,\r\n  disableFooter = false,\r\n  disableCategoryBar = false,\r\n  fullWidth = false,\r\n  children,\r\n}: {\r\n  loading?: boolean;\r\n  pageNotFound?: boolean;\r\n  disableFooter?: boolean;\r\n  fullWidth?: boolean;\r\n  disableCategoryBar?: boolean;\r\n  children: any;\r\n}) {\r\n  let match = useRouteMatch();\r\n  console.log(\"in user loading\", loading);\r\n  console.log(\"page not found\", pageNotFound);\r\n  return (\r\n    <>\r\n      <main>\r\n        <section>\r\n          <Header disableCategoryBar={disableCategoryBar} />\r\n          <div\r\n            style={\r\n              !fullWidth\r\n                ? { margin: \"0 auto\", maxWidth: \"1400px\", padding: 20 }\r\n                : {}\r\n            }\r\n          >\r\n            {pageNotFound ? (\r\n              <GridImageView\r\n                src={require(\"assets/img/404.jpg\").default}\r\n                wrapperProps={{ xs: 12, md: 8, style: { width: \"70%\" } }}\r\n              />\r\n            ) : loading ? (\r\n              <SimpleBackdrop />\r\n            ) : (\r\n              children\r\n            )}\r\n          </div>\r\n          {(!loading || pageNotFound) && !disableFooter && <Footer />}\r\n        </section>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\auth\\api\\AuthService.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\TargetStudent.tsx",["653","654","655"],"import { Grid } from \"@material-ui/core\";\r\nimport { Course, Property } from \"classes/Course\";\r\nimport React from \"react\";\r\nimport { AddAbleTextField } from \"./AddAbleTextField\";\r\n\r\nexport function TargetStudent({\r\n  course,\r\n  onCourseAttrChange,\r\n}: {\r\n  course: Course;\r\n  onCourseAttrChange: any;\r\n}) {\r\n  if (course.outcomes == undefined) {\r\n    course = { ...course, outcomes: [\"\"] };\r\n  }\r\n  if (course.prerequisites == undefined) {\r\n    course = { ...course, prerequisites: [\"\"] };\r\n  }\r\n  if (course.properties == undefined) {\r\n    course = { ...course, properties: [new Property()] };\r\n  }\r\n  console.log(course);\r\n  return (\r\n    <Grid container direction=\"column\" spacing={3}>\r\n      <Grid item>\r\n        <AddAbleTextField\r\n          header=\"What will students learn in your course?\"\r\n          objects={course.outcomes}\r\n          onObjectsChange={(outcomes) =>\r\n            onCourseAttrChange({ outcomes: outcomes })\r\n          }\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <AddAbleTextField\r\n          header=\"Are there any course requirements or prerequisites?\"\r\n          objects={course.prerequisites}\r\n          onObjectsChange={(prerequisite) =>\r\n            onCourseAttrChange({ prerequisites: prerequisite })\r\n          }\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <AddAbleTextField\r\n          header=\"Write down the properties in brief with attractive icons\"\r\n          showIconPicker\r\n          objects={course.properties}\r\n          onObjectsChange={(properties) =>\r\n            onCourseAttrChange({ properties: properties })\r\n          }\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\Configure.js",[],"D:\\program\\java\\coursebucket\\frontend\\src\\layout\\DrawerLayout.tsx",["656","657","658","659"],"import {\r\n  AppBar,\r\n  Drawer,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  makeStyles,\r\n  Tab,\r\n  Tabs,\r\n} from \"@material-ui/core\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport clsx from \"clsx\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Sticky, StickyContainer } from \"react-sticky\";\r\nimport { Responsive } from \"tools/responsive/Responsive\";\r\nimport User from \"./User\";\r\n\r\nconst drawerWidth = 300;\r\nconst icon = <InboxIcon />;\r\nconst useStyles = makeStyles((theme) => ({\r\n  withDivider: {\r\n    borderBottom: `1px solid ${theme.palette.divider}`,\r\n  },\r\n  topBorder: {\r\n    borderTop: `1px solid ${theme.palette.divider}`,\r\n  },\r\n  root: {},\r\n  drawer: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      // width: `calc(100% - ${drawerWidth}px)`,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    height: \"97vh\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    margin: 8,\r\n    // width: `calc(100% - ${drawerWidth}px)`,\r\n    // padding: theme.spacing(2),\r\n    // margin: -theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport interface IDrawerLayoutObject {\r\n  label: string;\r\n  urlShort?: string;\r\n  icon: JSX.Element;\r\n  content: JSX.Element;\r\n}\r\n\r\nfunction TabPanel({ children, value, index, ...other }) {\r\n  return (\r\n    <div role=\"tabpanel\" hidden={value != index} {...other}>\r\n      {value === index && children}\r\n    </div>\r\n  );\r\n}\r\nconst DrawerLayout = ({\r\n  objects,\r\n  defaultTabIndex = 0,\r\n  pageNotFound = false,\r\n  loading = false,\r\n}: {\r\n  objects: Array<IDrawerLayoutObject>;\r\n  defaultTabIndex?: number;\r\n  pageNotFound?: boolean;\r\n  loading?: boolean;\r\n}) => {\r\n  const classes = useStyles();\r\n  const [tabIndex, setTabIndex] = useState(defaultTabIndex);\r\n\r\n  useEffect(() => {\r\n    setTabIndex(defaultTabIndex);\r\n  }, [defaultTabIndex]);\r\n\r\n  function timeout(delay) {\r\n    return new Promise((res) => setTimeout(res, delay));\r\n  }\r\n  function handleTabIndexChange(index) {\r\n    // await timeout(100);\r\n    setTabIndex(index);\r\n  }\r\n\r\n  function DrawerList({ objects }) {\r\n    return (\r\n      <div>\r\n        <List>\r\n          {objects.map((item, index) => (\r\n            <ListItem\r\n              button\r\n              key={item.label}\r\n              onClick={() => handleTabIndexChange(index)}\r\n            >\r\n              {/* <ListItemIcon>{<InboxIcon />}</ListItemIcon> */}\r\n              <ListItemIcon>{item.icon}</ListItemIcon>\r\n              <ListItemText primary={item.label} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <User pageNotFound={pageNotFound} loading={loading}>\r\n      <StickyContainer>\r\n        <Responsive displayIn={[\"Tablet\", \"Laptop\"]}>\r\n          <Grid container direction=\"row\" spacing={2} wrap=\"nowrap\">\r\n            <Grid style={{ width: drawerWidth }} item>\r\n              <Sticky>\r\n                {({ style }) => (\r\n                  <Drawer\r\n                    classes={{\r\n                      paper: classes.drawerPaper,\r\n                    }}\r\n                    style={style}\r\n                    // style={{ ...style, marginTop: 24, marginBottom: 24 }}\r\n                    variant=\"permanent\"\r\n                    open\r\n                  >\r\n                    <Tabs\r\n                      orientation=\"vertical\"\r\n                      value={tabIndex}\r\n                      onChange={(event, newValue) => setTabIndex(newValue)}\r\n                      variant=\"scrollable\"\r\n                      scrollButtons=\"auto\"\r\n                    >\r\n                      {objects.map((item, idx) => (\r\n                        <Tab\r\n                          className={clsx(\r\n                            classes.withDivider,\r\n                            idx === 0 ? classes.topBorder : \"\"\r\n                          )}\r\n                          label={item.label}\r\n                          icon={item.icon}\r\n                          key={idx}\r\n                        />\r\n                      ))}\r\n                    </Tabs>\r\n                  </Drawer>\r\n                )}\r\n              </Sticky>\r\n            </Grid>\r\n            <Grid item className={classes.content} container>\r\n              {objects.map((item, idx) => (\r\n                <TabPanel\r\n                  value={tabIndex}\r\n                  index={idx}\r\n                  key={idx}\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  {item.content}\r\n                </TabPanel>\r\n              ))}\r\n              {/* {objects\r\n                .map((item) => ({ content: item.content }))\r\n                .map((item, index) => (\r\n                  <div hidden={tabIndex !== index}>{item.content}</div>\r\n                ))} */}\r\n            </Grid>\r\n          </Grid>\r\n        </Responsive>\r\n        <Responsive displayIn=\"Mobile\">\r\n          <Sticky>\r\n            {({ style }) => (\r\n              <AppBar\r\n                position=\"static\"\r\n                color=\"default\"\r\n                style={style}\r\n                // style={{ ...style, marginBottom: 12 }}\r\n              >\r\n                <Tabs\r\n                  value={tabIndex}\r\n                  onChange={(event, newValue) => setTabIndex(newValue)}\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"on\"\r\n                >\r\n                  {objects.map((item, idx) => (\r\n                    <Tab label={item.label} key={idx} />\r\n                  ))}\r\n                </Tabs>\r\n              </AppBar>\r\n            )}\r\n          </Sticky>\r\n\r\n          {objects.map((item, idx) => (\r\n            <TabPanel\r\n              value={tabIndex}\r\n              index={idx}\r\n              style={{\r\n                padding: 15,\r\n              }}\r\n              key={idx}\r\n            >\r\n              {item.content}\r\n            </TabPanel>\r\n          ))}\r\n        </Responsive>\r\n      </StickyContainer>\r\n    </User>\r\n  );\r\n};\r\n\r\nexport default DrawerLayout;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\LanguageField.js",["660","661","662","663","664","665"],"import {\r\n  Chip,\r\n  FormControl,\r\n  InputLabel,\r\n  makeStyles,\r\n  MenuItem,\r\n  Select,\r\n  useTheme\r\n} from \"@material-ui/core\";\r\nimport LanguageService from \"components/AdminPanel/api/LanguageService\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1, 0),\r\n    width: \"100%\",\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: \"33.33%\",\r\n    flexShrink: 0,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\n// const languageItem = [\r\n//   \"Bangla\", \"English\", \"Hindi\", \"Arabic\", \"Persian\",\r\n// ]\r\n\r\nconst languageItem = [\r\n  { id: 1, name: \"Bengali\", adminId: \"Mehedi\" },\r\n  { id: 2, name: \"English\", adminId: \"Mehedi\" },\r\n  { id: 3, name: \"Hindi\", adminId: \"Mehedi\" },\r\n  { id: 4, name: \"Arabic\", adminId: \"Mehedi\" },\r\n  { id: 5, name: \"Persian\", adminId: \"Mehedi\" },\r\n];\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\n\r\nfunction getStyles(id, languages, theme) {\r\n  return {\r\n    fontWeight:\r\n      languages.some(item => item == id)\r\n        ? theme.typography.fontWeightMedium\r\n        :\r\n        theme.typography.fontWeightRegular,\r\n  };\r\n}\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nexport function LanguageField({\r\n  objects,\r\n  onObjectsChange = (languages) => console.log(languages),\r\n}) {\r\n  const [languageItem, setLanguageItem] = useState([]);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [languages, setLanguages] = useState([]);\r\n  const onLanguagesChange = (event) => {\r\n    setLanguages(event.target.value);\r\n    onObjectsChange(event.target.value.map(item => languageItem.find(langItem => langItem.id == item)));\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    let abort = new AbortController();\r\n    loadLanguages();\r\n    return () => abort.abort();\r\n  }, [])\r\n\r\n  async function loadLanguages() {\r\n    await LanguageService.getAllLanguages().then(async response => {\r\n      await setLanguageItem(response.data);\r\n    });\r\n    if (objects != undefined)\r\n      await setLanguages(objects.map(item => item.id));\r\n  }\r\n  // if (objects == undefined) return null;\r\n  return (\r\n    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n      <InputLabel id=\"demo-multiple-chip-label\">Language</InputLabel>\r\n      <Select\r\n        label=\"Language\"\r\n        labelId=\"demo-multiple-chip-label\"\r\n        id=\"demo-multiple-chip\"\r\n        multiple\r\n        value={languages}\r\n        onChange={onLanguagesChange}\r\n        // input={<Input />}\r\n        renderValue={(selected) => (\r\n          <div className={classes.chips}>\r\n            {\r\n              selected.map((id) => (\r\n                <Chip\r\n                  key={id}\r\n                  label={languageItem.filter(item => item.id == id)[0]?.name}\r\n                  className={classes.chip}\r\n                />\r\n              )\r\n              )\r\n            }\r\n          </div>\r\n        )}\r\n        MenuProps={MenuProps}\r\n      >\r\n        {languageItem.map((item) => {\r\n          // @ts-ignore\r\n          return (\r\n            <MenuItem\r\n              key={item.id}\r\n              value={item.id}\r\n              style={getStyles(item.id, languages, theme)}\r\n            >\r\n              {item.name}\r\n            </MenuItem>\r\n          );\r\n        })}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\CategoryService.js",["666"],"import axios from \"axios\"\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\"\r\nimport { GLOBAL } from 'Configure.js'\r\n\r\n\r\nclass CategoryService {\r\n    getCategories() {\r\n        return axios.get(GLOBAL.HOST + '/public/get-categories')\r\n    }\r\n    deleteCategory(id) {\r\n        return axios.delete(GLOBAL.HOST + `/delete-category/${id}`, authHeaders())\r\n    }\r\n    updateCategory(category) {\r\n        return axios.put(GLOBAL.HOST + '/update-category', category, authHeaders())\r\n    }\r\n    addCategory(category) {\r\n        return axios.post(GLOBAL.HOST + '/add-category', category, authHeaders());\r\n    }\r\n}\r\n\r\nexport default new CategoryService()","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\ImageUploader.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\AddAbleTextField.tsx",["667"],"import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  IconButton,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { AddCircle, DeleteForever } from \"@material-ui/icons\";\r\nimport { Property } from \"classes/Course\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { IconPicker } from \"react-fa-icon-picker\";\r\nimport { ReactSortable } from \"react-sortablejs\";\r\n\r\nfunction onEnterPressFocusNext(e) {\r\n  if (e.key === \"Enter\") {\r\n    const inputs = Array.from(\r\n      // Get table or tbody whatever that contains all inputs. The number of parentElements depends on the structure of your html\r\n      e.currentTarget?.parentElement?.parentElement?.parentElement?.querySelectorAll(\r\n        \"input\"\r\n      ) ?? []\r\n    ).filter(\r\n      (e) =>\r\n        //@ts-ignore\r\n        !e.disabled\r\n    );\r\n    const current = Array.from(e.currentTarget.querySelectorAll(\"input\") ?? []);\r\n    //@ts-ignore\r\n    const index = inputs.indexOf(current[0]);\r\n    //@ts-ignore\r\n    inputs[index + 1]?.focus();\r\n    e.preventDefault();\r\n  }\r\n}\r\n\r\nexport function AddAbleTextField({\r\n  onObjectsChange = (data) => console.log(data),\r\n  header = \"\",\r\n  showIconPicker = false,\r\n  objects,\r\n  // objects = [{ id: 0, value: \"\", icon: showIconPicker ? \"FaIcons\" : \"\" }],\r\n}) {\r\n  const onKeyPress: React.KeyboardEventHandler<HTMLInputElement> = useCallback(\r\n    (e) => {\r\n      if (e.key === \"Enter\") {\r\n        const inputs = Array.from(\r\n          // Get table or tbody whatever that contains all inputs. The number of parentElements depends on the structure of your html\r\n          e.currentTarget?.parentElement?.parentElement?.parentElement?.querySelectorAll(\r\n            \"input\"\r\n          ) ?? []\r\n        ).filter((e) => !e.disabled);\r\n        const current = Array.from(\r\n          e.currentTarget.querySelectorAll(\"input\") ?? []\r\n        );\r\n        const index = inputs.indexOf(current[0]);\r\n        inputs[index + 1]?.focus();\r\n        e.preventDefault();\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const [data, setData] = useState(\r\n    showIconPicker\r\n      ? objects\r\n      : objects.map((value, idx) => ({ id: idx, text: value }))\r\n  );\r\n\r\n  function onDataChange(newData) {\r\n    setData(newData);\r\n    onObjectsChange(\r\n      showIconPicker\r\n        ? newData.map((item, idx) => ({\r\n            id: item.id,\r\n            icon: item.icon,\r\n            text: item.text,\r\n            position: idx,\r\n          }))\r\n        : newData.map((item) => item.text)\r\n    );\r\n  }\r\n  function onTextFieldChange(index, text) {\r\n    let newArray = [...data];\r\n    newArray[index] = { ...data[index], text: text };\r\n    onDataChange(newArray);\r\n  }\r\n  function addTextField() {\r\n    let newArray = [...data];\r\n    newArray.push(showIconPicker ? new Property() : { id: 100, text: \"\" });\r\n    onDataChange(newArray);\r\n  }\r\n  function onDelete(index) {\r\n    let newArray = [...data];\r\n    newArray.splice(index, 1);\r\n    onDataChange(newArray);\r\n  }\r\n\r\n  // function upArrowClick(index) {\r\n  //   if (index === 0) return;\r\n  //   let array = data.splice(0);\r\n  //   let obj = array[index];\r\n  //   array[index] = array[index - 1];\r\n  //   array[index - 1] = obj;\r\n  //   onDataChange(array);\r\n  // }\r\n  // function downArrowClick(index) {\r\n  //   if (index === data.length - 1) return;\r\n  //   let array = data.splice(0);\r\n  //   let obj = array[index];\r\n  //   array[index] = array[index + 1];\r\n  //   array[index + 1] = obj;\r\n  //   onDataChange(array);\r\n  // }\r\n  function onIconValueChange(index, iconName) {\r\n    let newArray = [...data];\r\n    newArray[index].icon.content = iconName;\r\n    onDataChange(newArray);\r\n  }\r\n\r\n  return (\r\n    <Card style={{ width: \"100%\", overflow: \"visible\" }}>\r\n      <CardContent>\r\n        <Grid container>\r\n          {header !== \"\" && (\r\n            <Typography variant=\"h5\" gutterBottom>\r\n              {header}\r\n            </Typography>\r\n          )}\r\n          <ReactSortable\r\n            list={data}\r\n            setList={onDataChange}\r\n            style={{ width: \"100%\" }}\r\n          >\r\n            {data.map((item, index) => (\r\n              <TextField\r\n                key={index}\r\n                fullWidth\r\n                margin=\"normal\"\r\n                onChange={(event) =>\r\n                  onTextFieldChange(index, event.target.value)\r\n                }\r\n                value={item.text}\r\n                variant=\"outlined\"\r\n                InputProps={{\r\n                  startAdornment: showIconPicker && (\r\n                    <IconButton>\r\n                      <IconPicker\r\n                        containerStyles={{\r\n                          right: \"160%\",\r\n                          top: \"-33.33%\",\r\n                          width: \"201px\",\r\n                        }}\r\n                        value={item.icon.content}\r\n                        onChange={(icon) => onIconValueChange(index, icon)}\r\n                      />\r\n                    </IconButton>\r\n                  ),\r\n                  endAdornment: (\r\n                    <>\r\n                      <IconButton onClick={(event) => onDelete(index)}>\r\n                        <DeleteForever />\r\n                      </IconButton>\r\n                    </>\r\n                  ),\r\n                }}\r\n                onKeyPress={onKeyPress}\r\n              />\r\n            ))}\r\n          </ReactSortable>\r\n          <Grid item container justifyContent=\"center\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={(event) => addTextField()}\r\n              startIcon={<AddCircle />}\r\n            >\r\n              Add More\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\SimpleBackdrop.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\CustomPagination.tsx",["668","669","670","671","672"],"import { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport CourseBox from \"components/course/CourseBox\";\r\nimport React, { useState } from \"react\";\r\nimport ShadowText from \"./../../tools/customDesign/ShadowText\";\r\n\r\nconst CourseBoxContainer = ({ courses }) => {\r\n  return (\r\n    <>\r\n      <Grid container direction=\"row\" justifyContent=\"space-around\" spacing={2}>\r\n        {(courses == undefined || courses.length == 0) && (\r\n          <ShadowText>No course to show</ShadowText>\r\n        )}\r\n        {courses.map((course) => (\r\n          <Grid item key={course.id}>\r\n            <CourseBox courseData={course} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\nconst CoursePagination = ({ courses, title }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [coursePerPage] = useState(8);\r\n\r\n  if (courses == undefined) return <></>;\r\n  const indexOfLastCourse = currentPage * coursePerPage;\r\n  const indexOfFirstCourse = indexOfLastCourse - coursePerPage;\r\n  const currentCourses = courses.slice(indexOfFirstCourse, indexOfLastCourse);\r\n\r\n  console.log(\r\n    \"coursePagination\",\r\n    coursePerPage,\r\n    indexOfLastCourse,\r\n    indexOfFirstCourse\r\n  );\r\n  const paginate = (event, pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"flex-start\"\r\n      spacing={2}\r\n    >\r\n      <Grid item container>\r\n        <Card style={{ width: \"100%\" }}>\r\n          <CardContent>\r\n            <Typography variant=\"h4\" align=\"center\">\r\n              {title}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item container>\r\n        <CourseBoxContainer courses={currentCourses} />\r\n      </Grid>\r\n      {courses?.length > coursePerPage && (\r\n        <Grid item container justifyContent=\"center\">\r\n          <Pagination\r\n            count={Math.ceil(courses.length / coursePerPage)}\r\n            page={currentPage}\r\n            onChange={paginate}\r\n            color=\"secondary\"\r\n            siblingCount={3}\r\n            size=\"large\"\r\n          />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CoursePagination;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\ControlledTextfield.tsx",["673","674","675","676","677","678","679"],"import {\r\n  FilledTextFieldProps,\r\n  OutlinedTextFieldProps,\r\n  StandardTextFieldProps,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nlet rules = {\r\n  lettersDigits: {\r\n    pattern: new RegExp(/[~!#%^_+\\-=?,./*|\\\":<>[\\]{}`\\\\()';@&$]/),\r\n    helperText: \"Only digits and letters are allowed\",\r\n  },\r\n  lettersDigitsNoSpace: {\r\n    pattern: new RegExp(/[~!#%^_+\\-=?,./*|\\\":<>[\\]{}`\\\\()';@&$ ]/),\r\n    helperText: \"Only digits and letters are allowed. No space allowed.\",\r\n  },\r\n  letters: {\r\n    pattern: new RegExp(/[~!#%^_+\\-=?,./*|\\\":<>[\\]{}`\\\\()';@&$0-9]/),\r\n    helperText: \"Only letters are allowed\",\r\n  },\r\n  lettersDigitsSomeSChars: {\r\n    pattern: new RegExp(/[*|\\\":<>[\\]{}`\\\\()';@&$]/),\r\n    helperText: \"Special characters are not allowed\",\r\n  },\r\n  name: {\r\n    pattern: new RegExp(/[~!#%^_+=?/*|\\\":<>[\\]{}`\\\\();@&$0-9]/),\r\n    helperText: 'Only letters and \".,\\'-\" are allowed',\r\n  },\r\n  // number: {\r\n  //   pattern: new RegExp(/^[0-9]*$/),\r\n  //   helperText: \"Without space, only digits are allowed.\",\r\n  // ,\r\n};\r\ninterface IControlledStandardTextField extends StandardTextFieldProps {\r\n  pattern?:\r\n    | \"letters-digits\"\r\n    | \"letters-digits-no-space\"\r\n    | \"letters\"\r\n    | \"letters-digits-some-special-char\"\r\n    | \"name\";\r\n}\r\ninterface IControlledFilledTTextField extends FilledTextFieldProps {\r\n  pattern?:\r\n    | \"letters-digits\"\r\n    | \"letters-digits-no-space\"\r\n    | \"letters\"\r\n    | \"letters-digits-some-special-char\"\r\n    | \"name\";\r\n}\r\ninterface IControlledOutlinedTextField extends OutlinedTextFieldProps {\r\n  pattern?:\r\n    | \"letters-digits\"\r\n    | \"letters-digits-no-space\"\r\n    | \"letters\"\r\n    | \"letters-digits-some-special-char\"\r\n    | \"name\";\r\n}\r\nexport type IControlledTextField =\r\n  | IControlledStandardTextField\r\n  | IControlledFilledTTextField\r\n  | IControlledOutlinedTextField;\r\nexport function ControlledTextfield(props: IControlledTextField) {\r\n  const {\r\n    pattern,\r\n    onChange,\r\n    onBlur,\r\n    onFocus,\r\n    helperText,\r\n    defaultValue,\r\n    ...rest\r\n  } = props;\r\n  const [value, setValue] = useState(\r\n    defaultValue == undefined ? \"\" : defaultValue\r\n  );\r\n  const [showError, setShowError] = useState(false);\r\n  const [showHelperText, setShowHelperText] = useState(false);\r\n  const [statePattern, setPattern] = useState<RegExp | null>(null);\r\n  const [stateHelperText, setHelperText] = useState<string | undefined>();\r\n\r\n  useEffect(() => {\r\n    switch (pattern) {\r\n      case \"letters-digits\":\r\n        setPattern(rules.lettersDigits.pattern);\r\n        setHelperText(rules.lettersDigits.helperText);\r\n        break;\r\n      case \"letters-digits-no-space\":\r\n        setPattern(rules.lettersDigitsNoSpace.pattern);\r\n        setHelperText(rules.lettersDigitsNoSpace.helperText);\r\n        break;\r\n      case \"letters\":\r\n        setPattern(rules.letters.pattern);\r\n        setHelperText(rules.letters.helperText);\r\n        break;\r\n      case \"letters-digits-some-special-char\":\r\n        setPattern(rules.lettersDigitsSomeSChars.pattern);\r\n        setHelperText(rules.lettersDigitsSomeSChars.helperText);\r\n        break;\r\n      case \"name\":\r\n        setPattern(rules.name.pattern);\r\n        setHelperText(rules.name.helperText);\r\n        break;\r\n    }\r\n  }, []);\r\n\r\n  function handleOnChange(event) {\r\n    if (statePattern && statePattern.test(event.target.value)) {\r\n      setShowError(true);\r\n    } else {\r\n      setValue(event.target.value);\r\n      setShowError(false);\r\n    }\r\n    if (onChange) onChange(event);\r\n  }\r\n  \r\n  return (\r\n    <TextField\r\n      {...rest}\r\n      value={value}\r\n      error={props.error ? true : showError}\r\n      onChange={handleOnChange}\r\n      helperText={\r\n        helperText ? helperText : showHelperText ? stateHelperText : \"\"\r\n      }\r\n      onFocus={(event) => {\r\n        setShowHelperText(true);\r\n        if (onFocus) onFocus(event);\r\n      }}\r\n      onBlur={(event) => {\r\n        setShowError(false);\r\n        setShowHelperText(false);\r\n        handleOnChange(event);\r\n        if (onBlur) onBlur(event);\r\n      }}\r\n    />\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\CoursePrice.tsx",["680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698"],"import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Grid,\r\n  InputAdornment,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport function CoursePrice({ course, onCourseAttrChange, onSave, onCancel }) {\r\n  const [offerShow, setOfferShow] = useState(false);\r\n  const [offerValue, setOfferValue] = useState(course.off ? course.off : 0);\r\n  const [mainPrice, setMainPrice] = useState(\r\n    course.mainPrice ? course.mainPrice : 0\r\n  );\r\n  useEffect(() => {\r\n    if (course.off) setOfferShow(true);\r\n  }, [course.off]);\r\n  return (\r\n    <Grid container direction=\"column\" spacing={3}>\r\n      <Grid item container>\r\n        <Card style={{ width: \"100%\" }}>\r\n          <CardContent>\r\n            <Grid container direction=\"column\">\r\n              <TextField\r\n                label=\"Course price\"\r\n                variant=\"outlined\"\r\n                value={mainPrice}\r\n                margin=\"normal\"\r\n                type=\"number\"\r\n                inputProps={{ min: 0 }}\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">৳</InputAdornment>\r\n                  ),\r\n                }}\r\n                onChange={(event) => {\r\n                  if (\r\n                    (parseFloat(event.target.value) >= 0 &&\r\n                      event.target.value != \"-\") ||\r\n                    event.target.value == \"\"\r\n                  ) {\r\n                    setMainPrice(event.target.value);\r\n                  }\r\n                }}\r\n                onBlur={(event) =>\r\n                  onCourseAttrChange({ mainPrice: Number(event.target.value) })\r\n                }\r\n                helperText=\"If you want to give this course as free, set price to 0\"\r\n              />\r\n              {mainPrice && mainPrice != \"0\" && (\r\n                <>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={offerShow}\r\n                        onChange={(event) => {\r\n                          if (!offerShow) onCourseAttrChange({ off: 0 });\r\n                          setOfferShow(!offerShow);\r\n                        }}\r\n                      />\r\n                    }\r\n                    label=\"Do you want to give offer?\"\r\n                  />\r\n                  {offerShow && (\r\n                    <>\r\n                      <TextField\r\n                        label=\"Set an offer in percentage\"\r\n                        variant=\"outlined\"\r\n                        value={offerValue}\r\n                        margin=\"normal\"\r\n                        type=\"number\"\r\n                        inputProps={{\r\n                          min: 0,\r\n                          max: 100,\r\n                        }}\r\n                        InputProps={{\r\n                          endAdornment: \"%\",\r\n                        }}\r\n                        onChange={(event) => {\r\n                          if (\r\n                            (parseFloat(event.target.value) >= 0 &&\r\n                              parseFloat(event.target.value) <= 100 &&\r\n                              event.target.value != \"-\") ||\r\n                            event.target.value == \"\"\r\n                          ) {\r\n                            setOfferValue(event.target.value);\r\n                          }\r\n                        }}\r\n                        onBlur={(event) =>\r\n                          onCourseAttrChange({\r\n                            off: Number(event.target.value),\r\n                          })\r\n                        }\r\n                      />\r\n                      <TextField\r\n                        label=\"Price will show to student\"\r\n                        contentEditable={false}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        type={\r\n                          mainPrice == \"0\" ||\r\n                          mainPrice == \"\" ||\r\n                          offerValue == 100\r\n                            ? \"text\"\r\n                            : mainPrice != \"\" && offerValue != \"\"\r\n                            ? \"number\"\r\n                            : mainPrice != 0 && offerValue == \"\"\r\n                            ? \"number\"\r\n                            : \"text\"\r\n                        }\r\n                        value={\r\n                          mainPrice == \"0\" ||\r\n                          mainPrice == \"\" ||\r\n                          offerValue == 100\r\n                            ? \"FREE\"\r\n                            : mainPrice != \"\" && offerValue != \"\"\r\n                            ? mainPrice - (mainPrice * offerValue) / 100\r\n                            : mainPrice != 0 && offerValue == \"\"\r\n                            ? mainPrice\r\n                            : \"FREE\"\r\n                        }\r\n                        InputProps={{\r\n                          startAdornment: (\r\n                            <InputAdornment position=\"start\">৳</InputAdornment>\r\n                          ),\r\n                          readOnly: true,\r\n                        }}\r\n                        onBlur={(event) =>\r\n                          onCourseAttrChange({\r\n                            off: Number(event.target.value),\r\n                          })\r\n                        }\r\n                      />\r\n                    </>\r\n                  )}\r\n                </>\r\n              )}\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item container direction=\"row\" justifyContent=\"center\" spacing={3}>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={onSave}>\r\n            Save\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"contained\" color=\"secondary\" onClick={onCancel}>\r\n            Cancel\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\footer\\Footer.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\ImageVeiw.tsx",["699","700"],"import { Grid, makeStyles } from \"@material-ui/core\";\r\nimport { DefaultComponentProps } from \"@material-ui/core/OverridableComponent\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  optionsWrapper: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    right: 0,\r\n    opacity: 0.4,\r\n    \"&:hover\": { opacity: 1 },\r\n  },\r\n}));\r\nexport interface ImageViewProps {\r\n  src?: string;\r\n  item?: boolean;\r\n  align?: \"center\" | \"left\" | \"right\";\r\n  options?: JSX.Element | JSX.Element[];\r\n  containerProps?: DefaultComponentProps<any>;\r\n  wrapperProps?: DefaultComponentProps<any>;\r\n  imgProps?: DefaultComponentProps<any>;\r\n}\r\nexport default function GridImageView(props: ImageViewProps) {\r\n  const classes = useStyles();\r\n  let { align, item, options } = props;\r\n  align = align || \"center\";\r\n  item = item || false;\r\n  return (\r\n    <Grid\r\n      item={item}\r\n      container\r\n      alignItems=\"center\"\r\n      justifyContent={\r\n        align === \"left\" ? \"flex-start\" : align === \"right\" ? \"flex-end\" : align\r\n      }\r\n      {...props.containerProps}\r\n    >\r\n      {options ? (\r\n        <Grid item {...props.wrapperProps}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            style={{ position: \"relative\" }}\r\n          >\r\n            <Grid item container>\r\n              <img src={props.src} {...props.imgProps} />\r\n            </Grid>\r\n            <Grid item className={classes.optionsWrapper}>\r\n              {options}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        <Grid item {...props.wrapperProps}>\r\n          <img src={props.src} />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\classes\\Course.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\Curriculum.tsx",["701"],"import { Button, Grid } from \"@material-ui/core\";\r\nimport AddCircle from \"@material-ui/icons/AddCircle\";\r\nimport { Week } from \"classes/Course\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { WeekView } from \"./WeekView\";\r\n\r\nexport function Curriculum({ editable, course, onCourseAttrChange }) {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [weeks, setWeeks] = useState(course.weeks);\r\n\r\n  useEffect(() => {\r\n    // handleOnWeekAdd();\r\n  }, []);\r\n\r\n  function onWeekChange(index, week) {\r\n    let updWeeks = [...weeks];\r\n    updWeeks[index] = week;\r\n    setWeeks(updWeeks);\r\n    onCourseAttrChange({ weeks: updWeeks });\r\n  }\r\n  function handleOnWeekAdd() {\r\n    let updWeeks = [...weeks, new Week().setWeekNo(weeks.length + 1)];\r\n    setWeeks(updWeeks);\r\n    onCourseAttrChange({ weeks: updWeeks });\r\n  }\r\n\r\n  function handleOnWeekRemove(index) {\r\n    if (weeks.length == 1) {\r\n      enqueueSnackbar(\"There must be at least a week\", { variant: \"warning\" });\r\n      return;\r\n    }\r\n    let updWeeks = [...weeks];\r\n    updWeeks.splice(index, 1);\r\n    onCourseAttrChange({ weeks: updWeeks });\r\n    setWeeks([...updWeeks]);\r\n  }\r\n  return (\r\n    <Grid container direction=\"column\" spacing={0}>\r\n      {/*      <ReactSortable\r\n        list={weeks}\r\n        setList={setWeeks}\r\n      > */}\r\n\r\n      {/* <ReactSortable list={weeks} setList={setWeeks} style={{ width: \"100%\" }}> */}\r\n      {weeks.map((item, index) => (\r\n        // <div key={item.id}>\r\n        <Grid item container key={index}>\r\n          <WeekView\r\n            editable={editable}\r\n            week={item}\r\n            onWeekChange={(week) => onWeekChange(index, week)}\r\n            onWeekRemove={() => handleOnWeekRemove(index)}\r\n            weekNo={index + 1}\r\n            // setWeek={(week) => onWeekChange(index, week)}\r\n            // onWeekAdd={() => handleOnWeekAdd(index)}\r\n          />\r\n        </Grid>\r\n      ))}\r\n      {/* </ReactSortable> */}\r\n      {editable && (\r\n        <Grid item container justifyContent=\"center\" style={{ marginTop: 10 }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<AddCircle />}\r\n            onClick={handleOnWeekAdd}\r\n          >\r\n            ADD WEEK\r\n          </Button>\r\n        </Grid>\r\n      )}\r\n      {/* </div> */}\r\n      {/* </ReactSortable> */}\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\header\\Header.tsx",["702","703","704","705","706"],"import {\r\n  Avatar,\r\n  Button,\r\n  CardActionArea,\r\n  Divider,\r\n  Grid,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  Popover,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Dashboard } from \"@material-ui/icons\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport axios from \"axios\";\r\nimport { Files } from \"classes/Files\";\r\nimport classNames from \"classnames\";\r\nimport AuthService, { authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { Responsive } from \"tools/responsive/Responsive\";\r\nimport { TopNav } from \"./NavBar\";\r\nimport { Notification } from \"./NotificationPopUp\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"#282C34\",\r\n    flexGrow: 1,\r\n    padding: 5,\r\n    \"& > *\": {\r\n      color: \"white\",\r\n    },\r\n    \"& input\": {\r\n      color: \"white\",\r\n    },\r\n    \"& fieldset\": {\r\n      border: \"2px solid white\",\r\n    },\r\n    \"& fieldset:focus\": {\r\n      border: \"2px solid gray\",\r\n    },\r\n  },\r\n  logo: {\r\n    width: 50,\r\n    height: 50,\r\n  },\r\n  title: {\r\n    display: \"block-inline\",\r\n    textAlign: \"center\",\r\n    marginLeft: theme.spacing(1),\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      flexGrow: 1,\r\n      padding: 0,\r\n    },\r\n    color: \"inherit\",\r\n  },\r\n  input: {\r\n    flexGrow: 1,\r\n  },\r\n  inputRoot: {\r\n    flexGrow: 1,\r\n    color: \"inherit\",\r\n    borderRadius: \"35px\",\r\n    padding: theme.spacing(0, 2, 0, 3),\r\n    margin: theme.spacing(0, 3),\r\n  },\r\n}));\r\n\r\nexport function Header({\r\n  disableCategoryBar = false,\r\n}: {\r\n  disableCategoryBar?: boolean;\r\n}) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [photo, setPhoto] = useState<Files>();\r\n  useEffect(() => {\r\n    setPhoto(AuthService.getPhoto());\r\n    // PersonService.getProfilePhoto().then((response) => {\r\n    //   console.log(\"Profile photo fetched\", response.data);\r\n    //   setPhoto(response.data);\r\n    // });\r\n  }, []);\r\n\r\n  function profileDetailsLoad() {\r\n    if (AuthService.getCurrentAccountType() == \"Teacher\") {\r\n      axios\r\n        .get(GLOBAL.HOST + \"/get-teacher-self\", authHeaders())\r\n        .then((response) => {\r\n          console.log(\"Person data from header\", response);\r\n\r\n          let photo = response.data.photo;\r\n          response.data.photo = new Files(photo.type, photo.title)\r\n            .setId(photo.id)\r\n            .setContent(photo.content);\r\n\r\n          history.push({\r\n            pathname: \"/profile-details\",\r\n            state: {\r\n              person: response.data,\r\n              registered: true,\r\n            },\r\n          });\r\n        });\r\n    } else if (AuthService.getCurrentAccountType() == \"Student\") {\r\n      axios\r\n        .get(GLOBAL.HOST + \"/get-student-self\", authHeaders())\r\n        .then((response) => {\r\n          console.log(\"Person data from header\", response);\r\n          history.push({\r\n            pathname: \"/profile-details\",\r\n            state: {\r\n              person: response.data,\r\n              registered: true,\r\n            },\r\n          });\r\n        });\r\n    }\r\n    // PersonService.getPersonSelf().then((response) => {\r\n    //   console.log(\"Person data from header\", response);\r\n    //   history.push({\r\n    //     pathname: \"/profile-details\",\r\n    //     state: {\r\n    //       person: response.data,\r\n    //       registered: true,\r\n    //     },\r\n    //   });\r\n    // });\r\n  }\r\n\r\n  const popUpNavProperty = {\r\n    admin: [\r\n      // { label: \"My Course\", link: \"/my-course\" },\r\n      // { label: \"Purchase History\", link: \"/dashboard/purchase-history\" },\r\n      // { label: \"My Review\", link: \"/dashboard/review\" },\r\n      // { label: \"FAQ\", link: \"/dashboard/faq\" },\r\n      // { label: \"Account Setting\", link: \"/profile-details\" },\r\n      // { label: \"Sign out\", link: \"/auth/signin\" },\r\n      // { label: \"Overview\", link: \"/dashboard/overview\" },\r\n      // { label: \"Create a course\", link: \"/create-course\" },\r\n      // { label: \"Student's Review\", link: \"/dashboard/review\" },\r\n      {\r\n        label: \"Account Setting\",\r\n        func: profileDetailsLoad,\r\n      },\r\n      {\r\n        label: \"Message\",\r\n        func: () => {\r\n          history.push(\"/message\");\r\n        },\r\n      },\r\n      {\r\n        label: \"Sign out\",\r\n        link: \"/auth/signin\",\r\n        func: () => {\r\n          AuthService.logout();\r\n          history.push(\"/auth/signin\");\r\n        },\r\n      },\r\n    ],\r\n    teacher: [\r\n      {\r\n        label: \"Overview\",\r\n        func: () => {\r\n          history.push(\"/dashboard/overview\");\r\n        },\r\n      },\r\n      {\r\n        label: \"Create a course\",\r\n        func: () => {\r\n          history.push(\"/create-course\");\r\n        },\r\n      },\r\n      {\r\n        label: \"My Course\",\r\n        func: () => {\r\n          history.push(\"/my-course\");\r\n        },\r\n      },\r\n      {\r\n        label: \"Message\",\r\n        func: () => {\r\n          history.push(\"/message\");\r\n        },\r\n      },\r\n      {\r\n        label: \"Student's Review\",\r\n        func: () => {\r\n          history.push(\"/dashboard/review\");\r\n        },\r\n      },\r\n      {\r\n        label: \"FAQ\",\r\n        func: () => {\r\n          history.push(\"/dashboard/faq\");\r\n        },\r\n      },\r\n      {\r\n        label: \"Account Setting\",\r\n        func: profileDetailsLoad,\r\n      },\r\n      {\r\n        label: \"Sign out\",\r\n        func: () => {\r\n          AuthService.logout();\r\n          history.push(\"/auth/signin\");\r\n        },\r\n      },\r\n    ],\r\n    student: [\r\n      {\r\n        label: \"My Purchased Course\",\r\n        func: () => {\r\n          history.push(\"/my-course\");\r\n        },\r\n      },\r\n      {\r\n        label: \"Purchase History\",\r\n        func: () => {\r\n          history.push(\"/dashboard/purchase-history\");\r\n        },\r\n      },\r\n      {\r\n        label: \"Message\",\r\n        func: () => {\r\n          history.push(\"/message\");\r\n        },\r\n      },\r\n      {\r\n        label: \"My Review\",\r\n        func: () => {\r\n          history.push(\"/dashboard/review\");\r\n        },\r\n      },\r\n      {\r\n        label: \"FAQ\",\r\n        func: () => {\r\n          history.push(\"/dashboard/faq\");\r\n        },\r\n      },\r\n      {\r\n        label: \"Account Setting\",\r\n        func: profileDetailsLoad,\r\n      },\r\n      {\r\n        label: \"Sign out\",\r\n        func: () => {\r\n          AuthService.logout();\r\n          history.push(\"/auth/signin\");\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  const [popUpNav, setPopUpNav] = useState<any>([]);\r\n\r\n  useEffect(() => {\r\n    switch (AuthService.getCurrentAccountType()) {\r\n      case \"Admin\":\r\n        setPopUpNav(popUpNavProperty.admin);\r\n        break;\r\n      case \"Student\":\r\n        setPopUpNav(popUpNavProperty.student);\r\n        break;\r\n      case \"Teacher\":\r\n        setPopUpNav(popUpNavProperty.teacher);\r\n        break;\r\n    }\r\n  }, []);\r\n\r\n  function Logo() {\r\n    const classes = useStyles();\r\n    return (\r\n      <>\r\n        <IconButton onClick={(event) => history.push(\"/home\")}>\r\n          <img\r\n            className={classes.logo}\r\n            src={require(\"assets/img/CourseOverflowIcon.png\").default}\r\n          />\r\n        </IconButton>\r\n        <Responsive displayIn={[\"Laptop\", \"Tablet\"]}>\r\n          <Typography\r\n            className={classes.title}\r\n            variant=\"h6\"\r\n            noWrap\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={(event) => history.push(\"/home\")}\r\n          >\r\n            Course Bucket\r\n          </Typography>\r\n        </Responsive>\r\n        <Responsive displayIn={[\"Mobile\"]}>\r\n          <Grid\r\n            className={classes.title}\r\n            item\r\n            onClick={(event) => history.push(\"/home\")}\r\n          >\r\n            <Typography variant=\"h6\" noWrap>\r\n              Course\r\n            </Typography>\r\n            <Typography variant=\"h6\" noWrap>\r\n              Bucket\r\n            </Typography>\r\n          </Grid>\r\n        </Responsive>\r\n      </>\r\n    );\r\n  }\r\n  function SearchBox(props) {\r\n    const classes = useStyles();\r\n    const [value, setValue] = useState(\"\");\r\n    function handleSearchClick() {\r\n      if (history.location.pathname == \"/search\") {\r\n        history.replace({\r\n          pathname: `/search`,\r\n          state: { key: value },\r\n        });\r\n      } else {\r\n        history.push({\r\n          pathname: `/search`,\r\n          state: { key: value },\r\n        });\r\n      }\r\n    }\r\n    return (\r\n      <div className={classNames(classes.inputRoot, props.className)}>\r\n        <Grid container spacing={1} alignItems=\"center\">\r\n          <Grid item className={classes.input}>\r\n            <TextField\r\n              style={{ backgroundColor: \"#656B81\", color: \"white\" }}\r\n              placeholder=\"Search course...\"\r\n              fullWidth\r\n              value={value}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              inputProps={{\r\n                type: \"search\",\r\n              }}\r\n              onKeyPress={(event) =>\r\n                event.key === \"Enter\" ? handleSearchClick() : \"\"\r\n              }\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <IconButton onClick={handleSearchClick}>\r\n                    <SearchIcon />\r\n                  </IconButton>\r\n                ),\r\n              }}\r\n              variant=\"outlined\"\r\n              onChange={(event) => setValue(event.target.value)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n  function SideMenuPopUp() {\r\n    return (\r\n      <Grid container direction=\"column\" style={{ backgroundColor: \"#646BB3\" }}>\r\n        <Grid\r\n          item\r\n          onClick={(event) => {\r\n            history.push(`/profile/${AuthService.getCurrentUsername()}`);\r\n          }}\r\n        >\r\n          <CardActionArea style={{ padding: 16 }}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              alignItems=\"center\"\r\n              wrap=\"nowrap\"\r\n              spacing={1}\r\n            >\r\n              <Grid item>\r\n                <Avatar src={photo?.content} />\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography>Signed in as</Typography>\r\n                <Typography variant=\"h6\">\r\n                  {AuthService.getCurrentUser().username}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  {AuthService.getCurrentUser().email}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </CardActionArea>\r\n        </Grid>\r\n        <Divider />\r\n        <Grid item>\r\n          <List>\r\n            {popUpNav.map((item) => (\r\n              <ListItem\r\n                key={item.label}\r\n                button\r\n                onClick={(event) => {\r\n                  item.func();\r\n                }}\r\n              >\r\n                {item.label}\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n  function IconSet() {\r\n    const [anchorRef, setAnchorRef] = useState<HTMLButtonElement | null>(null);\r\n\r\n    return (\r\n      <>\r\n        {AuthService.isLogin() ? (\r\n          <>\r\n            <Notification />\r\n            {AuthService.getCurrentAccountType() === \"Admin\" && (\r\n              <Tooltip title=\"Admin Dashboard\">\r\n                <IconButton onClick={(event) => history.push(\"/admin\")}>\r\n                  <Avatar>\r\n                    <Dashboard style={{ color: \"white\" }} />\r\n                  </Avatar>\r\n                </IconButton>\r\n              </Tooltip>\r\n            )}\r\n            <Grid style={{ display: \"flex\" }}>\r\n              <IconButton\r\n                onClick={(event: React.MouseEvent<any>) =>\r\n                  setAnchorRef(event.currentTarget)\r\n                }\r\n              >\r\n                <Avatar src={photo?.content} />\r\n              </IconButton>\r\n              <Popover\r\n                open={Boolean(anchorRef)}\r\n                anchorEl={anchorRef}\r\n                onClose={() => setAnchorRef(null)}\r\n                anchorOrigin={{\r\n                  vertical: \"bottom\",\r\n                  horizontal: \"center\",\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: \"top\",\r\n                  horizontal: \"center\",\r\n                }}\r\n              >\r\n                <SideMenuPopUp />\r\n              </Popover>\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <Responsive displayIn={[\"Laptop\", \"Tablet\", \"Mobile\"]}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ margin: 12 }}\r\n              onClick={(event) => {\r\n                history.push(\"/auth/signin\");\r\n              }}\r\n            >\r\n              Sign in\r\n            </Button>\r\n          </Responsive>\r\n        )}\r\n        {/* <SideNav>\r\n          <IconButton>\r\n            <MenuIcon fontSize=\"large\" />\r\n          </IconButton>\r\n        </SideNav> */}\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <Grid id=\"header-root\">\r\n        <Toolbar className={classes.root}>\r\n          <Grid container direction=\"column\" style={{ flexGrow: 1 }}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"flex-end\"\r\n            >\r\n              <Logo />\r\n              <Responsive displayIn={[\"Laptop\", \"Tablet\"]}>\r\n                <SearchBox />\r\n              </Responsive>\r\n              <IconSet />\r\n            </Grid>\r\n            <Responsive displayIn={\"Mobile\"}>\r\n              <Grid container direction=\"row\">\r\n                <SearchBox />\r\n              </Grid>\r\n            </Responsive>\r\n          </Grid>\r\n        </Toolbar>\r\n        {!disableCategoryBar && <TopNav />}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\responsive\\Responsive.js",[],"D:\\program\\java\\coursebucket\\frontend\\src\\classes\\Files.tsx",["707","708","709","710"],"import axios from \"axios\";\r\nimport { authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure.js\";\r\nimport { FileObject } from \"material-ui-dropzone\";\r\n\r\nexport class Files {\r\n  id: number;\r\n  type: \"ICON\" | \"VIDEO\" | \"PICTURE\" | \"PDF\" | \"ARTICLE\" | \"LINK\" | \"MESSAGE\";\r\n  title: string;\r\n  content: any;\r\n  uploadTime: Date;\r\n  lastUpdateTime: Date;\r\n\r\n  constructor(\r\n    type: \"ICON\" | \"VIDEO\" | \"PICTURE\" | \"PDF\" | \"ARTICLE\" | \"LINK\" | \"MESSAGE\",\r\n    title: string = \"\"\r\n  ) {\r\n    this.type = type;\r\n    this.title = title;\r\n  }\r\n  setFile(file: FileObject): Files {\r\n    console.log(\"In File: \", file);\r\n    this.content = file;\r\n    return this;\r\n  }\r\n  setTitle(title: string): Files {\r\n    this.title = title;\r\n    return this;\r\n  }\r\n  setContent(content: any): Files {\r\n    this.content = content;\r\n    return this;\r\n  }\r\n  setId(id: number): Files {\r\n    this.id = id;\r\n    return this;\r\n  }\r\n  async upload() {\r\n    if (\r\n      this.type == \"VIDEO\" ||\r\n      this.type == \"PICTURE\" ||\r\n      this.type == \"PDF\" ||\r\n      this.type == \"MESSAGE\"\r\n    ) {\r\n      if (this.content.file) {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", this.content.file);\r\n        formData.append(\"type\", this.type);\r\n        formData.append(\r\n          \"secure\",\r\n          this.type === \"PICTURE\" || this.type === \"MESSAGE\" ? \"false\" : \"true\"\r\n        );\r\n        await axios\r\n          .put(GLOBAL.HOST + `/resources/upload`, formData, authHeaders())\r\n          .then((response) => {\r\n            this.content = response.data.uri;\r\n            console.log(1);\r\n            console.log(\"File url: \", response.data);\r\n          });\r\n      }\r\n    }\r\n    return await Promise.resolve();\r\n  }\r\n}\r\n\r\nexport class Slider {\r\n  id: number;\r\n  serial: number;\r\n  file: Files;\r\n  adminId: string;\r\n}\r\n\r\nexport {};\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\LanguageService.js",["711"],"import axios from \"axios\"\r\nimport { GLOBAL } from 'Configure.js'\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\";\r\n\r\nclass LanguageService {\r\n\r\n    getAllLanguages() {\r\n        return axios.get(GLOBAL.HOST + '/public/get-languages')\r\n    }\r\n\r\n    deleteLanguage(id) {\r\n        return axios.delete(GLOBAL.HOST + `/delete-language/${id}`,authHeaders())\r\n    }\r\n\r\n    updateLanguage(language) {\r\n        return axios.put(GLOBAL.HOST + '/update-language', language,authHeaders())\r\n    }\r\n\r\n    addLanguage(language) {\r\n        return axios.post(GLOBAL.HOST + '/add-language', language, authHeaders())\r\n    }\r\n\r\n}\r\n\r\nexport default new LanguageService()","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\EduStatusService.js",["712"],"import axios from \"axios\"\r\nimport { GLOBAL } from 'Configure.js'\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\";\r\n\r\nclass EduStatusService {\r\n\r\n    getAllEduStatus() {\r\n        return axios.get(GLOBAL.HOST + '/public/get-edustatus')\r\n    }\r\n\r\n    deleteEduStatus(id) {\r\n        return axios.delete(GLOBAL.HOST + `/delete-edustatus/${id}`,authHeaders())\r\n    }\r\n\r\n\r\n    updateEduStatus(edustatus) {\r\n        return axios.put(GLOBAL.HOST + '/update-edustatus', edustatus, authHeaders())\r\n    }\r\n\r\n    addEduStatus(edustatus) {\r\n        return axios.post(GLOBAL.HOST + '/add-edustatus', edustatus, authHeaders())\r\n    }\r\n\r\n}\r\n\r\nexport default new EduStatusService()","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\DesignationService.js",["713"],"import axios from \"axios\"\r\nimport { GLOBAL } from 'Configure.js'\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\";\r\n\r\nclass DesignationService {\r\n\r\n    getAllDesignation() {\r\n        return axios.get(GLOBAL.HOST + '/public/get-designations')\r\n    }\r\n\r\n    deleteDesignation(id) {\r\n        return axios.delete(GLOBAL.HOST + `/delete-designation/${id}`,authHeaders())\r\n    }\r\n\r\n\r\n    updateDesignation(designation) {\r\n        return axios.put(GLOBAL.HOST + '/update-designation', designation,authHeaders())\r\n    }\r\n\r\n    addDesignation(designation) {\r\n        return axios.post(GLOBAL.HOST + '/add-designation', designation,authHeaders())\r\n    }\r\n\r\n}\r\n\r\nexport default new DesignationService()","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\responsive\\utilResponsive.js",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\CountryService.js",["714"],"import axios from \"axios\"\r\nimport { GLOBAL } from 'Configure.js'\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\";\r\n\r\n\r\nclass CountryService {\r\n\r\n    getAllCountries() {\r\n        return axios.get(GLOBAL.HOST + '/public/get-countries')\r\n    }\r\n\r\n    deleteCountry(id) {\r\n        return axios.delete(GLOBAL.HOST + `/delete-country/${id}`, authHeaders())\r\n    }\r\n\r\n\r\n    updateCountry(country) {\r\n        return axios.put(GLOBAL.HOST + '/update-country', country, authHeaders())\r\n    }\r\n\r\n    addCountry(country) {\r\n        return axios.post(GLOBAL.HOST + '/add-country', country, authHeaders())\r\n    }\r\n\r\n}\r\n\r\nexport default new CountryService()","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\ShadowText.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\dashboard\\FAQview.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\dashboard\\PurchaseHistoryLIstView.tsx",["715","716"],"import { Avatar, Grid, IconButton, Link } from \"@material-ui/core\";\r\nimport { PurchaseHistoryList } from \"classes/Course\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport CustomPagination from \"layout/Pagination\";\r\nimport MaterialTable from \"material-table\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport StudentService from \"../api/StudentService\";\r\nimport TeacherService from \"../api/TeacherService\";\r\nimport { ContentHeader } from \"./Dashboard\";\r\n\r\nfunction PurchaseHistoryTable({ data }) {\r\n  const history = useHistory();\r\n  data = data.map((item) => ({\r\n    person:\r\n      AuthService.getCurrentAccountType() === \"Teacher\"\r\n        ? {\r\n            name: item.studentName,\r\n            image: item.studentImage,\r\n            username: item.studentUsername,\r\n          }\r\n        : {\r\n            name: item.teacherName,\r\n            image: item.teacherImage,\r\n            username: item.teacherUsername,\r\n          },\r\n    time: new Date(item.purchaseTime).toLocaleString(),\r\n    amount: item.purchaseAmount,\r\n  }));\r\n  const [columns, setColumns] = useState([\r\n    {\r\n      title:\r\n        AuthService.getCurrentAccountType() === \"Teacher\"\r\n          ? \"Student\"\r\n          : \"Teacher\",\r\n      field: \"student\",\r\n      render: (rowData) => (\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          spacing={1}\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n        >\r\n          <Grid item>\r\n            <IconButton\r\n              onClick={() =>\r\n                history.push(`/profile/${rowData.person.username}`)\r\n              }\r\n            >\r\n              <Avatar src={rowData.person.image} />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item>\r\n            <Link variant=\"h6\" href={`/profile/${rowData.person.username}`}>\r\n              {rowData.person.name}\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      ),\r\n    },\r\n    { title: \"Purchase time\", field: \"time\" },\r\n    { title: \"Purchase Amount\", field: \"amount\" },\r\n  ]);\r\n  return (\r\n    <MaterialTable\r\n      // @ts-ignore\r\n      columns={columns.map((item) => ({ ...item, align: \"center\" }))}\r\n      title=\"\"\r\n      data={data}\r\n      options={{\r\n        search: false,\r\n        toolbar: false,\r\n        paging: data.length > 5,\r\n        headerStyle: { textAlign: \"center\" },\r\n        editCellStyle: { textAlign: \"center\" },\r\n      }}\r\n\r\n      // rowsPerPageOptions={AuthService.getCurrentAccountType()==='Student' ? [1] : [5,10,15]}\r\n    />\r\n  );\r\n}\r\n\r\nexport function PurchaseHistoryListView() {\r\n  const history = useHistory();\r\n  const [purchaseHistories, setPurchaseHistories] = useState<\r\n    PurchaseHistoryList[]\r\n  >([]);\r\n  useEffect(() => {\r\n    switch (AuthService.getCurrentAccountType()) {\r\n      case \"Student\":\r\n        StudentService.getPurchaseHistory().then((response) => {\r\n          console.log(\"Purchase History List\", response.data);\r\n          setPurchaseHistories(response.data);\r\n        });\r\n        break;\r\n      case \"Teacher\":\r\n        TeacherService.getPurchaseHistory().then((response) => {\r\n          console.log(\"Purchase History List\", response.data);\r\n          setPurchaseHistories(response.data);\r\n        });\r\n        break;\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <CustomPagination\r\n      objectsPerPage={3}\r\n      noContentText={\r\n        AuthService.getCurrentAccountType() === \"Student\"\r\n          ? \"You didn't purchase any course\"\r\n          : \"No student purchased your course yet\"\r\n      }\r\n    >\r\n      {purchaseHistories?.map((purchaseHistory) => (\r\n        <ContentHeader\r\n          key={purchaseHistory.courseId}\r\n          courseId={purchaseHistory.courseId}\r\n          courseTitle={purchaseHistory.courseTitle}\r\n          courseSubtitle={purchaseHistory.courseSubtitle}\r\n          courseImage={purchaseHistory.courseImage}\r\n          contentPadding={false}\r\n        >\r\n          <PurchaseHistoryTable data={purchaseHistory.purchaseHistoryInfos} />\r\n          {/* {AuthService.getCurrentAccountType() === \"Student\" && (\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"space-around\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item container justifyContent=\"flex-start\">\r\n                <Grid item>\r\n                  <Avatar src={\"\"} />\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"h6\">{}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item>{\"Date\"}</Grid>\r\n              <Grid item>{\"Cost\"}</Grid>\r\n            </Grid>\r\n          )} */}\r\n        </ContentHeader>\r\n      ))}\r\n    </CustomPagination>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\dashboard\\ReviewListView.tsx",["717"],"import { ReviewList } from \"classes/Course\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport { ReviewBox } from \"components/course/courseView/Review\";\r\nimport CustomPagination from \"layout/Pagination\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport StudentService from \"../api/StudentService\";\r\nimport TeacherService from \"../api/TeacherService\";\r\nimport { ContentHeader } from \"./Dashboard\";\r\n\r\nexport function ReviewListView() {\r\n  const history = useHistory();\r\n  const [reviewsWithCourses, setReviewsWithCourses] = useState<ReviewList[]>(\r\n    []\r\n  );\r\n  useEffect(() => {\r\n    switch (AuthService.getCurrentAccountType()) {\r\n      case \"Student\":\r\n        StudentService.getReviewList().then((response) => {\r\n          console.log(\"Review List\", response.data);\r\n          setReviewsWithCourses(response.data);\r\n        });\r\n        break;\r\n      case \"Teacher\":\r\n        TeacherService.getReviewList().then((response) => {\r\n          console.log(\"Review List\", response.data);\r\n          setReviewsWithCourses(response.data);\r\n        });\r\n        break;\r\n    }\r\n  }, []);\r\n  return (\r\n    <CustomPagination objectsPerPage={3} noContentText={AuthService.getCurrentAccountType()==='Student' ? \"You didn't review any course\" : \"No student reviewed your course yet\"\r\n}>\r\n      {reviewsWithCourses?.map((reviewsWithCourse) => (\r\n        <ContentHeader\r\n          key={reviewsWithCourse.courseId}\r\n          courseId={reviewsWithCourse.courseId}\r\n          courseTitle={reviewsWithCourse.courseTitle}\r\n          courseSubtitle={reviewsWithCourse.courseSubtitle}\r\n          courseImage={reviewsWithCourse.courseImage}\r\n        >\r\n          <CustomPagination objectsPerPage={3} divider>\r\n            {reviewsWithCourse?.reviewInfos?.map((review) => (\r\n              <ReviewBox review={review} key={review.id} />\r\n            ))}\r\n          </CustomPagination>\r\n        </ContentHeader>\r\n      ))}\r\n    </CustomPagination>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\FileUploader.tsx",["718","719"],"import { Grid } from \"@material-ui/core\";\r\nimport {\r\n  AttachFile,\r\n  InsertPhoto,\r\n  PictureAsPdf,\r\n  VideoCall,\r\n} from \"@material-ui/icons\";\r\nimport {\r\n  DropzoneAreaBase,\r\n  DropzoneAreaBaseProps,\r\n  FileObject,\r\n} from \"material-ui-dropzone\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\ninterface IFileUploader extends DropzoneAreaBaseProps {\r\n  type?: \"video\" | \"pdf\" | \"picture\";\r\n  onChange?: (files: FileObject[]) => void;\r\n}\r\n\r\nexport function FileUploader(props: IFileUploader) {\r\n  const {\r\n    fileObjects,\r\n    filesLimit,\r\n    onChange,\r\n    acceptedFiles,\r\n    Icon,\r\n    type,\r\n    showPreviewsInDropzone,\r\n    classes,\r\n    ...rest\r\n  } = props;\r\n  const [state, setState] = useState({\r\n    icon: Icon,\r\n    acceptedFiles: acceptedFiles,\r\n    fileObjects: fileObjects,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    switch (type?.toLowerCase()) {\r\n      case \"video\":\r\n        console.log(\"in use effect\");\r\n        setState({\r\n          ...state,\r\n          icon: <VideoCall />,\r\n          acceptedFiles: [\".mp4\", \".3gp\"],\r\n          fileObjects: fileObjects,\r\n        });\r\n        break;\r\n      case \"pdf\":\r\n        setState({\r\n          ...state,\r\n          icon: <PictureAsPdf />,\r\n          acceptedFiles: [\".pdf\"],\r\n          fileObjects: fileObjects,\r\n        });\r\n        break;\r\n      case \"picture\":\r\n        setState({\r\n          ...state,\r\n          icon: <InsertPhoto />,\r\n          acceptedFiles: [\".jpg\", \".png\", \".bmp\", \".gif\"],\r\n          fileObjects: fileObjects,\r\n        });\r\n        break;\r\n      default:\r\n        setState({\r\n          ...state,\r\n          icon: <AttachFile />,\r\n          acceptedFiles: [],\r\n          fileObjects: fileObjects,\r\n        });\r\n    }\r\n    return () => abortController.abort();\r\n  }, [type, fileObjects]);\r\n\r\n  function handleChange(files: FileObject[]) {\r\n    // if (filesLimit)\r\n    //   files = files.slice(files.length - filesLimit, files.length);\r\n    setState({ ...state, fileObjects: files });\r\n    if (onChange) onChange(files);\r\n  }\r\n  return (\r\n    <Grid item container>\r\n      <DropzoneAreaBase\r\n        {...rest}\r\n        //@ts-ignore\r\n        Icon={state.Icon}\r\n        classes={{ ...classes, icon: state.fileObjects ? \"display-none\" : \"\" }}\r\n        filesLimit={filesLimit}\r\n        acceptedFiles={state.acceptedFiles}\r\n        fileObjects={state.fileObjects}\r\n        dropzoneText=\"Drop a file here or click here\"\r\n        maxFileSize={100000000}\r\n        showPreviewsInDropzone={showPreviewsInDropzone}\r\n        // styles={{ position: \"relative\" }}\r\n        onAdd={(newFileObjects) => {\r\n          console.log(\"onAdd\", newFileObjects);\r\n          handleChange(fileObjects.concat(newFileObjects));\r\n        }}\r\n        previewGridProps={{\r\n          container: {\r\n            justifyContent: \"flex-start\",\r\n            spacing: 0,\r\n          },\r\n          item: {},\r\n        }}\r\n        onDelete={(deleteFileObj) => {\r\n          console.log(\"onDelete\", deleteFileObj);\r\n          handleChange(fileObjects.filter((item) => item != deleteFileObj));\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\footer\\SimpleReactFooter.tsx",["720","721","722","723","724","725"],"import { Avatar, Grid, IconButton, Typography } from \"@material-ui/core\";\r\nimport { Facebook, Mail } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport { FaPinterestSquare, FaTwitterSquare } from \"react-icons/fa\";\r\nimport {\r\n  ImFacebook2,\r\n  ImInstagram,\r\n  ImLinkedin,\r\n  ImYoutube,\r\n} from \"react-icons/im\";\r\nimport \"./SimpleReactFooter.sass\";\r\n\r\nfunction SimpleReactFooter(props) {\r\n  return (\r\n    <div\r\n      style={{ backgroundColor: props.backgroundColor || \"bisque\" }}\r\n      className=\"footer-container\"\r\n    >\r\n      <Grid container>\r\n        {props.columns.length !== 0 && (\r\n          <Grid item container sm={4} xs={12}>\r\n            {props.columns.map((column) => (\r\n              <Grid className=\"grid-item\" item sm={12} xs={6}>\r\n                <div\r\n                  style={{ color: props.fontColor || \"black\" }}\r\n                  className=\"second-title\"\r\n                >\r\n                  {column.title}\r\n                </div>\r\n                {column.resources.map((resource) => (\r\n                  <div key={resource.id}>\r\n                    <a\r\n                      href={`${resource.link}`}\r\n                      // target=\"_blank\"\r\n                      style={{ color: props.fontColor || \"black\" }}\r\n                      className=\"resources\"\r\n                    >\r\n                      {resource.name}\r\n                    </a>\r\n                  </div>\r\n                ))}\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        )}\r\n\r\n        <Grid item xs={6} sm={props.columns.length === 0 ? 6 : 4}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Avatar\r\n                src=\"https://avatars.githubusercontent.com/u/46004817?v=4\"\r\n                style={{ width: 180, height: 180 }}\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n            >\r\n              <Typography variant=\"h5\" style={{ color: \"#FFFFBA\" }}>\r\n                Md. Mehedi Hasan\r\n              </Typography>\r\n              <Typography variant=\"h5\" style={{ color: \"#FFFFBA\" }}>\r\n                CSE, BUET\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item container justifyContent=\"center\">\r\n              <Grid item>\r\n                <IconButton href=\"https://www.fb.com/66.mehedi\">\r\n                  <Facebook style={{ color: \"#FFFFBA\" }} />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item>\r\n                <IconButton href=\"https://www.google.com/66.mehedi\">\r\n                  <Mail style={{ color: \"#FFFFBA\" }} />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={6} sm={props.columns.length === 0 ? 6 : 4}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Avatar\r\n                src=\"https://avatars.githubusercontent.com/u/46061332?v=4\"\r\n                style={{ width: 180, height: 180 }}\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n            >\r\n              <Typography variant=\"h5\" style={{ color: \"#FFFFBA\" }}>\r\n                Kazi Wasif Amin\r\n              </Typography>\r\n              <Typography variant=\"h5\" style={{ color: \"#FFFFBA\" }}>\r\n                CSE, BUET\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item container justifyContent=\"center\">\r\n              <Grid item>\r\n                <IconButton href=\"https://www.fb.com/kazishammu\">\r\n                  <Facebook style={{ color: \"#FFFFBA\" }} />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item>\r\n                <IconButton href=\"https://www.google.com/kazishammu\">\r\n                  <Mail style={{ color: \"#FFFFBA\" }} />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      {props.facebook !== undefined ||\r\n      props.linkedin !== undefined ||\r\n      props.instagram !== undefined ||\r\n      props.twitter !== undefined ||\r\n      props.pinterest !== undefined ||\r\n      props.youtube !== undefined ? (\r\n        <div className=\"social-media-col\">\r\n          <div\r\n            style={{ color: props.fontColor || \"black\" }}\r\n            className=\"stay-connected-title\"\r\n          >\r\n            Stay connected\r\n          </div>\r\n          <div className=\"social-media\">\r\n            {props.facebook !== undefined ? (\r\n              <a\r\n                href={`https://www.facebook.com/${props.facebook}`}\r\n                target=\"_blank\"\r\n                className=\"socialMediaLogo\"\r\n              >\r\n                <ImFacebook2\r\n                  color={`${props.iconColor || \"black\"}`}\r\n                  size={25}\r\n                />{\" \"}\r\n              </a>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {props.linkedin !== undefined ? (\r\n              <a\r\n                href={`https://www.linkedin.com/in/${props.linkedin}`}\r\n                target=\"_blank\"\r\n                className=\"socialMediaLogo\"\r\n              >\r\n                <ImLinkedin color={`${props.iconColor || \"black\"}`} size={25} />{\" \"}\r\n              </a>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {props.instagram !== undefined ? (\r\n              <a\r\n                href={`https://www.instagram.com/${props.instagram}`}\r\n                target=\"_blank\"\r\n                className=\"socialMediaLogo\"\r\n              >\r\n                <ImInstagram\r\n                  color={`${props.iconColor || \"black\"}`}\r\n                  size={25}\r\n                />{\" \"}\r\n              </a>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {props.twitter !== undefined ? (\r\n              <a\r\n                href={`https://www.twitter.com/${props.twitter}`}\r\n                target=\"_blank\"\r\n                className=\"socialMediaLogo\"\r\n              >\r\n                <FaTwitterSquare\r\n                  color={`${props.iconColor || \"black\"}`}\r\n                  size={25}\r\n                />{\" \"}\r\n              </a>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {props.pinterest !== undefined ? (\r\n              <a\r\n                href={`https://www.pinterest.com/${props.pinterest}`}\r\n                target=\"_blank\"\r\n                className=\"socialMediaLogo\"\r\n              >\r\n                <FaPinterestSquare\r\n                  color={`${props.iconColor || \"black\"}`}\r\n                  size={25}\r\n                />{\" \"}\r\n              </a>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            {props.youtube !== undefined ? (\r\n              <a\r\n                href={`https://www.youtube.com/channel/${props.youtube}`}\r\n                target=\"_blank\"\r\n                className=\"socialMediaLogo\"\r\n              >\r\n                <ImYoutube color={`${props.iconColor || \"black\"}`} size={25} />{\" \"}\r\n              </a>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <div>\r\n        <div\r\n          style={{ color: props.copyrightColor || \"grey\" }}\r\n          className=\"copyright\"\r\n        >\r\n          Copyright &copy; {props.copyright}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// SimpleReactFooter.propTypes = {\r\n//   description: PropTypes.string,\r\n//   linkedin: PropTypes.string,\r\n//   instagram: PropTypes.string,\r\n//   facebook: PropTypes.string,\r\n//   youtube: PropTypes.string,\r\n//   pinterest: PropTypes.string,\r\n//   title: PropTypes.string,\r\n//   columns: PropTypes.arrayOf(\r\n//     PropTypes.shape({\r\n//       title: PropTypes.string,\r\n//       resources: PropTypes.arrayOf(\r\n//         PropTypes.shape({\r\n//           name: PropTypes.string,\r\n//           link: PropTypes.string,\r\n//         })\r\n//       ),\r\n//     })\r\n//   ),\r\n//   copyright: PropTypes.string,\r\n//   iconColor: PropTypes.string,\r\n//   backgroundColor: PropTypes.string,\r\n//   fontColor: PropTypes.string,\r\n//   copyrightColor: PropTypes.string,\r\n// };\r\n\r\nexport default SimpleReactFooter;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\header\\NotificationPopUp.tsx",["726","727","728","729","730"],"import {\r\n  Avatar,\r\n  Badge,\r\n  Button,\r\n  Divider,\r\n  Grid,\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  makeStyles,\r\n  Popover,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { lightBlue } from \"@material-ui/core/colors\";\r\nimport { Notifications } from \"@material-ui/icons\";\r\nimport axios from \"axios\";\r\nimport { authHeaders } from \"components/auth/api/AuthService\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { StickyContainer } from \"react-sticky\";\r\nimport GridImageView from \"tools/customDesign/ImageVeiw\";\r\nimport { GLOBAL } from \"./../../Configure\";\r\n\r\ninterface NotificationProps {\r\n  id: number;\r\n  type: string;\r\n  seen: boolean;\r\n  time: Date;\r\n  rating: number;\r\n  username: string;\r\n  fullName: string;\r\n  photo: string;\r\n  accountType: string;\r\n  courseId: number;\r\n  title: number;\r\n  cover: string;\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  background: {\r\n    backgroundColor: lightBlue[\"A700\"],\r\n  },\r\n  bold: {\r\n    fontWeight: \"bold\",\r\n  },\r\n  seen: {\r\n    // backgroundColor: \"#BAFFC9\",\r\n  },\r\n  unseen: {\r\n    backgroundColor: lightBlue[800],\r\n    \"&:hover\": {\r\n      backgroundColor: lightBlue[700],\r\n    },\r\n  },\r\n}));\r\n\r\nfunction NotificationItem({\r\n  notification,\r\n}: {\r\n  notification: NotificationProps;\r\n}) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const {\r\n    id,\r\n    type,\r\n    seen,\r\n    time,\r\n    rating,\r\n    username,\r\n    fullName,\r\n    photo,\r\n    accountType,\r\n    courseId,\r\n    title,\r\n    cover,\r\n  } = notification;\r\n  async function handleNotificationClick(link) {\r\n    await axios.put(\r\n      GLOBAL.HOST + `/notification-seen/${id}`,\r\n      {},\r\n      authHeaders()\r\n    );\r\n    history.push(link);\r\n  }\r\n\r\n  let image;\r\n  let text;\r\n  let link;\r\n  switch (notification.type) {\r\n    case \"REGISTRATION\":\r\n      image = <Avatar src={photo} />;\r\n      link = `/profile/${username}`;\r\n      text = (\r\n        <>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {username}\r\n          </Typography>\r\n          <Typography display=\"inline\"> registered</Typography>\r\n        </>\r\n      );\r\n      break;\r\n    case \"COURSEUPLOAD\":\r\n      image = <Avatar src={photo} />;\r\n      link = `/course/${courseId}`;\r\n      text = (\r\n        <>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {fullName}{\" \"}\r\n          </Typography>\r\n          <Typography display=\"inline\">uploaded a new course</Typography>\r\n        </>\r\n      );\r\n      break;\r\n    case \"COURSEPURCHASE\":\r\n      image = <Avatar src={photo} />;\r\n      link = `/dashboard/purchase-history`;\r\n      text = (\r\n        <>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {fullName}{\" \"}\r\n          </Typography>\r\n          <Typography display=\"inline\">purchased </Typography>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {title}{\" \"}\r\n          </Typography>\r\n        </>\r\n      );\r\n      break;\r\n    case \"COURSEAPPROVED\":\r\n      image = <GridImageView src={cover} />;\r\n      link = `/course/${courseId}`;\r\n      text = (\r\n        <>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {title}{\" \"}\r\n          </Typography>\r\n          <Typography display=\"inline\">is approved </Typography>\r\n        </>\r\n      );\r\n      break;\r\n    case \"COURSEUNAPPROVED\":\r\n      image = <img src={cover} />;\r\n      link = `/course/${courseId}`;\r\n      text = (\r\n        <>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {title}{\" \"}\r\n          </Typography>\r\n          <Typography display=\"inline\">is unapproved </Typography>\r\n        </>\r\n      );\r\n      break;\r\n    case \"RATING\":\r\n      image = <Avatar src={photo || \"\"} />;\r\n      link = `/course/${courseId}`;\r\n      text = (\r\n        <>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {fullName}{\" \"}\r\n          </Typography>\r\n          <Typography display=\"inline\">rated </Typography>\r\n          <Typography display=\"inline\">{rating} star </Typography>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {title}{\" \"}\r\n          </Typography>\r\n        </>\r\n      );\r\n      break;\r\n    case \"REVIEW\":\r\n      image = <Avatar src={photo} />;\r\n      link = `/dashboard/review`;\r\n      text = (\r\n        <>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {fullName}{\" \"}\r\n          </Typography>\r\n          <Typography display=\"inline\">reviewed </Typography>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {title}{\" \"}\r\n          </Typography>\r\n        </>\r\n      );\r\n      break;\r\n    case \"FAQQUESTION\":\r\n      image = <Avatar src={photo} />;\r\n      link = `/dashboard/faq`;\r\n      text = (\r\n        <>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {fullName}{\" \"}\r\n          </Typography>\r\n          <Typography display=\"inline\">asked a question in </Typography>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {title}\r\n          </Typography>\r\n        </>\r\n      );\r\n      break;\r\n    case \"FAQANSWER\":\r\n      image = <GridImageView src={cover} />;\r\n      link = `/dashboard/faq`;\r\n      text = (\r\n        <>\r\n          <Typography display=\"inline\">your question is answered in</Typography>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {title}{\" \"}\r\n          </Typography>\r\n        </>\r\n      );\r\n      break;\r\n    case \"COURSEUPDATE\":\r\n      image = <img src={cover} />;\r\n      link = `/course/${courseId}`;\r\n      text = (\r\n        <>\r\n          <Typography display=\"inline\" className={classes.bold}>\r\n            {title}{\" \"}\r\n          </Typography>\r\n          <Typography display=\"inline\">is updated</Typography>\r\n        </>\r\n      );\r\n      break;\r\n  }\r\n  return (\r\n    <ListItem\r\n      button\r\n      onClick={() => handleNotificationClick(link)}\r\n      className={seen ? classes.seen : classes.unseen}\r\n    >\r\n      {/* <CardActionArea onClick={() => history.push(link)}> */}\r\n      <ListItemAvatar\r\n        style={{ width: 56, textAlign: \"center\", marginRight: 7 }}\r\n      >\r\n        {image ? image : <Avatar />}\r\n      </ListItemAvatar>\r\n      <ListItemText>{text} </ListItemText>\r\n      {/* </CardActionArea> */}\r\n    </ListItem>\r\n  );\r\n}\r\nexport function Notification() {\r\n  const classes = useStyles();\r\n  const [notificationAnchorRef, setNotificationAnchorRef] =\r\n    useState<HTMLButtonElement | null>(null);\r\n  const [notifications, setNotifications] = useState<\r\n    NotificationProps[] | null\r\n  >([]);\r\n  useEffect(() => {\r\n    axios\r\n      .get(GLOBAL.HOST + \"/get-notification\", authHeaders())\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setNotifications(response.data);\r\n      });\r\n    return () => setNotifications(null);\r\n  }, []);\r\n\r\n  function handleSeeAllClicked() {\r\n    axios\r\n      .put(GLOBAL.HOST + \"/seen-all-notification\", {}, authHeaders())\r\n      .then(() => {\r\n        axios\r\n          .get(GLOBAL.HOST + \"/get-notification\", authHeaders())\r\n          .then((response) => {\r\n            console.log(response.data);\r\n            setNotifications(response.data);\r\n          });\r\n      });\r\n  }\r\n\r\n  let unseenCount = 0;\r\n  notifications?.forEach((item) => {\r\n    if (!item.seen) unseenCount++;\r\n  });\r\n  return (\r\n    <>\r\n      <IconButton\r\n        onClick={(event: React.MouseEvent<any>) =>\r\n          setNotificationAnchorRef(event.currentTarget)\r\n        }\r\n      >\r\n        <Badge badgeContent={unseenCount} color=\"secondary\">\r\n          <Notifications fontSize=\"large\" style={{ color: \"white\" }} />\r\n        </Badge>\r\n      </IconButton>\r\n      <Popover\r\n        open={Boolean(notificationAnchorRef)}\r\n        anchorEl={notificationAnchorRef}\r\n        onClose={() => setNotificationAnchorRef(null)}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"center\",\r\n        }}\r\n      >\r\n        <StickyContainer>\r\n          <Grid\r\n            className={classes.background}\r\n            container\r\n            direction=\"row\"\r\n            style={{ maxHeight: \"80vh\", maxWidth: 350 }}\r\n          >\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"row\"\r\n              wrap=\"nowrap\"\r\n              justifyContent=\"space-between\"\r\n              alignContent=\"center\"\r\n              style={{ padding: 12 }}\r\n              spacing={3}\r\n            >\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Notification</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button variant=\"outlined\" onClick={handleSeeAllClicked}>\r\n                  See all\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container>\r\n              <List style={{ width: \"100%\" }}>\r\n                {notifications?.map((item, idx) => (\r\n                  <React.Fragment key={idx}>\r\n                    <Divider />\r\n                    <NotificationItem notification={item} />\r\n                  </React.Fragment>\r\n                ))}\r\n              </List>\r\n            </Grid>\r\n          </Grid>\r\n        </StickyContainer>\r\n      </Popover>\r\n    </>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\WeekView.tsx",["731","732","733"],"import {\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Button,\r\n  Grid,\r\n  IconButton,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Cancel,\r\n  CheckCircle,\r\n  DeleteForever,\r\n  Edit,\r\n  ExpandMore,\r\n} from \"@material-ui/icons\";\r\nimport AddCircle from \"@material-ui/icons/AddCircle\";\r\nimport { Lecture, Week } from \"classes/Course\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { LectureView } from \"./LectureView\";\r\n\r\nconst defaultLecture = {\r\n  id: 0,\r\n  name: \"Lecture name is here...\",\r\n  type: \"\",\r\n  file: {\r\n    title: \"Title\",\r\n    body: \"\",\r\n  },\r\n};\r\n\r\nexport function WeekView({\r\n  editable,\r\n  week,\r\n  onWeekChange,\r\n  onWeekRemove,\r\n  weekNo,\r\n}: {\r\n  editable: boolean;\r\n  week: Week;\r\n  onWeekChange: (Week) => void;\r\n  onWeekRemove: () => void;\r\n  weekNo: number;\r\n}) {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [lectures, setLectures] = useState(week.lectures);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [fieldValue, setFieldValue] = useState(week.title);\r\n\r\n  useEffect(() => {\r\n    setFieldValue(week.title);\r\n    // handleOnLectureAdd;\r\n  }, []);\r\n\r\n  function handleOnLectureChange(index, lecture) {\r\n    week.lectures.splice(index, 1, lecture);\r\n    onWeekChange({ ...week, lectures: week.lectures });\r\n    setLectures(week.lectures);\r\n  }\r\n  function handleOnLectureAdd() {\r\n    let lectures = [\r\n      ...week.lectures,\r\n      new Lecture().setLectureNo(week.lectures.length + 1),\r\n    ];\r\n    onWeekChange({ ...week, lectures: lectures });\r\n    setLectures(lectures);\r\n  }\r\n  function handleOnLectureRemove(index) {\r\n    if (lectures.length == 1) {\r\n      enqueueSnackbar(\"There must be at least one lecture in a week\", {\r\n        variant: \"warning\",\r\n      });\r\n      return;\r\n    }\r\n    week.lectures.splice(index, 1);\r\n    onWeekChange({ ...week, lectures: week.lectures });\r\n    setLectures(week.lectures);\r\n  }\r\n\r\n  return (\r\n    <Accordion\r\n      style={{\r\n        width: \"100%\",\r\n        // backgroundColor: \"#5f5f5f\",\r\n        border: \"2px solid #ffca28\",\r\n        borderRadius: 0,\r\n        marginTop: -2,\r\n      }}\r\n    >\r\n      <AccordionSummary expandIcon={<ExpandMore />}>\r\n        {/* <IconButton>\r\n          <ImportExport />\r\n        </IconButton> */}\r\n        {!editMode && (\r\n          <Grid container alignItems=\"center\" direction=\"row\" wrap=\"nowrap\">\r\n            {editable && (\r\n              <>\r\n                <Grid item>\r\n                  <IconButton\r\n                    onClick={(event) => {\r\n                      event.stopPropagation();\r\n                      setEditMode(true);\r\n                    }}\r\n                  >\r\n                    <Edit />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    onClick={(event) => {\r\n                      onWeekRemove();\r\n                      event.stopPropagation();\r\n                    }}\r\n                  >\r\n                    <DeleteForever />\r\n                  </IconButton>\r\n                </Grid>\r\n              </>\r\n            )}\r\n            <Grid item>\r\n              <Typography style={{ whiteSpace: \"nowrap\", marginRight: 10 }}>\r\n                Week {weekNo} :\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography> {fieldValue}</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        {editMode && (\r\n          <Grid container direction=\"row\" alignItems=\"center\" wrap=\"nowrap\">\r\n            <Grid item container wrap=\"nowrap\">\r\n              <TextField\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                defaultValue={fieldValue}\r\n                onBlur={(event) => setFieldValue(event.target.value)}\r\n                onClick={(event) => event.stopPropagation()}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton\r\n                onClick={(event) => {\r\n                  event.stopPropagation();\r\n                  if (!fieldValue) {\r\n                    enqueueSnackbar(\"Week name can not be empty\", {\r\n                      variant: \"warning\",\r\n                    });\r\n                    return;\r\n                  }\r\n                  onWeekChange({ ...week, title: fieldValue });\r\n                  setEditMode(false);\r\n                }}\r\n              >\r\n                <CheckCircle />\r\n              </IconButton>\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton\r\n                onClick={(event) => {\r\n                  setEditMode(false);\r\n                  setFieldValue(week.title);\r\n                  event.stopPropagation();\r\n                }}\r\n              >\r\n                <Cancel />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </AccordionSummary>\r\n      <AccordionDetails>\r\n        <Grid container direction=\"column\" spacing={1}>\r\n          {/* <ReactSortable\r\n            list={lectures}\r\n            setList={setLectures}\r\n          > */}\r\n\r\n          {/* <ReactSortable\r\n            list={lectures}\r\n            setList={setLectures}\r\n            style={{ width: \"100%\" }}\r\n          > */}\r\n          {lectures.map((item, index) => (\r\n            <Grid item container key={index}>\r\n              <LectureView\r\n                editable={editable}\r\n                lecture={item}\r\n                lectureNo={index + 1}\r\n                onLectureChange={(lecture) =>\r\n                  handleOnLectureChange(index, lecture)\r\n                }\r\n                onLectureRemove={() => handleOnLectureRemove(index)}\r\n              />\r\n            </Grid>\r\n          ))}\r\n          {/* </ReactSortable> */}\r\n          {editable && (\r\n            <Grid\r\n              item\r\n              container\r\n              justifyContent=\"center\"\r\n              style={{ marginTop: 10 }}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<AddCircle />}\r\n                onClick={handleOnLectureAdd}\r\n              >\r\n                ADD LECTURE\r\n              </Button>\r\n            </Grid>\r\n          )}\r\n          {/* </ReactSortable> */}\r\n        </Grid>\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\header\\NavBar.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\classes\\Person.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\CourseBox.tsx",["734","735","736","737","738"],"import {\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardMedia,\r\n  Grid,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { Rating } from \"@material-ui/lab\";\r\nimport offerBG from \"assets/img/offer_bg.png\";\r\nimport classNames from \"classnames\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useStyles } from \"Theme\";\r\n\r\nconst localStyles = makeStyles((theme) => ({\r\n  titleBox: {\r\n    height: \"115px\",\r\n  },\r\n  title: {\r\n    marginBottom: \"5px\",\r\n    maxHeight: \"80px\",\r\n    textOverflow: \"ellipsis\",\r\n    overflow: \"hidden\",\r\n  },\r\n  offPrice: {\r\n    textDecoration: \"line-through\",\r\n  },\r\n  offerBG: {\r\n    backgroundImage: `url(${offerBG})`,\r\n    backgroundSize: \"cover\",\r\n    color: \"white\",\r\n    fontWeight: \"bold\",\r\n    width: 60,\r\n    height: 52,\r\n    top: -8,\r\n    left: 0,\r\n    position: \"absolute\",\r\n    textAlign: \"center\",\r\n    paddingTop: 9,\r\n    fontSize: \"0.8rem\",\r\n  },\r\n}));\r\n\r\nfunction CourseBox({ courseData }) {\r\n  const global = useStyles();\r\n  const local = localStyles();\r\n  const history = useHistory();\r\n  return (\r\n    <CardActionArea\r\n      style={{\r\n        width: \"185px\",\r\n      }}\r\n      onClick={(event) => history.push(`/course/${courseData.id}`)}\r\n    >\r\n      <Card\r\n        style={{\r\n          position: \"relative\",\r\n          overflow: \"visible\",\r\n          backgroundColor: \"#37474f\",\r\n        }}\r\n      >\r\n        <CardMedia\r\n          style={{ height: 135, backgroundSize: \"cover\" }}\r\n          image={courseData.coverContent}\r\n        />\r\n        {courseData?.off != undefined &&\r\n          courseData?.off != 0 &&\r\n          courseData?.price != 0 && (\r\n            <div className={local.offerBG}>{courseData.off}%</div>\r\n          )}\r\n        <CardContent style={{ padding: \"0px 10px 10px 10px\" }}>\r\n          <Grid\r\n            container\r\n            className={local.titleBox}\r\n            wrap=\"nowrap\"\r\n            direction=\"column\"\r\n            justifyContent=\"flex-start\"\r\n          >\r\n            <Typography\r\n              className={classNames(local.title, global.medium, global.bold)}\r\n              align=\"left\"\r\n            >\r\n              {courseData.title}\r\n            </Typography>\r\n            <Typography variant=\"subtitle2\" align=\"left\">\r\n              {courseData.teacherName}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"flex-end\"\r\n            alignItems=\"center\"\r\n            spacing={1}\r\n          >\r\n            <Rating size=\"small\" value={courseData.rating} readOnly />\r\n            <Grid item className={global.medium}>\r\n              {Math.round(courseData.rating * 100) / 100}\r\n            </Grid>\r\n            <Grid item className={global.tiny}>\r\n              ({courseData.ratingCount})\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"flex-end\"\r\n            alignItems=\"center\"\r\n            spacing={1}\r\n          >\r\n            {courseData.price == 0 ? (\r\n              <Grid item className={classNames(global.big, global.bold)}>\r\n                FREE\r\n              </Grid>\r\n            ) : (\r\n              <>\r\n                {courseData?.off != 0 && (\r\n                  <Grid\r\n                    item\r\n                    className={classNames(global.medium, local.offPrice)}\r\n                  >\r\n                    {courseData.price}\r\n                  </Grid>\r\n                )}\r\n                <Grid item className={classNames(global.big, global.bold)}>\r\n                  {Math.round(courseData.price * (100 - courseData.off)) / 100}\r\n                </Grid>\r\n              </>\r\n            )}\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n    </CardActionArea>\r\n  );\r\n}\r\n\r\nexport default CourseBox;\r\n\r\n// import React from 'react';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n// import clsx from 'clsx';\r\n// import Card from '@material-ui/core/Card';\r\n// import CardHeader from '@material-ui/core/CardHeader';\r\n// import CardMedia from '@material-ui/core/CardMedia';\r\n// import CardContent from '@material-ui/core/CardContent';\r\n// import CardActions from '@material-ui/core/CardActions';\r\n// import Collapse from '@material-ui/core/Collapse';\r\n// import Avatar from '@material-ui/core/Avatar';\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import Typography from '@material-ui/core/Typography';\r\n// import { red } from '@material-ui/core/colors';\r\n// import FavoriteIcon from '@material-ui/icons/Favorite';\r\n// import ShareIcon from '@material-ui/icons/Share';\r\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n// import MoreVertIcon from '@material-ui/icons/MoreVert';\r\n// import img1 from '../../resources/image/DefaultCourseImage.jpg';\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   root: {\r\n//     maxWidth: 345,\r\n//   },\r\n//   media: {\r\n//     height: 0,\r\n//     paddingTop: '56.25%', // 16:9\r\n//   },\r\n//   expand: {\r\n//     transform: 'rotate(0deg)',\r\n//     marginLeft: 'auto',\r\n//     transition: theme.transitions.create('transform', {\r\n//       duration: theme.transitions.duration.shortest,\r\n//     }),\r\n//   },\r\n//   expandOpen: {\r\n//     transform: 'rotate(180deg)',\r\n//   },\r\n//   avatar: {\r\n//     backgroundColor: red[500],\r\n//   },\r\n// }));\r\n\r\n// export default function CourseBox() {\r\n//   const classes = useStyles();\r\n//   const [expanded, setExpanded] = React.useState(false);\r\n\r\n//   const handleExpandClick = () => {\r\n//     setExpanded(!expanded);\r\n//   };\r\n\r\n//   return (\r\n//     <Card className={classes.root}>\r\n//       <CardHeader\r\n//         avatar={\r\n//           <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n//             R\r\n//           </Avatar>\r\n//         }\r\n//         action={\r\n//           <IconButton aria-label=\"settings\">\r\n//             <MoreVertIcon />\r\n//           </IconButton>\r\n//         }\r\n//         title=\"Shrimp and Chorizo Paella\"\r\n//         subheader=\"September 14, 2016\"\r\n//       />\r\n//       <CardMedia\r\n//         className={classes.media}\r\n//         // image=\"https://img-a.udemycdn.com/course/240x135/354176_fe73_5.jpg?5oD1okbOTmx4KDKe6F5fXBTC6wejveIIVoHJG9Ui4HOqnVb3a7UnSjdB2qx6qM7W5HnMzpmzsPufkR9PDkeH2F8qCorS1Ahy5_sxQqc3EkXLVinKd_YdG1Or-3M53h4\"\r\n//         image={img1}\r\n//         title=\"Paella dish\"\r\n//       />\r\n//       <CardContent>\r\n//         <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n//           This impressive paella is a perfect party dish and a fun meal to cook together with your\r\n//           guests. Add 1 cup of frozen peas along with the mussels, if you like.\r\n//         </Typography>\r\n//       </CardContent>\r\n//       <CardActions disableSpacing>\r\n//         <IconButton aria-label=\"add to favorites\">\r\n//           <FavoriteIcon />\r\n//         </IconButton>\r\n//         <IconButton aria-label=\"share\">\r\n//           <ShareIcon />\r\n//         </IconButton>\r\n//         <IconButton\r\n//           className={clsx(classes.expand, {\r\n//             [classes.expandOpen]: expanded,\r\n//           })}\r\n//           onClick={handleExpandClick}\r\n//           aria-expanded={expanded}\r\n//           aria-label=\"show more\"\r\n//         >\r\n//           <ExpandMoreIcon />\r\n//         </IconButton>\r\n//       </CardActions>\r\n//       <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n//         <CardContent>\r\n//           <Typography paragraph>Method:</Typography>\r\n//           <Typography paragraph>\r\n//             Heat 1/2 cup of the broth in a pot until simmering, add saffron and set aside for 10\r\n//             minutes.\r\n//           </Typography>\r\n//           <Typography paragraph>\r\n//             Heat oil in a (14- to 16-inch) paella pan or a large, deep skillet over medium-high\r\n//             heat. Add chicken, shrimp and chorizo, and cook, stirring occasionally until lightly\r\n//             browned, 6 to 8 minutes. Transfer shrimp to a large plate and set aside, leaving chicken\r\n//             and chorizo in the pan. Add pimentón, bay leaves, garlic, tomatoes, onion, salt and\r\n//             pepper, and cook, stirring often until thickened and fragrant, about 10 minutes. Add\r\n//             saffron broth and remaining 4 1/2 cups chicken broth; bring to a boil.\r\n//           </Typography>\r\n//           <Typography paragraph>\r\n//             Add rice and stir very gently to distribute. Top with artichokes and peppers, and cook\r\n//             without stirring, until most of the liquid is absorbed, 15 to 18 minutes. Reduce heat to\r\n//             medium-low, add reserved shrimp and mussels, tucking them down into the rice, and cook\r\n//             again without stirring, until mussels have opened and rice is just tender, 5 to 7\r\n//             minutes more. (Discard any mussels that don’t open.)\r\n//           </Typography>\r\n//           <Typography>\r\n//             Set aside off of the heat to let rest for 10 minutes, and then serve.\r\n//           </Typography>\r\n//         </CardContent>\r\n//       </Collapse>\r\n//     </Card>\r\n//   );\r\n// }\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\LectureView.tsx",["739","740","741","742","743","744","745","746","747"],"import {\r\n  Accordion,\r\n  AccordionDetails,\r\n  AccordionSummary,\r\n  Button,\r\n  Checkbox,\r\n  Grid,\r\n  IconButton,\r\n  TextField,\r\n  Tooltip,\r\n  Typography,\r\n  Zoom,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Cancel,\r\n  CheckCircle,\r\n  DeleteForever,\r\n  Edit,\r\n  ExpandMore,\r\n  PictureAsPdf,\r\n  TextFields,\r\n  VideoCall,\r\n} from \"@material-ui/icons\";\r\nimport LinkIcon from \"@material-ui/icons/Link\";\r\nimport { Lecture } from \"classes/Course\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ArticleInput } from \"./ArticleInput\";\r\nimport { ArticleOutput } from \"./ArticleOutput\";\r\nimport { LinkInput } from \"./LinkInput\";\r\nimport { LinkOutput } from \"./LinkOutput\";\r\nimport { PDFInput } from \"./PDFInput\";\r\nimport { PDFOutput } from \"./PDFOutput\";\r\nimport { VideoInput } from \"./VideoInput\";\r\nimport { VideoOutput } from \"./VideoOutput\";\r\n\r\nexport function LectureView({\r\n  editable,\r\n  lecture,\r\n  lectureNo,\r\n  onLectureChange,\r\n  onLectureRemove,\r\n}: {\r\n  editable: boolean;\r\n  lecture: Lecture;\r\n  lectureNo: number;\r\n  onLectureChange: (Lecture) => void;\r\n  onLectureRemove: () => void;\r\n}) {\r\n  const [expanded, setExpanded] = useState(false);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [fieldValue, setFieldValue] = useState(lecture.title);\r\n  const [body, setBody] = useState(editable ? \"LECTURE_TYPE\" : \"\");\r\n  const [preview, setPreview] = useState(lecture ? lecture.preview : false);\r\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n  useEffect(() => {\r\n    setBody(\r\n      lecture?.file?.type\r\n        ? lecture?.file?.type + \"_OUTPUT\"\r\n        : editable\r\n        ? \"LECTURE_TYPE\"\r\n        : \"\"\r\n    );\r\n    setPreview(lecture.preview);\r\n  }, [lecture.title, lecture.preview]);\r\n\r\n  // function handleBodyChange(body) {\r\n  //   setState({ ...state, body: body });\r\n  // }\r\n  // function handleContentClick(panel) {\r\n  //   setState({\r\n  //     ...state,\r\n  //     expanded: state.contentClicked ? '' : panel\r\n  //   })\r\n  // }\r\n  function handleOnSave(file) {\r\n    console.log(file);\r\n    let error = false;\r\n    if (file.title == \"\" || file.title == undefined) {\r\n      error = true;\r\n      switch (file.type) {\r\n        case \"ARTICLE\":\r\n          enqueueSnackbar(\"Title is missing\", { variant: \"error\" });\r\n          break;\r\n        case \"VIDEO\":\r\n          enqueueSnackbar(\"Lecture body is missing\", { variant: \"error\" });\r\n          break;\r\n        case \"PDF\":\r\n          enqueueSnackbar(\"Lecture body is missing\", { variant: \"error\" });\r\n          break;\r\n        case \"LINK\":\r\n          enqueueSnackbar(\"Link is missing\", { variant: \"error\" });\r\n          break;\r\n      }\r\n    }\r\n    if (file.content == undefined) {\r\n      error = true;\r\n      switch (file.type) {\r\n        case \"ARTICLE\":\r\n          enqueueSnackbar(\"Content is missing\", { variant: \"error\" });\r\n          break;\r\n        case \"VIDEO\":\r\n          enqueueSnackbar(\"VIDEO file is missing\", { variant: \"error\" });\r\n          break;\r\n        case \"PDF\":\r\n          enqueueSnackbar(\"PDF file is missing\", { variant: \"error\" });\r\n          break;\r\n        case \"LINK\":\r\n          enqueueSnackbar(\"Link details is missing\", { variant: \"error\" });\r\n          break;\r\n      }\r\n    }\r\n    if (error) {\r\n      return;\r\n    }\r\n    onLectureChange({ ...lecture, file: file });\r\n    setBody(file.type + \"_OUTPUT\");\r\n  }\r\n  function handleOnCancel() {\r\n    setBody(\r\n      lecture.file == undefined ? \"LECTURE_TYPE\" : lecture.file.type + \"_OUTPUT\"\r\n    );\r\n  }\r\n  function handleOnUpdate() {\r\n    setBody(lecture.file.type + \"_INPUT\");\r\n  }\r\n  function handlePreviewChange(event) {\r\n    setPreview(!preview);\r\n    onLectureChange({ ...lecture, preview: !preview });\r\n  }\r\n\r\n  function LectureType() {\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"space-around\"\r\n        alignItems=\"center\"\r\n      >\r\n        <IconButton onClick={(event) => setBody(\"ARTICLE_INPUT\")}>\r\n          <Grid item container direction=\"column\" alignItems=\"center\">\r\n            <TextFields />\r\n            <Typography>Article</Typography>\r\n          </Grid>\r\n        </IconButton>\r\n        <IconButton onClick={(event) => setBody(\"VIDEO_INPUT\")}>\r\n          <Grid item container direction=\"column\" alignItems=\"center\">\r\n            <VideoCall />\r\n            <Typography>Video</Typography>\r\n          </Grid>\r\n        </IconButton>\r\n        <IconButton onClick={(event) => setBody(\"PDF_INPUT\")}>\r\n          <Grid item container direction=\"column\" alignItems=\"center\">\r\n            <PictureAsPdf />\r\n            <Typography>PDF</Typography>\r\n          </Grid>\r\n        </IconButton>\r\n        <IconButton onClick={(event) => setBody(\"LINK_INPUT\")}>\r\n          <Grid item container direction=\"column\" alignItems=\"center\">\r\n            <LinkIcon />\r\n            <Typography>Link</Typography>\r\n          </Grid>\r\n        </IconButton>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  function LectureRow() {\r\n    return (\r\n      <>\r\n        {!editMode && (\r\n          <Grid container direction=\"row\" alignItems=\"center\" wrap=\"nowrap\">\r\n            {editable && (\r\n              <>\r\n                <Grid item>\r\n                  <Tooltip\r\n                    title={\r\n                      preview\r\n                        ? \"This lecture is set as preview\"\r\n                        : \"Do you want to set this lecture as preview?\"\r\n                    }\r\n                    TransitionComponent={Zoom}\r\n                    arrow\r\n                  >\r\n                    <span onClick={(event) => event.stopPropagation()}>\r\n                      <Checkbox\r\n                        checked={preview}\r\n                        onChange={handlePreviewChange}\r\n                      />\r\n                    </span>\r\n                  </Tooltip>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    onClick={(event) => {\r\n                      setEditMode(true);\r\n                      event.stopPropagation();\r\n                    }}\r\n                  >\r\n                    <Edit />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    onClick={(event) => {\r\n                      onLectureRemove();\r\n                      event.stopPropagation();\r\n                    }}\r\n                  >\r\n                    <DeleteForever />\r\n                  </IconButton>\r\n                </Grid>\r\n              </>\r\n            )}\r\n            <Grid item>\r\n              <Typography style={{ whiteSpace: \"nowrap\", marginRight: 10 }}>\r\n                Lecture {lectureNo} :\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item container>\r\n              <Typography> {lecture.title}</Typography>\r\n            </Grid>\r\n            {!expanded && editable && lecture.file == undefined && (\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{\r\n                    marginLeft: 10,\r\n                    color: \"black\",\r\n                    backgroundColor: \"rgb(255, 202, 40)\",\r\n                  }}\r\n                >\r\n                  <Typography style={{ whiteSpace: \"nowrap\" }}>\r\n                    Content +\r\n                  </Typography>\r\n                </Button>\r\n              </Grid>\r\n            )}\r\n            {expanded && editable && lecture.file == undefined && (\r\n              <Grid item>\r\n                <IconButton\r\n                  onClick={(event) => {\r\n                    setBody(\"LECTURE_TYPE\");\r\n                  }}\r\n                >\r\n                  <Cancel />\r\n                </IconButton>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        )}\r\n        {editMode && (\r\n          <Grid container direction=\"row\" alignItems=\"center\" wrap=\"nowrap\">\r\n            <Grid item container>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                defaultValue={lecture.title}\r\n                onBlur={(event) => setFieldValue(event.target.value)}\r\n                onClick={(event) => event.stopPropagation()}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton\r\n                onClick={(event) => {\r\n                  event.stopPropagation();\r\n                  if (!fieldValue) {\r\n                    enqueueSnackbar(\"Lecture name can not be empty\", {\r\n                      variant: \"warning\",\r\n                    });\r\n                    return;\r\n                  }\r\n                  onLectureChange({ ...lecture, title: fieldValue });\r\n                  setEditMode(false);\r\n                }}\r\n              >\r\n                <CheckCircle />\r\n              </IconButton>\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton\r\n                onClick={(event) => {\r\n                  setEditMode(false);\r\n                  setFieldValue(lecture.title);\r\n                  event.stopPropagation();\r\n                }}\r\n              >\r\n                <Cancel />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Accordion\r\n      key={lecture.id}\r\n      expanded={expanded}\r\n      style={{ backgroundColor: \"#3ABBB5\", borderRadius: 0, width: \"100%\" }}\r\n    >\r\n      <AccordionSummary\r\n        expandIcon={lecture.file != undefined && <ExpandMore />}\r\n        onClick={() => {\r\n          if (editable || lecture?.file?.content) setExpanded(!expanded);\r\n        }}\r\n      >\r\n        <LectureRow />\r\n      </AccordionSummary>\r\n      <AccordionDetails>\r\n        {body === \"LECTURE_TYPE\" && <LectureType />}\r\n\r\n        {body === \"ARTICLE_INPUT\" && (\r\n          <ArticleInput\r\n            file={lecture.file}\r\n            onSave={handleOnSave}\r\n            onCancel={handleOnCancel}\r\n          />\r\n        )}\r\n        {body === \"ARTICLE_OUTPUT\" && (\r\n          <ArticleOutput\r\n            editable={editable}\r\n            file={lecture.file}\r\n            onUpdate={handleOnUpdate}\r\n          />\r\n        )}\r\n        {body === \"LINK_INPUT\" && (\r\n          <LinkInput\r\n            file={lecture.file}\r\n            onSave={handleOnSave}\r\n            onCancel={handleOnCancel}\r\n          />\r\n        )}\r\n        {body === \"LINK_OUTPUT\" && (\r\n          <LinkOutput\r\n            editable={editable}\r\n            file={lecture.file}\r\n            onUpdate={handleOnUpdate}\r\n          />\r\n        )}\r\n        {body === \"VIDEO_INPUT\" && (\r\n          <VideoInput\r\n            file={lecture.file}\r\n            onSave={handleOnSave}\r\n            onCancel={handleOnCancel}\r\n          />\r\n        )}\r\n        {body === \"VIDEO_OUTPUT\" && (\r\n          <VideoOutput\r\n            editable={editable}\r\n            file={lecture.file}\r\n            onUpdate={handleOnUpdate}\r\n          />\r\n        )}\r\n        {body === \"PDF_INPUT\" && (\r\n          <PDFInput\r\n            file={lecture.file}\r\n            onSave={handleOnSave}\r\n            onCancel={handleOnCancel}\r\n          />\r\n        )}\r\n        {body === \"PDF_OUTPUT\" && (\r\n          <PDFOutput\r\n            editable={editable}\r\n            file={lecture.file}\r\n            onUpdate={handleOnUpdate}\r\n          />\r\n        )}\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\header\\MenuBar.tsx",["748"],"import {\r\n  Collapse,\r\n  Grid,\r\n  Link,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\nimport { Category } from \"classes/Category\";\r\nimport React from \"react\";\r\n\r\n// let CSSTransitionGroup = React.addons.CSSTransitionGroup;\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  menuContainer: {\r\n    backgroundColor: \"#F3AA08\",\r\n    padding: 8,\r\n    color: \"black\",\r\n  },\r\n  menuItemWrapper: {\r\n    height: \"auto\",\r\n  },\r\n  menu: {\r\n    cursor: \"pointer\",\r\n    // [theme.breakpoints.down(\"sm\")]: {\r\n    //   justifyContent: \"space-between\",\r\n    //   borderBottom: \"1px solid black\",\r\n    // },\r\n  },\r\n  subMenuContainer: {\r\n    position: \"absolute\",\r\n    overflow: \"hidden\",\r\n    backgroundColor: \"#445F67\",\r\n    zIndex: 100,\r\n    top: 126,\r\n    // [theme.breakpoints.down(\"sm\")]: {\r\n    //   position: \"relative\",\r\n    //   marginLeft: \"20px\",\r\n    // },\r\n  },\r\n  subMenuItem: {\r\n    padding: theme.spacing(1, 3),\r\n    color: \"white\",\r\n  },\r\n  drawer: {\r\n    // [theme.breakpoints.down(\"sm\")]: {\r\n    //   width: \"50%\",\r\n    // },\r\n  },\r\n  signInBtn: {\r\n    justify: \"start\",\r\n    label: {\r\n      justify: \"start\",\r\n    },\r\n  },\r\n}));\r\n\r\n// export const menuItems = {\r\n//   defaultExpanded: [],\r\n//   data: [\r\n//     {\r\n//       title: \"Menu 1\",\r\n//       items: [],\r\n//       checked: false,\r\n//     },\r\n//     {\r\n//       title: \"Menu 2\",\r\n//       items: [\r\n//         {\r\n//           title: \"Sub menu 1\",\r\n//           items: [],\r\n//           checked: false,\r\n//         },\r\n//         {\r\n//           title: \"Sub menu 2\",\r\n//           items: [],\r\n//           checked: false,\r\n//         },\r\n//         {\r\n//           title: \"Sub menu 3\",\r\n//           items: [],\r\n//           checked: false,\r\n//         },\r\n//       ],\r\n//       checked: false,\r\n//     },\r\n//     {\r\n//       title: \"Menu 3\",\r\n//       items: [],\r\n//       checked: false,\r\n//     },\r\n//     {\r\n//       title: \"Menu 4\",\r\n//       items: [],\r\n//       checked: false,\r\n//     },\r\n//     {\r\n//       title: \"Menu 5\",\r\n//       items: [\r\n//         {\r\n//           title: \"Sub menu 4\",\r\n//           items: [],\r\n//           checked: false,\r\n//         },\r\n//         {\r\n//           title: \"Sub menu 5\",\r\n//           items: [],\r\n//           checked: false,\r\n//         },\r\n//         {\r\n//           title: \"Sub menu 6\",\r\n//           items: [],\r\n//           checked: false,\r\n//         },\r\n//         {\r\n//           title: \"Sub menu 6\",\r\n//           items: [],\r\n//           checked: false,\r\n//         },\r\n//       ],\r\n//       checked: false,\r\n//     },\r\n//     {\r\n//       title: \"Menu 6\",\r\n//       items: [],\r\n//       checked: false,\r\n//     },\r\n//     {\r\n//       title: \"Menu 7\",\r\n//       items: [],\r\n//       checked: false,\r\n//     },\r\n//     {\r\n//       title: \"Menu 8\",\r\n//       items: [\r\n//         {\r\n//           title: \"Sub menu 4\",\r\n//           items: [],\r\n//           checked: false,\r\n//         },\r\n//         {\r\n//           title: \"Sub menu 5\",\r\n//           items: [],\r\n//           checked: false,\r\n//         },\r\n//         {\r\n//           title: \"Sub menu 6\",\r\n//           items: [],\r\n//           checked: false,\r\n//         },\r\n//       ],\r\n//       checked: false,\r\n//     },\r\n//   ],\r\n// };\r\n\r\nexport function SubMenu({\r\n  subCategories,\r\n  open,\r\n}: {\r\n  subCategories: Category[];\r\n  open: boolean;\r\n}) {\r\n  const classes = useStyles();\r\n  if (!subCategories.length) return <></>;\r\n  else\r\n    return (\r\n      <div className={classes.subMenuContainer}>\r\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n          <List component=\"div\" disablePadding>\r\n            {subCategories.map((item) => (\r\n              <Link href={`/category/${item.id}`} className=\"sub-nav-name\">\r\n                <ListItem className={classes.subMenuItem} button key={item.id}>\r\n                  <ListItemText primary={item.name} />\r\n                </ListItem>\r\n              </Link>\r\n            ))}\r\n          </List>\r\n        </Collapse>\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction Menu({ mainCategory }: { mainCategory: Category }) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleMouseEnterLeave = (doOpen) => {\r\n    if (mainCategory.children.length) {\r\n      setOpen(doOpen);\r\n    }\r\n  };\r\n  return (\r\n    <Grid\r\n      item\r\n      className={classes.menuItemWrapper}\r\n      onMouseEnter={() => setOpen(true)}\r\n      onMouseLeave={() => setOpen(false)}\r\n      // style={{color: 'white'}}\r\n    >\r\n      <Link href={`/category/${mainCategory.id}`} className=\"main-nav-name\">\r\n        {mainCategory.name}\r\n        {mainCategory.children.length > 0 && !open ? (\r\n          <ExpandMore />\r\n        ) : (\r\n          <ExpandLess />\r\n        )}\r\n      </Link>\r\n      <SubMenu subCategories={mainCategory.children} open={open} />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport function MenuBar({ mainCategories }: { mainCategories: Category[] }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container justifyContent=\"space-around\" direction=\"row\">\r\n      {mainCategories.map((mainCategory) => (\r\n        <Grid item className={classes.menu} key={mainCategory.id}>\r\n          <Menu mainCategory={mainCategory} />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\layout\\Pagination.tsx",["749","750","751","752","753","754","755","756"],"import { Divider, Grid, GridSpacing, Typography } from \"@material-ui/core\";\r\nimport { Pagination } from \"@material-ui/lab\";\r\nimport React, { useState } from \"react\";\r\nimport ShadowText from \"tools/customDesign/ShadowText\";\r\n\r\nfunction CustomPagination({\r\n  type = \"one-item-per-line\",\r\n  title,\r\n  children,\r\n  objectsPerPage = 12,\r\n  divider = false,\r\n  spacing = 2,\r\n  noContentText = \"No content\"\r\n}: {\r\n  type?: \"one-item-per-line\" | \"two-item-per-line\" | \"calculate-by-width\";\r\n  children: JSX.Element[];\r\n  title?: string;\r\n  objectsPerPage?: number;\r\n  divider?: boolean;\r\n    spacing?: GridSpacing | undefined;\r\n    noContentText?: string;\r\n}) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const indexOfLastObject = currentPage * objectsPerPage;\r\n  const indexOfFirstObject = indexOfLastObject - objectsPerPage;\r\n  const currentPageObjects = children\r\n    ? children.slice(indexOfFirstObject, indexOfLastObject)\r\n    : [];\r\n  const paginate = (event, pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  let elementsWithContainer;\r\n  if (type === \"one-item-per-line\") {\r\n    elementsWithContainer = (\r\n      <Grid container direction=\"column\" spacing={spacing}>\r\n        {currentPageObjects.map((item, index) => (\r\n          <Grid item container key={index}>\r\n            {index != 0 && divider ? (\r\n              <Grid item xs={12} key={index}>\r\n                <Divider style={{ marginBottom: 4 }} />\r\n              </Grid>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <Grid item xs={12}>\r\n              {item}\r\n            </Grid>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    );\r\n  } else if (type == \"two-item-per-line\") {\r\n    elementsWithContainer = (\r\n      <Grid container spacing={2}>\r\n        {currentPageObjects.map((item, index) => (\r\n          <Grid item xs={6} key={index}>\r\n            {item}\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    );\r\n  } else if (type == \"calculate-by-width\") {\r\n    elementsWithContainer = (\r\n      <Grid container direction=\"row\" spacing={2} justifyContent=\"flex-start\">\r\n        {currentPageObjects.map((item, index) => (\r\n          <Grid item xs={6} sm={6} md={3} lg={2} key={index}>\r\n            {item}\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      {title != undefined && (\r\n        <Typography\r\n          variant=\"h3\"\r\n          style={{ textAlign: \"center\", marginBottom: 10 }}\r\n        >\r\n          {title}\r\n        </Typography>\r\n      )}\r\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n        {(children == undefined || children.length == 0) && \r\n          <ShadowText>{noContentText}</ShadowText>\r\n        }\r\n        {elementsWithContainer}\r\n        {children?.length > objectsPerPage && (\r\n          <Grid item container justifyContent=\"center\">\r\n            <Pagination\r\n              count={children ? Math.ceil(children.length / objectsPerPage) : 0}\r\n              page={currentPage}\r\n              onChange={paginate}\r\n              color=\"secondary\"\r\n              siblingCount={3}\r\n              size=\"large\"\r\n              style={{ marginTop: 15 }}\r\n            />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CustomPagination;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\Review.tsx",["757"],"import {\r\n  Avatar,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Divider,\r\n  Grid,\r\n  IconButton,\r\n  Link,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { Rating } from \"@material-ui/lab\";\r\nimport { ReviewInfo } from \"classes/Course\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useDialogClasses } from \"Theme\";\r\nimport ShadowText from \"tools/customDesign/ShadowText\";\r\nimport { SlidingUpTransition } from \"tools/Tools\";\r\nimport CourseService from \"../api/CourseService\";\r\n\r\nexport function ReviewSection({\r\n  reviews,\r\n  courseId,\r\n  teacherUsername,\r\n  onReviewSubmit,\r\n}: {\r\n  reviews?: ReviewInfo[] | undefined;\r\n  courseId: number;\r\n  teacherUsername: string;\r\n  onReviewSubmit: () => void;\r\n}) {\r\n  const [reviewInputShow, setReviewInputShow] = useState(false);\r\n  const [reviewOutputShow, setReviewOutputShow] = useState(false);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [myReview, setMyReview] = useState<ReviewInfo>();\r\n  useEffect(() => {\r\n    if (AuthService.getCurrentAccountType() === \"Student\") {\r\n      CourseService.reviewSelf(courseId).then((response) => {\r\n        console.log(\"my review\", response.data);\r\n        setMyReview(response.data);\r\n      });\r\n    }\r\n  }, [reviews]);\r\n  return (\r\n    <Card style={{ width: \"100%\" }}>\r\n      <CardContent>\r\n        <Grid container direction=\"column\" spacing={2}>\r\n          <Grid item container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item>\r\n              <Typography variant=\"h4\" align=\"center\">\r\n                Review\r\n              </Typography>\r\n            </Grid>\r\n            {AuthService.getCurrentAccountType() !== \"Admin\" &&\r\n              AuthService.getCurrentUsername() !== teacherUsername && (\r\n                <Grid item>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                      if (AuthService.getCurrentAccountType() === \"Student\") {\r\n                        myReview\r\n                          ? setReviewOutputShow(true)\r\n                          : setReviewInputShow(true);\r\n                      } else {\r\n                        enqueueSnackbar(\r\n                          'Please log in as \"Student\" to review this course',\r\n                          { variant: \"error\" }\r\n                        );\r\n                      }\r\n                    }}\r\n                  >\r\n                    {myReview ? \"See your review\" : \"Write a review\"}\r\n                  </Button>\r\n                  {!myReview && (\r\n                    <ReviewInputDialog\r\n                      open={reviewInputShow}\r\n                      courseId={courseId}\r\n                      onClose={() => setReviewInputShow(false)}\r\n                      onReviewSubmit={onReviewSubmit}\r\n                    />\r\n                  )}\r\n                  {myReview && (\r\n                    <ReviewOutputDialog\r\n                      open={reviewOutputShow}\r\n                      review={myReview}\r\n                      onClose={() => setReviewOutputShow(false)}\r\n                    />\r\n                  )}\r\n                </Grid>\r\n              )}\r\n          </Grid>\r\n          {!reviews?.length && (\r\n            <Grid item container direction=\"column\">\r\n              {AuthService.getCurrentAccountType() === \"Student\" && (\r\n                <Typography variant=\"h5\" align=\"center\">\r\n                  Be first to review this course\r\n                </Typography>\r\n              )}\r\n              <ShadowText>No review yet</ShadowText>\r\n            </Grid>\r\n          )}\r\n          {reviews && (\r\n            <Grid item container direction=\"column\" spacing={2}>\r\n              {reviews?.map((review, index) => (\r\n                <Grid item container key={index}>\r\n                  <Divider\r\n                    style={{ width: \"100%\", marginTop: 8, marginBottom: 16 }}\r\n                  />\r\n                  <ReviewBox review={review} />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\nexport function ReviewBox({ review }: { review: ReviewInfo | undefined }) {\r\n  const history = useHistory();\r\n  return (\r\n    <Grid container direction=\"row\" wrap=\"nowrap\" spacing={2}>\r\n      <Grid item>\r\n        <IconButton\r\n          onClick={(event) =>\r\n            history.push(`/profile/${review?.studentUsername}`)\r\n          }\r\n        >\r\n          <Avatar src={review?.studentImage} />\r\n        </IconButton>\r\n      </Grid>\r\n      <Grid item container direction=\"column\">\r\n        <Grid>\r\n          <Link href={`/profile/${review?.studentUsername}`} variant=\"h5\">\r\n            {review?.studentName}\r\n          </Link>\r\n        </Grid>\r\n        <Grid item container direction=\"row\" spacing={2}>\r\n          <Grid item>\r\n            <Rating value={review?.ratingValue} readOnly name=\"rating-input\" />\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"subtitle1\">\r\n              {new Date(review?.reviewTime + \"\").toLocaleString()}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant=\"body1\">{review?.review}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction ReviewInputDialog({ open, onClose, courseId, onReviewSubmit }) {\r\n  const classes = useDialogClasses();\r\n  const [ratingValue, setRatingValue] = useState<number>(0);\r\n  const [ratingDone, setRatingDone] = useState<boolean>(false);\r\n  const [review, setReview] = useState(\"\");\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  useEffect(() => {\r\n    if (courseId) {\r\n      CourseService.ratingSelf(courseId).then((response) => {\r\n        if (response.data > 0) setRatingDone(true);\r\n        setRatingValue(response.data);\r\n      });\r\n    }\r\n  }, [courseId, open]);\r\n  async function handleReviewSubmit() {\r\n    let error = false;\r\n    if (!ratingValue) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please give a rating\", { variant: \"warning\" });\r\n    }\r\n    if (!review) {\r\n      error = true;\r\n      enqueueSnackbar(\"Please give a review and submit again\", {\r\n        variant: \"warning\",\r\n      });\r\n    }\r\n    if (error) return;\r\n    if (!ratingDone) {\r\n      await CourseService.submitRating(courseId, ratingValue).then((response) =>\r\n        console.log(response)\r\n      );\r\n      console.log(\"ratingSubmitted\");\r\n    }\r\n    await CourseService.submitReview(courseId, review).then((response) =>\r\n      console.log(response)\r\n    );\r\n    console.log(\"reviewSubmitted\");\r\n    onReviewSubmit();\r\n    onClose();\r\n  }\r\n  return (\r\n    <Dialog\r\n      classes={{ paper: classes.paper }}\r\n      open={open}\r\n      TransitionComponent={SlidingUpTransition}\r\n      keepMounted\r\n      onClose={onClose}\r\n    >\r\n      <DialogTitle>Write a review</DialogTitle>\r\n      <DialogContent classes={{ root: classes.content }}>\r\n        <Grid container direction=\"column\" spacing={3}>\r\n          <Grid\r\n            item\r\n            container\r\n            direction=\"row\"\r\n            wrap=\"nowrap\"\r\n            justifyContent=\"center\"\r\n            xs\r\n            spacing={2}\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"body1\">\r\n                {ratingDone ? \"Your rating : \" : \"Give a rating : \"}{\" \"}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Rating\r\n                value={ratingValue}\r\n                readOnly={ratingDone}\r\n                name=\"rating-in-review-box\"\r\n                onChange={(event, value) => setRatingValue(value as number)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item container>\r\n            <TextField\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              label=\"Write your review\"\r\n              onBlur={(event) => setReview(event.target.value)}\r\n              multiline\r\n              rows={6}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Grid container direction=\"row\" justifyContent=\"center\" spacing={2}>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={handleReviewSubmit}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nfunction ReviewOutputDialog({ open, review, onClose }) {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={SlidingUpTransition}\r\n      keepMounted\r\n      onClose={onClose}\r\n    >\r\n      <DialogContent>\r\n        <ReviewBox review={review} />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Grid container justifyContent=\"center\">\r\n          <Button color=\"secondary\" variant=\"contained\" onClick={onClose}>\r\n            Close\r\n          </Button>\r\n        </Grid>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\FAQ.tsx",["758","759","760"],"import {\r\n  Avatar,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Divider,\r\n  Grid,\r\n  IconButton,\r\n  Link,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { FaqInfo } from \"classes/Course\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport ShadowText from \"tools/customDesign/ShadowText\";\r\nimport TextEditor from \"tools/customDesign/TextEditor\";\r\nimport { SlidingUpTransition } from \"tools/Tools\";\r\nimport CourseService from \"../api/CourseService\";\r\n\r\nexport function FAQSection({\r\n  courseId,\r\n  teacherUsername,\r\n  faqs,\r\n  onSubmit,\r\n}: {\r\n  courseId: number;\r\n  teacherUsername: string;\r\n  faqs: FaqInfo[] | undefined;\r\n  onSubmit: () => void;\r\n}) {\r\n  const [questionInputShow, setQuestionInputShow] = useState(false);\r\n  // const [questionOutputShow, setQuestionOutputShow] = useState(false);\r\n  // const [myFaq, setMyFaq] = useState<FaqInfo>();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  // useEffect(() => {\r\n  //   CourseService.faqSelf(courseId).then((response) => {\r\n  //     console.log(\"my faq\", response.data);\r\n  //     setMyFaq(response.data);\r\n  //   });\r\n  // }, [faqs]);\r\n\r\n  return (\r\n    <Card style={{ width: \"100%\" }}>\r\n      <CardContent>\r\n        <Grid container direction=\"column\" spacing={2}>\r\n          <Grid item container direction=\"row\" justifyContent=\"space-between\">\r\n            <Grid item>\r\n              <Typography variant=\"h4\" align=\"center\">\r\n                FAQ\r\n              </Typography>\r\n            </Grid>\r\n            {AuthService.getCurrentAccountType() !== \"Admin\" &&\r\n              AuthService.getCurrentUsername() !== teacherUsername && (\r\n                <Grid item>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                      if (AuthService.getCurrentAccountType() === \"Student\") {\r\n                        setQuestionInputShow(true);\r\n                      } else {\r\n                        enqueueSnackbar(\r\n                          'Please log in as \"Student\" to ask a question',\r\n                          { variant: \"error\" }\r\n                        );\r\n                      }\r\n                    }}\r\n                  >\r\n                    {\"Ask a question\"}\r\n                  </Button>\r\n                  <FAQInputQuestionDialog\r\n                    courseId={courseId}\r\n                    open={questionInputShow}\r\n                    onClose={() => setQuestionInputShow(false)}\r\n                    onQuestionSubmit={onSubmit}\r\n                  />\r\n                </Grid>\r\n              )}\r\n          </Grid>\r\n          <Grid item container direction=\"column\">\r\n            {(faqs === undefined || faqs?.length === 0) && (\r\n              <ShadowText>No Question yet</ShadowText>\r\n            )}\r\n            {faqs?.map((faq, index) => (\r\n              <Grid item container key={index}>\r\n                <Divider\r\n                  style={{ width: \"100%\", marginTop: 8, marginBottom: 16 }}\r\n                />\r\n                <FAQBox faq={faq} onSubmit={onSubmit} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport function FAQBox({\r\n  faq,\r\n  onSubmit,\r\n}: {\r\n  faq: FaqInfo | undefined;\r\n  onSubmit?: () => void;\r\n}) {\r\n  const [answerInputShow, setAnswerInputShow] = useState(false);\r\n  const history = useHistory();\r\n  return (\r\n    <Grid container direction=\"row\" wrap=\"nowrap\" spacing={2}>\r\n      <Grid item>\r\n        <IconButton\r\n          onClick={() => history.push(`/profile/${faq?.studentUsername}`)}\r\n        >\r\n          <Avatar src={faq?.studentImage} />\r\n        </IconButton>\r\n      </Grid>\r\n      <Grid item container direction=\"column\">\r\n        <Grid>\r\n          <Link variant=\"h5\" href={`/profile/${faq?.studentUsername}`}>\r\n            {faq?.studentName}\r\n          </Link>\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant=\"subtitle1\">\r\n            {new Date(faq?.questionDate + \"\").toLocaleString()}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextEditor value={faq?.question} readOnly />\r\n        </Grid>\r\n        {console.log(faq?.teacherUsername)}\r\n        {console.log(AuthService.getCurrentUsername())}\r\n        {!faq?.answer &&\r\n        faq?.teacherUsername === AuthService.getCurrentUsername() ? (\r\n          <Grid container justifyContent=\"center\" style={{ marginLeft: -40 }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => setAnswerInputShow(true)}\r\n            >\r\n              Give an answer\r\n            </Button>\r\n            <FAQInputAnswerDialog\r\n              open={answerInputShow}\r\n              faq={faq}\r\n              onAnswerSubmit={onSubmit}\r\n              onClose={() => setAnswerInputShow(false)}\r\n            />\r\n          </Grid>\r\n        ) : (\r\n          !faq?.answer && (\r\n            <Typography\r\n              variant=\"body1\"\r\n              style={{\r\n                marginLeft: -40,\r\n                fontWeight: \"bold\",\r\n                textTransform: \"uppercase\",\r\n                textAlign: \"center\",\r\n                fontSize: \"1.2rem\",\r\n              }}\r\n            >\r\n              No answer yet\r\n            </Typography>\r\n          )\r\n        )}\r\n        {faq?.answer && (\r\n          <Grid item style={{ marginTop: 20 }}>\r\n            <Grid container direction=\"row\" wrap=\"nowrap\" spacing={2}>\r\n              <Grid item>\r\n                <IconButton\r\n                  onClick={() =>\r\n                    history.push(`/profile/${faq?.teacherUsername}`)\r\n                  }\r\n                >\r\n                  <Avatar src={faq?.teacherImage} />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item container direction=\"column\">\r\n                <Grid>\r\n                  <Link variant=\"h5\" href={`/profile/${faq?.teacherUsername}`}>\r\n                    {faq?.teacherName}\r\n                  </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"subtitle1\">\r\n                    {new Date(faq?.answerDate + \"\").toLocaleString()}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <TextEditor value={faq?.answer} readOnly />\r\n                  {/* <Typography variant=\"body1\">{faq?.answer}</Typography> */}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction FAQInputQuestionDialog({ open, courseId, onClose, onQuestionSubmit }) {\r\n  const [question, setQuestion] = useState(\"\");\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  function onSubmitQuestion() {\r\n    if (!question) {\r\n      enqueueSnackbar(\"Please write a question\", { variant: \"warning\" });\r\n      return;\r\n    }\r\n    CourseService.submitQuestion(courseId, question).then((response) => {\r\n      if (response.status == 200) {\r\n        enqueueSnackbar(\"Your question is submitted successfully\", {\r\n          variant: \"success\",\r\n        });\r\n        onQuestionSubmit();\r\n        onClose();\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={SlidingUpTransition}\r\n      keepMounted\r\n      onClose={onClose}\r\n    >\r\n      <DialogTitle>Ask a question</DialogTitle>\r\n      <DialogContent>\r\n        <TextEditor onChange={(value) => setQuestion(value)} />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Grid container direction=\"row\" justifyContent=\"center\" spacing={2}>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={onSubmitQuestion}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nfunction FAQInputAnswerDialog({ faq, open, onClose, onAnswerSubmit }) {\r\n  const [answer, setAnswer] = useState(\"\");\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  function onSubmitAnswer() {\r\n    if (!answer) {\r\n      enqueueSnackbar(\"Please write an answer\", { variant: \"warning\" });\r\n      return;\r\n    }\r\n    CourseService.submitAnswer(faq?.id, answer).then((response) => {\r\n      if (response.status == 200) {\r\n        enqueueSnackbar(\"Your answer is submitted successfully\", {\r\n          variant: \"success\",\r\n        });\r\n        onAnswerSubmit();\r\n        onClose();\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={SlidingUpTransition}\r\n      keepMounted\r\n      onClose={onClose}\r\n    >\r\n      <DialogTitle>Reply this question</DialogTitle>\r\n      <DialogContent>\r\n        <Grid container direction=\"column\" spacing={2}>\r\n          <Grid item>\r\n            <TextEditor value={faq?.question} readOnly />\r\n          </Grid>\r\n          <Divider />\r\n          <Grid item>\r\n            <TextEditor onChange={(value) => setAnswer(value)} />\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Grid container direction=\"row\" justifyContent=\"center\" spacing={2}>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={onSubmitAnswer}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\nfunction FAQOutputQuestionDialog({ open, faq, onClose }) {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={SlidingUpTransition}\r\n      keepMounted\r\n      onClose={onClose}\r\n    >\r\n      <DialogContent>\r\n        <FAQBox faq={faq} />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Grid container justifyContent=\"center\">\r\n          <Button color=\"secondary\" variant=\"contained\" onClick={onClose}>\r\n            Close\r\n          </Button>\r\n        </Grid>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\VideoOutput.tsx",["761","762"],"import { authHeaders } from \"components/auth/api/AuthService\";\r\nimport MUIRichTextEditor from \"mui-rte\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport VideoPlayer from \"tools/customDesign/VideoPlayer\";\r\nimport { LectureOutputProps, OutputLayout } from \"./OutputLayout\";\r\n\r\nexport function VideoOutput({ editable, file, onUpdate }: LectureOutputProps) {\r\n  const [videoUrl, setVideoUrl] = useState<string | null>(\"\");\r\n  useEffect(() => {\r\n    // axios.get(url, authHeaders()).then((response) => {\r\n    //   console.log(\"video is loaded\", response.data);\r\n    //   setFile(response.data);\r\n    // });\r\n    // return () => {\r\n    //   setFile(\"\");\r\n    // };\r\n    if (file?.content && file?.content?.file == undefined) videoFetch();\r\n    else if (file?.content?.file)\r\n      setVideoUrl(URL.createObjectURL(file?.content?.file));\r\n    return () => setVideoUrl(null);\r\n  }, [file.content]);\r\n  async function videoFetch() {\r\n    const result = await fetch(\r\n      file.content,\r\n      // @ts-ignore\r\n      authHeaders()\r\n    );\r\n    console.log(\"video fetched\");\r\n    const blob = await result.blob();\r\n    if (blob) {\r\n      setVideoUrl(URL.createObjectURL(blob));\r\n    }\r\n  }\r\n  return (\r\n    <OutputLayout editable={editable} onUpdate={onUpdate}>\r\n      <VideoPlayer url={videoUrl as string} />\r\n      <MUIRichTextEditor readOnly toolbar={false} defaultValue={file.title} />\r\n    </OutputLayout>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\VideoInput.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\PDFInput.tsx",["763","764"],"import MUIRichTextEditor from \"mui-rte\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { InputLayout, LectureInputProps } from \"./InputLayout\";\r\nimport { FileUploader } from \"tools/FileUploader\";\r\nimport { Files } from \"classes/Files\";\r\nimport { convertToRaw } from \"draft-js\";\r\nimport TextEditor from \"tools/customDesign/TextEditor\";\r\n\r\nexport function PDFInput({ file, onSave, onCancel }: LectureInputProps) {\r\n  const [title, setTitle] = useState(file?.title);\r\n  const [content, setContent] = useState(file?.content);\r\n\r\n  useEffect(() => {\r\n    setTitle(file?.title);\r\n    setContent(file?.content);\r\n  }, [file?.title, file?.content]);\r\n\r\n  return (\r\n    <InputLayout\r\n      onSave={() => onSave(new Files(\"PDF\", title).setContent(content))}\r\n      onCancel={onCancel}\r\n    >\r\n      <FileUploader\r\n        fileObjects={file?.content?.file ? [file.content] : []}\r\n        filesLimit={1}\r\n        type=\"pdf\"\r\n        onChange={(files) => setContent(files[0])}\r\n      />\r\n      <TextEditor value={file?.title} onChange={(value) => setTitle(value)} />\r\n    </InputLayout>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\PDFOutput.tsx",["765","766","767","768","769","770","771"],"import { Button, Grid, Link } from \"@material-ui/core\";\r\nimport { CloudDownloadRounded } from \"@material-ui/icons\";\r\nimport MUIRichTextEditor from \"mui-rte\";\r\nimport React, { useState } from \"react\";\r\nimport { LectureOutputProps, OutputLayout } from \"./OutputLayout\";\r\n\r\nexport function PDFOutput({ editable, file, onUpdate }: LectureOutputProps) {\r\n  const onFileLoad = (e, file) => console.log(e.target.result, file.name);\r\n  const [pictures, setPictures] = useState({});\r\n  const onChange = (pictures) => setPictures({ pictures });\r\n\r\n  const [numPages, setNumPages] = useState(null);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n\r\n  function onDocumentLoadSuccess({ numPages }) {\r\n    setNumPages(numPages);\r\n  }\r\n\r\n  return (\r\n    <OutputLayout editable={editable} onUpdate={onUpdate}>\r\n      {/* <PDFViewer url={URL.createObjectURL(file?.content?.file)} /> */}\r\n      <MUIRichTextEditor readOnly toolbar={false} defaultValue={file.title} />\r\n      <Grid container justifyContent=\"center\">\r\n      <Link\r\n        href={\r\n          file?.content?.file\r\n            ? URL.createObjectURL(file?.content?.file)\r\n            : file?.content\r\n        }\r\n      >\r\n        <Button variant=\"contained\" style={{ color: \"green\" }} startIcon={<CloudDownloadRounded />}>\r\n          Download PDF\r\n        </Button>\r\n      </Link>\r\n      </Grid>\r\n      \r\n    </OutputLayout>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\LinkInput.tsx",["772","773"],"import { TextField } from \"@material-ui/core\";\r\nimport { Files } from \"classes/Files\";\r\nimport { convertToRaw } from \"draft-js\";\r\nimport MUIRichTextEditor from \"mui-rte\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport TextEditor from \"tools/customDesign/TextEditor\";\r\nimport { InputLayout, LectureInputProps } from \"./InputLayout\";\r\n\r\nexport function LinkInput({ file, onSave, onCancel }: LectureInputProps) {\r\n  const [link, setLink] = useState(file?.title);\r\n  const [content, setContent] = useState(file?.content);\r\n\r\n  useEffect(() => {\r\n    setLink(file?.title);\r\n    setContent(file?.content);\r\n  }, [file?.title, file?.content]);\r\n\r\n  return (\r\n    <InputLayout\r\n      onSave={() => onSave(new Files(\"LINK\", link).setContent(content))}\r\n      onCancel={onCancel}\r\n    >\r\n      <TextEditor\r\n        value={file?.content}\r\n        onChange={(value) => setContent(value)}\r\n      />\r\n      <TextField\r\n        label=\"Source Link\"\r\n        variant=\"outlined\"\r\n        defaultValue={link}\r\n        onBlur={(event) => setLink(event.target.value)}\r\n        InputProps={{\r\n          startAdornment: \"http://\",\r\n        }}\r\n      />\r\n    </InputLayout>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\LinkOutput.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\ArticleInput.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\ArticleOutput.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\OutputLayout.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\createCourse\\Curriculum\\InputLayout.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\TextEditor.tsx",["774"],"import { convertToRaw } from \"draft-js\";\r\nimport MUIRichTextEditor from \"mui-rte\";\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function TextEditor({\r\n  value,\r\n  onChange,\r\n  readOnly = false,\r\n}: {\r\n  value?: string;\r\n  onChange?: (value: string) => void;\r\n  readOnly?: boolean;\r\n}) {\r\n  const [content, setContent] = useState(value ? value : \"\");\r\n  const [key, setKey] = useState(100);\r\n  function handleBodyChange(event) {\r\n    const rteContent = convertToRaw(event.getCurrentContent());\r\n    rteContent.blocks[0].text !== \"\" && setContent(JSON.stringify(rteContent));\r\n  }\r\n  return (\r\n    <MUIRichTextEditor\r\n      toolbar={!readOnly}\r\n      key={key}\r\n      label=\"Start typing here...\"\r\n      defaultValue={value}\r\n      onChange={handleBodyChange}\r\n      readOnly={readOnly}\r\n      onBlur={() => {\r\n        console.log(content);\r\n        if (onChange) onChange(content);\r\n      }}\r\n    />\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\VideoPlayer.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\TeacherInfoComponent.js",["775"],"import { Grid } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport MaterialTable from 'material-table';\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory } from \"react-router\";\r\nimport InfoService from '../AdminPanel/api/InfoService.js';\r\n\r\n\r\nfunction TeacherInfoComponent(props) {\r\n  const { useState } = React;\r\n\r\n  const [columns, setColumns] = useState([\r\n    { title: 'Avatar', field: 'avatar', editable: false, render: item => <Grid container justifyContent='center'><Avatar src={item.content} alt=\"\" border=\"3\" height=\"100\" width=\"100\" /></Grid> },\r\n    { title: 'Username', field: 'username', editable: false },\r\n    { title: 'Course Created', field: 'courseCreated', editable: false },\r\n    { title: 'Course purchased', field: 'coursePurchased', editable: false },\r\n    { title: 'Total Income', field: 'totalIncome', editable: false }\r\n  ])\r\n\r\n  const [data, setData] = useState([])\r\n\r\n\r\n  function getTeacherInfo() {\r\n    InfoService.getTeacherInfo()\r\n      .then(response => {\r\n        console.log(response.data)\r\n        //callData(response.data)          \r\n        setData(response.data);\r\n        //setData(response.data)\r\n      }\r\n      )\r\n  }\r\n\r\n  useEffect(() => { getTeacherInfo() }, []);\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Grid container>\r\n      {/* <Grid item sm={3}>\r\n        <Drawer\r\n          open={false}\r\n        />\r\n      </Grid>\r\n      <Grid item container sm={9}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        style={{ height: \"100%\" }}\r\n      > */}\r\n      <Grid item container>\r\n        <MaterialTable\r\n          style={{ width: \"100%\" }}\r\n          columns={columns.map((item) => ({ ...item, align: \"center\" }))}\r\n\r\n          title=\"Teacher Information\"\r\n          data={data}\r\n          options={{\r\n            paging: data.length > 10,\r\n            headerStyle: { textAlign: \"center\" },\r\n            actionsColumnIndex: -1, addRowPosition: \"first\", pageSize: 10\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: 'visibility',\r\n              tooltip: 'see teacher',\r\n              onClick: (event, rowData) => {\r\n                console.log(rowData)\r\n                history.push(`/profile/${rowData.username}`)\r\n              }\r\n            }\r\n          ]}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n\r\n    // </Grid>\r\n  )\r\n}\r\n\r\nexport default TeacherInfoComponent","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\StudentInfoComponent.js",["776"],"\r\nimport { Grid } from '@material-ui/core';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport MaterialTable from 'material-table';\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory } from \"react-router\";\r\nimport InfoService from '../AdminPanel/api/InfoService.js';\r\n\r\n\r\nfunction StudentInfoComponent(props) {\r\n    const { useState } = React;\r\n\r\n    const [columns, setColumns] = useState([\r\n        { title: 'Avatar', field: 'avatar', editable: false, render: item => <Grid container justifyContent='center'><Avatar src={item.content} alt=\"\" border=\"3\" height=\"100\" width=\"100\" /> </Grid> },\r\n        { title: 'Username', field: 'username', editable: false },\r\n        { title: 'Course Owned', field: 'courseOwned', editable: false },\r\n        { title: 'Money Spent', field: 'moneySpent', editable: false }\r\n    ])\r\n\r\n    const [data, setData] = useState([])\r\n\r\n\r\n    function getStudentInfo() {\r\n        InfoService.getStudentInfo()\r\n            .then(response => {\r\n                console.log(response.data)\r\n                //callData(response.data)          \r\n                setData(response.data);\r\n                //setData(response.data)\r\n            }\r\n            )\r\n    }\r\n\r\n    useEffect(() => { getStudentInfo() }, []);\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Grid container>\r\n            {/* <Grid item sm={3}>\r\n        <Drawer\r\n          open={false}\r\n        />\r\n      </Grid>\r\n      <Grid item container sm={9}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        style={{ height: \"100%\" }}\r\n      > */}\r\n\r\n            {/* title=\"\"\r\n      data={data}\r\n      options={{\r\n        search: false,\r\n        toolbar: false,\r\n        paging: data.length > 5,\r\n        headerStyle: { textAlign: \"center\" },\r\n        editCellStyle: { textAlign: \"center\" },\r\n      }} */}\r\n            <Grid item container>\r\n                <MaterialTable\r\n                    style={{ width: \"100%\" }}\r\n                    columns={columns.map((item) => ({ ...item, align: \"center\" }))}\r\n                    title=\"Student Information\"\r\n                    data={data}\r\n                    options={{\r\n                        paging: data.length > 10,\r\n                        headerStyle: { textAlign: \"center\" },\r\n                        actionsColumnIndex: -1, addRowPosition: \"first\", pageSize: 10\r\n                    }}\r\n                    actions={[\r\n                        {\r\n                            icon: 'visibility',\r\n                            tooltip: 'see student',\r\n                            onClick: (event, rowData) => {\r\n                                console.log(rowData)\r\n                                history.push(`/profile/${rowData.username}`)\r\n                            }\r\n                        }\r\n                    ]}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n\r\n        // </Grid>\r\n    )\r\n}\r\n\r\nexport default StudentInfoComponent","D:\\program\\java\\coursebucket\\frontend\\src\\components\\messenger\\MessageService.tsx",["777"],"import axios from \"axios\";\r\nimport { Message } from \"classes/Message\";\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure.js\";\r\n\r\nclass MessageService {\r\n  getConversationList() {\r\n    return axios.get(GLOBAL.HOST + `/get-conversation-list`, authHeaders());\r\n  }\r\n  getMessages(username: string) {\r\n    return axios.get(GLOBAL.HOST + `/get-messages/${username}`, authHeaders());\r\n  }\r\n  insertMessage(message: Message) {\r\n    return axios.post(GLOBAL.HOST + `/insert-message`, message, authHeaders());\r\n  }\r\n}\r\nexport default new MessageService();\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\teacher\\IncomePerCourseChart.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\teacher\\RatingLIneChart.tsx",["778"],"import { Card, CardContent } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure.js\";\r\nimport {\r\n  Chart,\r\n  CommonSeriesSettings,\r\n  Export,\r\n  Legend,\r\n  ScrollBar,\r\n  Series,\r\n  Title,\r\n  Tooltip,\r\n  ValueAxis,\r\n  ZoomAndPan,\r\n} from \"devextreme-react/chart\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\ninterface ISource {\r\n  state: string;\r\n  rating: number;\r\n}\r\nexport function RatingLineChart() {\r\n  // const dataSource: Array<ISource> = [];\r\n  // function generateRandomData() {\r\n  //   let n = 30;\r\n  //   for (let i = 0; i < n; i++) {\r\n  //     let data;\r\n  //     let date = new Date().setDate(new Date().getDate() - (n - 1 - i));\r\n  //     data = new Date(date).toLocaleString(\"default\", {\r\n  //       day: \"numeric\",\r\n  //       month: \"long\",\r\n  //     });\r\n  //     console.log(data);\r\n  //     dataSource.push({\r\n  //       state: data,\r\n  //       rating: Math.random() * 5,\r\n  //     });\r\n  //   }\r\n  // }\r\n  // generateRandomData();\r\n  const [dataSource, setDataSource] = useState([]);\r\n  useEffect(() => {\r\n    axios\r\n      .get(GLOBAL.HOST + \"/get-cumulative-rating-teacher\", authHeaders())\r\n      .then((response) => {\r\n        console.log(response);\r\n        setDataSource(\r\n          response.data.map((item) => ({\r\n            date: new Date(item.date).toLocaleString(\"default\", {\r\n              day: \"numeric\",\r\n              month: \"long\",\r\n            }),\r\n            rating: item.rating,\r\n          }))\r\n        );\r\n      });\r\n  }, []);\r\n  console.log(dataSource);\r\n  return (\r\n    <Card className=\"chart\">\r\n      <CardContent style={{ textAlign: \"center\" }}>\r\n        <Chart title=\"Rating\" dataSource={dataSource}>\r\n          <CommonSeriesSettings argumentField=\"date\" type=\"spline\" />\r\n          <Series valueField=\"rating\" name=\"Rating\" />\r\n          <ValueAxis>\r\n            <Title text=\"Rating\" />\r\n          </ValueAxis>\r\n          <Legend visible={false} />\r\n          <Export enabled={true} />\r\n          <Tooltip enabled={true} />\r\n          <ScrollBar visible={true} />\r\n          <ZoomAndPan argumentAxis=\"both\" />\r\n        </Chart>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\teacher\\PopularityPieChart.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\dashboard\\EnrolledStudentListView.tsx",["779"],"import {\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardMedia,\r\n  Grid,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { StudentList } from \"classes/Person\";\r\nimport CustomPagination from \"layout/Pagination\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport TeacherService from \"../api/TeacherService\";\r\nimport { ContentHeader } from \"./Dashboard\";\r\n\r\nexport function EnrolledStudentListView() {\r\n  const history = useHistory();\r\n  const [studentsWithCourses, setStudentsWithCourses] = useState<StudentList[]>(\r\n    []\r\n  );\r\n  useEffect(() => {\r\n    TeacherService.getEnrolledStudentList().then((response) => {\r\n      console.log(\"Enrolled Student List\", response.data);\r\n      setStudentsWithCourses(response.data);\r\n    });\r\n  }, []);\r\n  return (\r\n    <CustomPagination\r\n      objectsPerPage={3}\r\n      noContentText=\"You have no enrolled student\"\r\n    >\r\n      {studentsWithCourses?.map((studentsWithCourse) => (\r\n        <ContentHeader\r\n          key={studentsWithCourse.courseId}\r\n          courseId={studentsWithCourse.courseId}\r\n          courseTitle={studentsWithCourse.courseName}\r\n          courseSubtitle={studentsWithCourse.courseSubtitle}\r\n          courseImage={studentsWithCourse.courseImage}\r\n        >\r\n          <CustomPagination type=\"calculate-by-width\">\r\n            {studentsWithCourse?.studentInfoList?.map((student) => (\r\n              <Card\r\n                key={student.studentUsername}\r\n                style={{ backgroundColor: \"#546e7a\" }}\r\n              >\r\n                <CardActionArea\r\n                  onClick={(event) =>\r\n                    history.push(`/profile/${student.studentUsername}`)\r\n                  }\r\n                >\r\n                  <CardMedia>\r\n                    <img src={student.studentImage} />\r\n                  </CardMedia>\r\n                  <CardContent>\r\n                    <Grid container direction=\"column\">\r\n                      <Grid item>\r\n                        <Typography variant=\"h6\">\r\n                          {student.studentName}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\">\r\n                          {new Date(student.enrolledDate).toLocaleDateString()}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </CardContent>\r\n                </CardActionArea>\r\n              </Card>\r\n            ))}\r\n          </CustomPagination>\r\n        </ContentHeader>\r\n      ))}\r\n    </CustomPagination>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\LanguageComponent.js",["780","781"],"import React, { useEffect } from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport LanguageService from '../AdminPanel/api/LanguageService.js'\r\nimport { Drawer, Grid } from '@material-ui/core';\r\n\r\n\r\nfunction LanguageComponent(props) {\r\n  const { useState } = React;\r\n\r\n  const [columns, setColumns] = useState([\r\n    { title: 'Id', field: 'id', editable: false },\r\n    {\r\n      title: 'Language Name', field: 'name'\r\n    },\r\n    { title: 'Admin', field: 'adminId' }\r\n  ])\r\n\r\n  const [data, setData] = useState([])\r\n\r\n  CallgetAllLanguages()\r\n\r\n  function getAllLanguages() {\r\n    LanguageService.getAllLanguages()\r\n      .then(response => {\r\n        console.log(response.data)\r\n        //callData(response.data)          \r\n        setData(response.data);\r\n        //setData(response.data)\r\n      }\r\n      )\r\n  }\r\n\r\n  function CallgetAllLanguages() {\r\n    useEffect(() => { getAllLanguages() }, [])\r\n  }\r\n\r\n  function CallupdateLanguage(language) {\r\n\r\n    LanguageService.updateLanguage(language)\r\n      .then(response => {\r\n        //console.log(response.data)\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllLanguages();\r\n      }\r\n      )\r\n  }\r\n\r\n  function CalldeleteLanguage(id) {\r\n\r\n    LanguageService.deleteLanguage(id)\r\n      .then(response => {\r\n        ///console.log(response)\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllLanguages();\r\n      }\r\n      )\r\n  }\r\n\r\n  function CalladdLanguage(language) {\r\n\r\n    LanguageService.addLanguage(language)\r\n      .then(response => {\r\n        //console.log('call add : ')\r\n        //console.log(response.data)\r\n        //setData([...countries,response.data])\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllLanguages();\r\n      }\r\n      )\r\n  }\r\n\r\n  return (\r\n    <Grid container>\r\n      <MaterialTable\r\n        style={{ width: \"100%\" }}\r\n        title=\"Language\"\r\n        columns={columns}\r\n        data={data}\r\n        editable={{\r\n          onRowAdd: newData =>\r\n            new Promise((resolve, reject) => {\r\n\r\n              setTimeout(() => {\r\n                newData.adminId = 'shammya';\r\n                CalladdLanguage(newData)\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                // const dataUpdate = [...data];\r\n                // const index = oldData.tableData.id;\r\n                // dataUpdate[index] = newData;\r\n                // console.log(index)\r\n                // setData([...dataUpdate]);\r\n                CallupdateLanguage(newData)\r\n\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                // const dataDelete = [...data];\r\n                // const index = oldData.tableData.id;\r\n                // dataDelete.splice(index, 1);\r\n                // setData([...dataDelete]);\r\n                CalldeleteLanguage(oldData.id)\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1, addRowPosition: \"first\", pageSize: 10\r\n        }}\r\n      />\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default LanguageComponent","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\EduStatusComponent.js",["782","783"],"import React, { useEffect } from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport EduStatusService from '../AdminPanel/api/EduStatusService.js'\r\nimport { Drawer, Grid } from '@material-ui/core';\r\n\r\n\r\nfunction EduStatusComponent(props) {\r\n  const { useState } = React;\r\n\r\n  const [columns, setColumns] = useState([\r\n    { title: 'Id', field: 'id', editable: false },\r\n    {\r\n      title: 'Educational Status', field: 'type'\r\n    },\r\n    { title: 'Admin', field: 'adminId', editable: false }\r\n  ])\r\n\r\n  const [data, setData] = useState([])\r\n\r\n  CallgetAllEduStatus()\r\n\r\n  function getAllEduStatus() {\r\n    EduStatusService.getAllEduStatus()\r\n      .then(response => {\r\n        //console.log(response.data)\r\n        //callData(response.data)\r\n        setData(response.data);\r\n        //setData(response.data)\r\n      }\r\n      )\r\n  }\r\n\r\n\r\n  function CallgetAllEduStatus() {\r\n    useEffect(() => { getAllEduStatus() }, [])\r\n  }\r\n\r\n  function CallupdateEduStatus(edustatus) {\r\n\r\n    EduStatusService.updateEduStatus(edustatus)\r\n      .then(response => {\r\n        //console.log(response.data)\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllEduStatus();\r\n      }\r\n      )\r\n  }\r\n\r\n  function CalldeleteEdustatus(id) {\r\n\r\n    EduStatusService.deleteEduStatus(id)\r\n      .then(response => {\r\n        ///console.log(response)\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllEduStatus();\r\n      }\r\n      )\r\n  }\r\n\r\n  function CalladdEduStatus(edustatus) {\r\n\r\n    EduStatusService.addEduStatus(edustatus)\r\n      .then(response => {\r\n        //console.log('call add : ')\r\n        //console.log(response.data)\r\n        //setData([...edustatuses, response.data])\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllEduStatus();\r\n      }\r\n      )\r\n  }\r\n\r\n  return (\r\n    <Grid container >\r\n      <MaterialTable\r\n        style={{ width: \"100%\" }}\r\n        title=\"Educational Status\"\r\n        columns={columns}\r\n        data={data}\r\n        editable={{\r\n          onRowAdd: newData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                //console.log(newData.id)\r\n                newData.adminId = 'shammya';\r\n                CalladdEduStatus(newData)\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                // const dataUpdate = [...data];\r\n                // const index = oldData.tableData.id;\r\n                // dataUpdate[index] = newData;\r\n                // console.log(index)\r\n                // setData([...dataUpdate]);\r\n                CallupdateEduStatus(newData);\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                // const dataDelete = [...data];\r\n                // const index = oldData.tableData.id;\r\n                // dataDelete.splice(index, 1);\r\n                // setData([...dataDelete]);\r\n                CalldeleteEdustatus(oldData.id);\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1, addRowPosition: \"first\", pageSize: 10\r\n        }}\r\n      />\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default EduStatusComponent","D:\\program\\java\\coursebucket\\frontend\\src\\components\\person\\teacher\\Overview.tsx",["784","785","786","787","788","789"],"import { Card, CardContent, Grid, MenuItem, Select } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure\";\r\nimport {\r\n  ArgumentAxis,\r\n  Border,\r\n  Chart,\r\n  CommonSeriesSettings,\r\n  Export,\r\n  Legend,\r\n  ScrollBar,\r\n  Series,\r\n  Title,\r\n  Tooltip,\r\n  ValueAxis,\r\n  ZoomAndPan,\r\n} from \"devextreme-react/chart\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport TeacherService from \"../api/TeacherService\";\r\n\r\ninterface ISource {\r\n  date: Date | string;\r\n  enrStdCount: number;\r\n  reviewCount: number;\r\n  oneStar: number;\r\n  twoStar: number;\r\n  threeStar: number;\r\n  fourStar: number;\r\n  fiveStar: number;\r\n}\r\nconst viewTypeArray = [\"Last 7 days\", \"Last 30 days\", \"Last 1 year\"];\r\ninterface ICourse {\r\n  id: number;\r\n  title: string;\r\n  image?: string;\r\n}\r\n\r\nfunction convertToDay(date: Date) {\r\n  return date.toLocaleString(\"default\", { weekday: \"short\" });\r\n}\r\nfunction convertToDate(date: Date) {\r\n  return date.toLocaleString(\"default\", {\r\n    day: \"numeric\",\r\n    month: \"long\",\r\n  });\r\n}\r\nfunction convertToMonth(date: Date) {\r\n  return date.toLocaleString(\"default\", {\r\n    month: \"short\",\r\n    year: \"numeric\",\r\n  });\r\n}\r\n\r\nfunction generateArrayByDay(\r\n  source: ISource[],\r\n  day: number,\r\n  format: (item: Date) => string\r\n) {\r\n  let array: ISource[] = [];\r\n  for (let i = 0; i < day; i++) {\r\n    let date = new Date(\r\n      new Date().setDate(new Date().getDate() - (day - 1 - i))\r\n    );\r\n    date.setHours(0, 0, 0, 0);\r\n    let data = source.filter(\r\n      (item) => (item.date as Date).getTime() == date.getTime()\r\n    );\r\n    console.log(source[0].date, new Date(source[0].date), date, data);\r\n    array.push({\r\n      date: format(date), //new Date(date).toLocaleString(\"default\", { weekday: \"short\" }),\r\n      enrStdCount: data.length ? data[0].enrStdCount : 0,\r\n      reviewCount: data.length ? data[0].reviewCount : 0,\r\n      oneStar: data.length ? data[0].oneStar : 0,\r\n      twoStar: data.length ? data[0].twoStar : 0,\r\n      threeStar: data.length ? data[0].threeStar : 0,\r\n      fourStar: data.length ? data[0].fourStar : 0,\r\n      fiveStar: data.length ? data[0].fiveStar : 0,\r\n    });\r\n  }\r\n  console.log(day + \" days\", array);\r\n  return array;\r\n}\r\nfunction generateArrayByMonth(\r\n  source: ISource[],\r\n  month: number,\r\n  format: (item: Date) => string\r\n) {\r\n  let array: ISource[] = [];\r\n  for (let i = 0; i < month; i++) {\r\n    let date = new Date(\r\n      new Date().setMonth(new Date().getMonth() - (month - 1 - i))\r\n    );\r\n    date.setHours(0, 0, 0, 0);\r\n    let enrStdCount: number = 0;\r\n    let reviewCount: number = 0;\r\n    let oneStar: number = 0;\r\n    let twoStar: number = 0;\r\n    let threeStar: number = 0;\r\n    let fourStar: number = 0;\r\n    let fiveStar: number = 0;\r\n    let data = source.map((item) => {\r\n      if ((item.date as Date).getMonth() == date.getMonth()) {\r\n        enrStdCount += item.enrStdCount;\r\n        reviewCount += item.reviewCount;\r\n        oneStar += item.oneStar;\r\n        twoStar += item.twoStar;\r\n        threeStar += item.threeStar;\r\n        fourStar += item.fourStar;\r\n        fiveStar += item.fiveStar;\r\n      }\r\n    });\r\n    console.log(\"format\", format(date));\r\n    array.push({\r\n      date: format(date), //new Date(date).toLocaleString(\"default\", { weekday: \"short\" }),\r\n      enrStdCount: enrStdCount,\r\n      reviewCount: reviewCount,\r\n      oneStar: oneStar,\r\n      twoStar: twoStar,\r\n      threeStar: threeStar,\r\n      fourStar: fourStar,\r\n      fiveStar: fiveStar,\r\n    });\r\n  }\r\n  console.log(month + \" days\", array);\r\n  return array;\r\n}\r\n\r\nexport function OverviewBarChart() {\r\n  const [viewType, setViewType] = useState(viewTypeArray[0]);\r\n  const [courseArray, setCourseArray] = useState<ICourse[]>([]);\r\n  const [selectedCourse, setSelectedCourse] = useState<ICourse>({\r\n    id: 0,\r\n    title: \"--Select--\",\r\n  });\r\n  const [dataSource, setDataSource] = useState<ISource[]>([]);\r\n  const [temp, setTemp] = useState<ISource[]>([]);\r\n  useEffect(() => {\r\n    loadCourseName();\r\n  }, []);\r\n  async function loadCourseName() {\r\n    await TeacherService.getCreateCourse().then((response) => {\r\n      console.log(\"create course fetched\", response.data);\r\n      let array = response.data.map((item) => ({\r\n        id: item.id,\r\n        title: item.title,\r\n        image: item.coverContent,\r\n      }));\r\n      setCourseArray(array);\r\n      handleCourseChange(array[0]);\r\n    });\r\n  }\r\n  async function handleCourseChange(course) {\r\n    await setSelectedCourse(course);\r\n    await axios\r\n      .get(\r\n        GLOBAL.HOST + `/get-course-overview-teacher/${course.id}`,\r\n        authHeaders()\r\n      )\r\n      .then((response) => {\r\n        console.log(\"overview fetch for course \" + course.title, response.data);\r\n        let source = response.data.overviewContents.map((item) => ({\r\n          ...item,\r\n          date: new Date(item.date),\r\n        }));\r\n        setDataSource(source);\r\n        handleViewTypeChange(source, viewTypeArray[0]);\r\n      });\r\n  }\r\n  function handleViewTypeChange(source: ISource[], type) {\r\n    console.log(type);\r\n    setViewType(type);\r\n    switch (type) {\r\n      case viewTypeArray[0]:\r\n        setTemp(generateArrayByDay(source, 7, convertToDay));\r\n        break;\r\n      case viewTypeArray[1]:\r\n        setTemp(generateArrayByDay(source, 30, convertToDate));\r\n        break;\r\n      case viewTypeArray[2]:\r\n        setTemp(generateArrayByMonth(source, 12, convertToMonth));\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card className=\"chart\">\r\n      <CardContent style={{ textAlign: \"center\" }}>\r\n        <Chart title=\"Overview\" dataSource={temp}>\r\n          <CommonSeriesSettings argumentField=\"date\" type=\"stackedBar\" />\r\n          <Series\r\n            valueField=\"enrStdCount\"\r\n            name=\"Enrolled Student\"\r\n            stack=\"Enrolled Student\"\r\n          />\r\n          <Series valueField=\"reviewCount\" name=\"Review\" stack=\"Review\" />\r\n          <Series valueField=\"oneStar\" name=\"1 star\" stack=\"Rating\" />\r\n          <Series valueField=\"twoStar\" name=\"2 star\" stack=\"Rating\" />\r\n          <Series valueField=\"threeStar\" name=\"3 star\" stack=\"Rating\" />\r\n          <Series valueField=\"fourStar\" name=\"4 star\" stack=\"Rating\" />\r\n          <Series valueField=\"fiveStar\" name=\"5 star\" stack=\"Rating\" />\r\n          <ValueAxis>\r\n            <Title text=\"Student number\" />\r\n          </ValueAxis>\r\n          <Legend\r\n            position=\"outside\"\r\n            horizontalAlignment=\"center\"\r\n            verticalAlignment=\"bottom\"\r\n          >\r\n            <Border visible={true} />\r\n          </Legend>\r\n          <Export enabled={true} />\r\n          <Tooltip enabled={true} />\r\n          <ArgumentAxis\r\n          // defaultVisualRange={{ startValue: 300, endValue: 500 }}\r\n          />\r\n          <ScrollBar visible={true} position=\"bottom\" />\r\n          <ZoomAndPan argumentAxis=\"both\" />\r\n        </Chart>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          spacing={1}\r\n          style={{ backgroundColor: \"#282C34\" }}\r\n        >\r\n          <Grid item>\r\n            <Select\r\n              style={{ height: \"100%\" }}\r\n              value={viewType}\r\n              onChange={(event) =>\r\n                handleViewTypeChange(dataSource, event.target.value as string)\r\n              }\r\n              variant=\"outlined\"\r\n            >\r\n              {viewTypeArray.map((item) => (\r\n                <MenuItem\r\n                  key={item}\r\n                  // @ts-ignore\r\n                  value={item}\r\n                >\r\n                  {item}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n          <Grid item>\r\n            <Select\r\n              value={selectedCourse}\r\n              onChange={(event) => handleCourseChange(event.target.value)}\r\n              variant=\"outlined\"\r\n            >\r\n              {courseArray.map((item) => (\r\n                <MenuItem\r\n                  key={item.id}\r\n                  // @ts-ignore\r\n                  value={item}\r\n                >\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    spacing={1}\r\n                    justifyContent=\"flex-start\"\r\n                  >\r\n                    <Grid item>\r\n                      <img src={item.image} style={{ width: 40, height: 25 }} />\r\n                    </Grid>\r\n                    <Grid item>{item.title}</Grid>\r\n                  </Grid>\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\DesignationComponent.js",["790","791"],"import React, { useEffect } from 'react'\r\nimport MaterialTable from 'material-table'\r\nimport DesignationService from '../AdminPanel/api/DesignationService.js'\r\nimport { Drawer, Grid } from '@material-ui/core';\r\n\r\n\r\nfunction DesignationComponent(props) {\r\n  const { useState } = React;\r\n\r\n  const [columns, setColumns] = useState([\r\n    { title: 'Id', field: 'id', editable: false },\r\n    {\r\n      title: 'Designation ', field: 'type'\r\n    },\r\n    { title: 'Admin', field: 'adminId', editable: false }\r\n  ])\r\n\r\n  const [data, setData] = useState([])\r\n\r\n  CallgetAllDesignations()\r\n\r\n\r\n  function getAllDesignations() {\r\n    DesignationService.getAllDesignation()\r\n      .then(response => {\r\n        //console.log(response.data)\r\n        //callData(response.data)\r\n        setData(response.data);\r\n        //setData(response.data)\r\n      }\r\n      )\r\n  }\r\n\r\n  function CallgetAllDesignations() {\r\n    useEffect(() => { getAllDesignations() }, []);\r\n  }\r\n\r\n  function CallupdateDesignation(designation) {\r\n\r\n    DesignationService.updateDesignation(designation)\r\n      .then(response => {\r\n        //console.log(response.data)\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllDesignations();\r\n      }\r\n      )\r\n  }\r\n\r\n  function CalldeleteDesignation(id) {\r\n\r\n    DesignationService.deleteDesignation(id)\r\n      .then(response => {\r\n        ///console.log(response)\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllDesignations();\r\n      }\r\n      )\r\n  }\r\n\r\n  function CalladdDesignation(designation) {\r\n\r\n    DesignationService.addDesignation(designation)\r\n      .then(response => {\r\n        //console.log('call add : ')\r\n        //console.log(response.data)\r\n        //setData([...countries, response.data])\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllDesignations();\r\n      }\r\n      )\r\n  }\r\n\r\n  return (\r\n    <Grid container>\r\n      <MaterialTable\r\n        style={{ width: \"100%\" }}\r\n        title=\"Designation\"\r\n        columns={columns}\r\n        data={data}\r\n        editable={{\r\n          onRowAdd: newData =>\r\n            new Promise((resolve, reject) => {\r\n\r\n              setTimeout(() => {\r\n                //console.log(newData.id)\r\n                newData.adminId = 'shammya';\r\n                CalladdDesignation(newData)\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                // const dataUpdate = [...data];\r\n                // const index = oldData.tableData.id;\r\n                // dataUpdate[index] = newData;\r\n                // console.log(index)\r\n                // setData([...dataUpdate]);\r\n                CallupdateDesignation(newData)\r\n\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                // const dataDelete = [...data];\r\n                // const index = oldData.tableData.id;\r\n                // dataDelete.splice(index, 1);\r\n                // setData([...dataDelete]);\r\n                CalldeleteDesignation(oldData.id);\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1, addRowPosition: \"first\", pageSize: 10\r\n        }}\r\n      />\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default DesignationComponent","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\CountryComponent.js",["792"],"import { Grid } from '@material-ui/core';\r\nimport MaterialTable from 'material-table';\r\nimport React, { useEffect } from 'react';\r\nimport CountryService from '../AdminPanel/api/CountryService.js';\r\n\r\n\r\nfunction CountryComponent(props) {\r\n  const { useState } = React;\r\n\r\n  const [columns, setColumns] = useState([\r\n    { title: 'Id', field: 'id', editable: false },\r\n    {\r\n      title: 'Country Name', field: 'name'\r\n    },\r\n    { title: 'Admin', field: 'adminId', editable: false }\r\n  ])\r\n\r\n  const [data, setData] = useState([])\r\n\r\n  CallgetAllCountries()\r\n\r\n  function getAllCountries() {\r\n    CountryService.getAllCountries()\r\n      .then(response => {\r\n        console.log(response.data)\r\n        //callData(response.data)          \r\n        setData(response.data);\r\n        //setData(response.data)\r\n      }\r\n      )\r\n  }\r\n\r\n  function CallgetAllCountries() {\r\n    useEffect(() => { getAllCountries() }, []);\r\n  }\r\n\r\n  function CallupdateCountry(country) {\r\n\r\n    CountryService.updateCountry(country)\r\n      .then(response => {\r\n        //console.log(response.data)\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllCountries();\r\n      }\r\n      );\r\n  }\r\n  function CalldeleteCountry(id) {\r\n\r\n    CountryService.deleteCountry(id)\r\n      .then(response => {\r\n        ///console.log(response)\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllCountries();\r\n      }\r\n      );\r\n\r\n  }\r\n\r\n  function CalladdCountry(country) {\r\n\r\n    CountryService.addCountry(country)\r\n      .then(response => {\r\n        //console.log('call add : ')\r\n        //console.log(response.data)\r\n        //setData([...countries,response.data])\r\n        //callData(response.data)\r\n        //setData(response.data)\r\n        getAllCountries();\r\n      }\r\n      )\r\n  }\r\n\r\n  return (\r\n    <Grid container>\r\n      {/* <Grid item sm={3}>\r\n        <Drawer\r\n          open={false}\r\n        />\r\n      </Grid>\r\n      <Grid item container sm={9}\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        style={{ height: \"100%\" }}\r\n      > */}\r\n      <MaterialTable\r\n        style={{ width: \"100%\" }}\r\n        columns={columns}\r\n        title=\"Country\"\r\n        data={data}\r\n        editable={{\r\n          onRowAdd: newData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                newData.adminId = 'shammya';\r\n                //console.log(newData.id)\r\n                CalladdCountry(newData)\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                // const dataUpdate = [...data];\r\n                // const index = oldData.tableData.id;\r\n                // dataUpdate[index] = newData;\r\n                // console.log(index)\r\n                //setData([...dataUpdate]);\r\n                CallupdateCountry(newData);\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                // const dataDelete = [...data];\r\n                // const index = oldData.tableData.id;\r\n                // dataDelete.splice(index, 1);\r\n                // setData([...dataDelete])\r\n                CalldeleteCountry(oldData.id);\r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1, addRowPosition: \"first\", pageSize: 10\r\n        }}\r\n      />\r\n    </Grid>\r\n    // </Grid>\r\n  )\r\n}\r\n\r\nexport default CountryComponent","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\CategoryComponent.js",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\SliderComponent.tsx",["793","794"],"import { Button, Grid, IconButton } from \"@material-ui/core\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { Slider } from \"classes/Files\";\r\nimport { FileObject } from \"material-ui-dropzone\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ReactSortable } from \"react-sortablejs\";\r\nimport GridImageView from \"tools/customDesign/ImageVeiw\";\r\nimport ShadowText from \"tools/customDesign/ShadowText\";\r\n// import { ReactSortable } from \"react-sortablejs\";\r\nimport { FileUploader } from \"tools/FileUploader\";\r\nimport { Files } from \"./../../classes/Files\";\r\nimport SliderService from \"./api/SliderService\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      justifyContent: \"space-around\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    imageList: {\r\n      width: 500,\r\n      height: 450,\r\n      overflow: \"visible\",\r\n    },\r\n    icon: {\r\n      color: \"rgba(255, 255, 255)\",\r\n      border: \"2px solid #b0bec5\",\r\n      backgroundColor: \"#445F67\",\r\n    },\r\n  })\r\n);\r\ninterface IFileObject extends FileObject {\r\n  id: number;\r\n}\r\nexport default function BasicImageList() {\r\n  const [sliders, setSliders] = useState<Slider[]>([]);\r\n  const [files, setFiles] = useState<FileObject[]>([]);\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  console.log(\"print from body of slider\", sliders);\r\n\r\n  useEffect(() => {\r\n    loadSlider();\r\n  }, []);\r\n\r\n  function loadSlider() {\r\n    SliderService.getSliders().then((response) => {\r\n      console.log(\"Sliders: \", response.data);\r\n      setSliders(response.data);\r\n    });\r\n  }\r\n\r\n  async function handleUploadClick() {\r\n    for (const fileObject of files) {\r\n      let file = new Files(\"PICTURE\", \"SLIDER\").setFile(fileObject);\r\n      await file.upload();\r\n      let slider = { file: file };\r\n      await SliderService.addSlider(slider).then((response) => {\r\n        console.log(\"Slider uploaded \", file.id);\r\n      });\r\n    }\r\n    await setFiles([]);\r\n    enqueueSnackbar(\"Uploaded successfully\", { variant: \"success\" });\r\n    console.log(\"files rest to []\");\r\n    loadSlider();\r\n  }\r\n\r\n  async function deleteSlider(id: number) {\r\n    await SliderService.deleteSlider(id);\r\n    enqueueSnackbar(\"Deleted successfully\", { variant: \"success\" });\r\n    loadSlider();\r\n  }\r\n\r\n  function updateSerial(sliders: Slider[]) {\r\n    setSliders(sliders);\r\n    console.log(sliders);\r\n    SliderService.updateSerial(\r\n      sliders.map((slider, index) => ({ ...slider, serial: index + 1 }))\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      spacing={2}\r\n    >\r\n      <Grid item container spacing={2}>\r\n        {!sliders || sliders.length == 0 ? (\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            spacing={4}\r\n            style={{ padding: \"100px 0px\" }}\r\n          >\r\n            <Grid item>\r\n              <ShadowText>No slider image available</ShadowText>\r\n            </Grid>\r\n            <Grid item>\r\n              <ShadowText>Please upload some banner</ShadowText>\r\n            </Grid>\r\n          </Grid>\r\n        ) : (\r\n          <ReactSortable\r\n            list={sliders}\r\n            setList={updateSerial}\r\n            className=\"MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-2 MuiGrid-item\"\r\n          >\r\n            {sliders.map((slider, index) => (\r\n              <Grid\r\n                item\r\n                container\r\n                direction=\"column\"\r\n                xs={12}\r\n                sm={6}\r\n                key={index}\r\n                justifyContent=\"center\"\r\n                style={{ position: \"relative\" }}\r\n              >\r\n                <Grid item>\r\n                  <GridImageView\r\n                    item\r\n                    src={slider.file.content}\r\n                    options={\r\n                      <IconButton\r\n                        className={classes.icon}\r\n                        onClick={(event) => deleteSlider(slider.id)}\r\n                      >\r\n                        <Delete />\r\n                      </IconButton>\r\n                    }\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            ))}\r\n          </ReactSortable>\r\n        )}\r\n      </Grid>\r\n      <Grid item container>\r\n        <FileUploader\r\n          fileObjects={files}\r\n          onChange={setFiles}\r\n          filesLimit={10}\r\n          type=\"picture\"\r\n        />\r\n      </Grid>\r\n      {files.length > 0 && (\r\n        <Grid item container>\r\n          <Grid container direction=\"row\" justifyContent=\"center\">\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleUploadClick}\r\n              >\r\n                Upload\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\InfoService.js",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\CourseApprovalComponent.tsx",["795","796","797"],"import { Grid } from \"@material-ui/core\";\r\nimport MaterialTable from \"material-table\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport CourseApprovalService from \"./api/CourseApprovalService.js\";\r\n\r\ninterface IDataProps {\r\n  id: number;\r\n  title: string;\r\n  teacherId: string;\r\n  publishDate: string;\r\n}\r\nfunction CourseApproval(props) {\r\n  const { useState } = React;\r\n\r\n  const [columns, setColumns] = useState([\r\n    { title: \"Id\", field: \"id\", editable: false },\r\n    { title: \"Title\", field: \"title\", editable: false },\r\n    { title: \"Teacher Username\", field: \"teacherId\", editable: false },\r\n    { title: \"Publish Date\", field: \"publishDate\", editable: false },\r\n  ]);\r\n\r\n  const [data1, setData1] = useState<IDataProps[]>([]);\r\n  const [data2, setData2] = useState<IDataProps[]>([]);\r\n\r\n  function getUnapprovedCourses() {\r\n    CourseApprovalService.getUnapprovedCourses().then((response) => {\r\n      console.log(response.data);\r\n      //callData(response.data)\r\n      setData1(response.data);\r\n      //setData(response.data)\r\n    });\r\n  }\r\n  function getApprovedCourses() {\r\n    CourseApprovalService.getApprovedCourses().then((response) => {\r\n      console.log(response.data);\r\n      //callData(response.data)\r\n      setData2(response.data);\r\n      //setData(response.data)\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getApprovedCourses();\r\n    getUnapprovedCourses();\r\n    return () => {\r\n      // setData1(null);\r\n      // setData2(null);\r\n    };\r\n  }, []);\r\n\r\n  // function insertIntoApproveList(data) {\r\n  //   setData2([data, ...data2]);\r\n  // }\r\n  // function insertIntoUnapproveList(data) {\r\n  //   setData1([data, ...data1]);\r\n  // }\r\n  function deleteFromApprove(idx) {\r\n    let dataset = [...data2];\r\n    dataset.splice(idx, 1);\r\n    setData2(dataset);\r\n  }\r\n  function deleteFromUnapprove(idx) {\r\n    let dataset = [...data2];\r\n    dataset.splice(idx, 1);\r\n    setData2(dataset);\r\n  }\r\n\r\n  const history = useHistory();\r\n  return (\r\n    <Grid container xs spacing={3}>\r\n      <Grid item container>\r\n        <MaterialTable\r\n          style={{ width: \"100%\" }}\r\n          // @ts-ignore\r\n          columns={columns}\r\n          title=\"Unapproved Courses\"\r\n          data={data1}\r\n          options={{\r\n            actionsColumnIndex: -1,\r\n            addRowPosition: \"first\",\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: \"visibility\",\r\n              tooltip: \"see course\",\r\n              onClick: (event, rowData) => {\r\n                console.log(rowData);\r\n                history.push(`/course/${(rowData as IDataProps).id}`);\r\n              },\r\n            },\r\n            {\r\n              icon: \"checkcircle\",\r\n              tooltip: \"approve course\",\r\n              onClick: (event, rowData) => {\r\n                console.log(rowData);\r\n                CourseApprovalService.approveCourse(\r\n                  (rowData as IDataProps).id\r\n                ).then((response) => {\r\n                  getApprovedCourses();\r\n                  getUnapprovedCourses();\r\n                  // deleteFromUnapprove(rowData.tableData.id);\r\n                  // insertIntoApproveList(rowData);\r\n                });\r\n              },\r\n            },\r\n          ]}\r\n        />\r\n      </Grid>\r\n      <Grid item container>\r\n        <MaterialTable\r\n          style={{ width: \"100%\" }}\r\n          // @ts-ignore\r\n          columns={columns}\r\n          title=\"Approved Courses\"\r\n          data={data2}\r\n          options={{\r\n            actionsColumnIndex: -1,\r\n            addRowPosition: \"first\",\r\n          }}\r\n          actions={[\r\n            {\r\n              icon: \"visibility\",\r\n              tooltip: \"see course\",\r\n              onClick: (event, rowData) => {\r\n                console.log(rowData);\r\n                history.push(`/course/${(rowData as IDataProps).id}`);\r\n              },\r\n            },\r\n            {\r\n              icon: \"cancel\",\r\n              tooltip: \"unapprove course\",\r\n              onClick: (event, rowData) => {\r\n                console.log(rowData);\r\n                CourseApprovalService.unapproveCourse(\r\n                  (rowData as IDataProps).id\r\n                ).then((response) => {\r\n                  getApprovedCourses();\r\n                  getUnapprovedCourses();\r\n                });\r\n              },\r\n            },\r\n          ]}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default CourseApproval;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\charts\\PopurlarCourseAdminChart.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\charts\\PopularCategoryChart.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\Cards.tsx",["798","799","800","801"],"import { Grid, CardContent, Typography } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure\";\r\nimport input from \"postcss/lib/input\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport PopularCategoryChart from \"./charts/PopularCategoryChart\";\r\nimport { PopularCourseAdminChart } from \"./charts/PopurlarCourseAdminChart\";\r\nimport { UserRegistrationChart } from \"./charts/UserRegistrationChart\";\r\n\r\ninterface ShowCard {\r\n  totalVisitor: number;\r\n  newCourse: number;\r\n  totalCourse: number;\r\n  newUser: number;\r\n  totalUser: number;\r\n  todayIncome: number;\r\n  totalIncome: number;\r\n}\r\n\r\nexport function Cards() {\r\n  const [data, setData] = useState<ShowCard>();\r\n  useEffect(() => {\r\n    axios\r\n      .get(GLOBAL.HOST + \"/get-show-card-admin\", authHeaders())\r\n      .then((response) => {\r\n        setData(response.data);\r\n      });\r\n  }, []);\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={6} md={3}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              Visitors\r\n            </Typography>\r\n            <Typography align=\"center\" variant=\"h4\">\r\n              {data?.totalVisitor}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={6} md={3}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              New Course\r\n            </Typography>\r\n            <Typography align=\"center\" variant=\"h4\">\r\n              {data?.newCourse}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={6} md={3}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              Total Course\r\n            </Typography>\r\n            <Typography align=\"center\" variant=\"h4\">\r\n              {data?.totalCourse}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={6} md={3}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              New User\r\n            </Typography>\r\n            <Typography align=\"center\" variant=\"h4\">\r\n              {data?.newUser}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={6} md={3}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              Total User\r\n            </Typography>\r\n            <Typography align=\"center\" variant=\"h4\">\r\n              {data?.totalUser}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={6} md={3}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              Today Income\r\n            </Typography>\r\n            <Typography align=\"center\" variant=\"h4\">\r\n              ${data?.todayIncome}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <Grid item xs={6} md={3}>\r\n        <Card>\r\n          <CardContent>\r\n            <Typography align=\"center\" variant=\"h6\">\r\n              Total Income\r\n            </Typography>\r\n            <Typography align=\"center\" variant=\"h4\">\r\n              ${data?.todayIncome}\r\n            </Typography>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\CourseApprovalService.js",["802"],"import axios from \"axios\"\r\nimport { GLOBAL } from 'Configure.js'\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\";\r\n\r\nclass CourseApprovalService {\r\n\r\n    getApprovedCourses() {\r\n        return axios.get(GLOBAL.HOST + '/get-approved-courses', authHeaders())\r\n    }\r\n\r\n    getUnapprovedCourses() {\r\n        return axios.get(GLOBAL.HOST + '/get-unapproved-courses', authHeaders())\r\n    }\r\n\r\n    approveCourse(courseId) {\r\n        return axios.post(GLOBAL.HOST + `/approve-course/${courseId}`, {}, authHeaders())\r\n    }\r\n    unapproveCourse(courseId) {\r\n        return axios.post(GLOBAL.HOST + `/unapprove-course/${courseId}`, {}, authHeaders())\r\n    }\r\n\r\n    // deleteCountry(id){\r\n    //     return axios.delete(global.HOST + `/delete-country/${id}`)\r\n    // }\r\n\r\n\r\n    // updateCountry(country) {\r\n    //     return axios.put(global.HOST + '/update-country',country)\r\n    // }\r\n\r\n    // addCountry(country) {\r\n    //     return axios.post(global.HOST + '/add-country',country)\r\n    // }\r\n\r\n}\r\n\r\nexport default new CourseApprovalService()","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\InstructorShortDetails.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\tools\\useWindowDimension.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\Rating.tsx",["803"],"import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  LinearProgress,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Rating } from \"@material-ui/lab\";\r\nimport { PublicResponse } from \"classes/Course\";\r\nimport AuthService from \"components/auth/api/AuthService\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport CourseService from \"../api/CourseService\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  ratingNumber: {\r\n    fontSize: \"6.4rem\",\r\n    fontWeight: 700,\r\n    color: \"#ffc107\",\r\n    lineHeight: \"1\",\r\n    textShadow: \"2px 0px 0 #ffffff\",\r\n  },\r\n  ratingText: {\r\n    color: \"#ffc107\",\r\n    fontSize: \"1.2rem\",\r\n    fontWeight: 700,\r\n  },\r\n}));\r\n\r\nfunction RatingBox({\r\n  data,\r\n  courseId,\r\n  onRatingSubmit,\r\n}: {\r\n  courseId: number;\r\n  data: PublicResponse | undefined;\r\n  onRatingSubmit: () => void;\r\n}) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [ratingValue, setRatingValue] = useState<number>(0);\r\n  const [ratingDone, setRatingDone] = useState<boolean>(false);\r\n  useEffect(() => {\r\n    if (courseId && AuthService.getCurrentAccountType() === \"Student\") {\r\n      CourseService.ratingSelf(courseId).then((response) => {\r\n        if (response.data > 0) setRatingDone(true);\r\n        setRatingValue(response.data);\r\n      });\r\n    }\r\n  }, [courseId, data]);\r\n  function handleRatingSubmit() {\r\n    CourseService.submitRating(courseId, ratingValue).then((response) => {\r\n      if (response.status == 200) {\r\n        enqueueSnackbar(\"Your rating submitted successfully\", {\r\n          variant: \"success\",\r\n        });\r\n        setRatingDone(true);\r\n        onRatingSubmit();\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <Card style={{ width: \"100%\" }}>\r\n      <CardContent>\r\n        <Grid container direction=\"column\" spacing={3}>\r\n          <Grid item container direction=\"row\" alignItems=\"center\" spacing={2}>\r\n            <Grid\r\n              item\r\n              md={3}\r\n              xs={3}\r\n              container\r\n              direction=\"column\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <Typography className={classes.ratingNumber}>\r\n                  {Math.round((data?.ratingValue || 0) * 10) / 10}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                direction=\"row\"\r\n                wrap=\"nowrap\"\r\n                spacing={1}\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n              >\r\n                <Rating\r\n                  value={\r\n                    data?.ratingValue\r\n                      ? Math.round(data.ratingValue * 10) / 10\r\n                      : 5\r\n                  }\r\n                  readOnly\r\n                  name=\"rating-read-only\"\r\n                />\r\n                <Typography className={classes.ratingText}>\r\n                  ({data?.ratingCount})\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography className={classes.ratingText}>\r\n                  Course Rating\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item md={9} xs={9} container direction=\"column\" spacing={1}>\r\n              {[5, 4, 3, 2, 1].map((value) => (\r\n                <Grid\r\n                  key={value}\r\n                  item\r\n                  container\r\n                  direction=\"row\"\r\n                  wrap=\"nowrap\"\r\n                  alignItems=\"center\"\r\n                  spacing={1}\r\n                >\r\n                  <Grid item style={{ width: \"100%\" }}>\r\n                    <LinearProgress\r\n                      variant=\"determinate\"\r\n                      value={\r\n                        data?.ratingByNumber\r\n                          ? (data?.ratingByNumber[value] / data?.ratingCount) *\r\n                            100\r\n                          : 0\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Rating\r\n                      name=\"course-rating-output\"\r\n                      value={value}\r\n                      readOnly\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography>{data?.ratingByNumber[value]}</Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n          {AuthService.getCurrentAccountType() === \"Student\" && (\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              alignItems=\"center\"\r\n              xs\r\n              spacing={2}\r\n            >\r\n              <Grid\r\n                item\r\n                container\r\n                direction=\"row\"\r\n                wrap=\"nowrap\"\r\n                justifyContent=\"center\"\r\n                xs\r\n                spacing={2}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\">\r\n                    {ratingDone ? \"Your rating : \" : \"Give a rating\"}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Rating\r\n                    name=\"course-rating-input\"\r\n                    readOnly={ratingDone}\r\n                    value={ratingValue}\r\n                    onChange={(event, value) => setRatingValue(value as number)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              {!ratingDone && ratingValue && ratingValue > 0 ? (\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  xs\r\n                  spacing={2}\r\n                >\r\n                  <Grid item>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={handleRatingSubmit}\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      onClick={() => setRatingValue(0)}\r\n                    >\r\n                      Cancel\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default RatingBox;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\courseView\\Checkout.tsx",["804","805","806","807"],"import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Divider,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport { Course } from \"classes/Course\";\r\nimport { CreditCard } from \"classes/Person\";\r\nimport PersonService from \"components/person/api/PersonService\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SlidingUpTransition } from \"tools/Tools\";\r\n\r\nexport function CongratulationDialog({\r\n  open,\r\n  course,\r\n  onClose,\r\n}: {\r\n  open: boolean;\r\n  course: Course;\r\n  onClose: () => void;\r\n}) {\r\n  return (\r\n    <Dialog open={open} keepMounted onClose={onClose}>\r\n      <DialogContent>\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n          <Grid item>\r\n            <img src={require(\"assets/img/congratulation.jpg\").default} />\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"h4\">You successfully purchased</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Card>\r\n              <CardContent>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  wrap=\"nowrap\"\r\n                  justifyContent=\"space-between\"\r\n                  alignItems=\"center\"\r\n                  spacing={1}\r\n                >\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    direction=\"row\"\r\n                    wrap=\"nowrap\"\r\n                    xs\r\n                    spacing={1}\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Grid item>\r\n                      <img src={course?.cover?.content} />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"h6\">{course?.title}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    direction=\"column\"\r\n                    alignItems=\"flex-end\"\r\n                    style={{ width: \"auto\" }}\r\n                  >\r\n                    <Grid item>\r\n                      <Typography\r\n                        variant=\"body1\"\r\n                        style={{ textDecoration: \"line-through\" }}\r\n                      >\r\n                        {course.mainPrice}\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\">\r\n                        {course.mainPrice &&\r\n                          course.off &&\r\n                          course.mainPrice -\r\n                            (course.mainPrice * course.off) / 100}\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport function CheckoutDialog({\r\n  open,\r\n  course,\r\n  onClose,\r\n  onPurchase,\r\n}: {\r\n  open: boolean;\r\n  course: Course;\r\n  onClose: () => void;\r\n  onPurchase: () => void;\r\n}) {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [creditCard, setCreditCard] = useState<CreditCard | undefined>();\r\n  useEffect(() => {\r\n    PersonService.getCreditCardDetails().then((response) => {\r\n      console.log(\"Credit card fetched\", response.data);\r\n      setCreditCard(response.data);\r\n    });\r\n    return () => {\r\n      setCreditCard(undefined);\r\n    };\r\n  }, []);\r\n  let offeredPrice =\r\n    course?.mainPrice - (course?.mainPrice * course?.off) / 100;\r\n  let expDate = new Date(creditCard?.expireDate + \"\");\r\n\r\n  if (course == undefined) return <></>;\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={SlidingUpTransition}\r\n      keepMounted\r\n      onClose={onClose}\r\n    >\r\n      <DialogTitle>Checkout</DialogTitle>\r\n      <DialogContent>\r\n        <Grid container direction=\"column\" spacing={2}>\r\n          <Grid item container direction=\"row\" wrap=\"nowrap\" xs spacing={4}>\r\n            <Grid item container direction=\"column\" xs spacing={1}>\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Card details</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Name on card\"\r\n                  value={creditCard?.nameOnCard ? creditCard.nameOnCard : \"\"}\r\n                  onChange={(event) =>\r\n                    setCreditCard({\r\n                      ...creditCard,\r\n                      nameOnCard: event.target.value,\r\n                    })\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  value={creditCard?.cardNo ? creditCard.cardNo : \"\"}\r\n                  label=\"Card number\"\r\n                  onChange={(event) =>\r\n                    setCreditCard({ ...creditCard, cardNo: event.target.value })\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <KeyboardDatePicker\r\n                  // disableToolbar\r\n                  variant=\"inline\"\r\n                  format=\"dd/MMM/yyyy\"\r\n                  label=\"Expire Date\"\r\n                  inputVariant=\"outlined\"\r\n                  value={creditCard?.expireDate}\r\n                  onChange={(date) => {\r\n                    setCreditCard({ ...creditCard, expireDate: date as Date });\r\n                  }}\r\n                  KeyboardButtonProps={{\r\n                    \"aria-label\": \"change date\",\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container direction=\"column\" xs spacing={1}>\r\n              <Grid item>\r\n                <Typography variant=\"h5\">Summary</Typography>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"space-between\"\r\n                wrap=\"nowrap\"\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body2\">Original price</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body2\">{course?.mainPrice}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"space-between\"\r\n                wrap=\"nowrap\"\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body2\">Discount</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body2\">\r\n                    {course.mainPrice &&\r\n                      course.off &&\r\n                      (course?.mainPrice * course?.off) / 100}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider />\r\n              <Grid\r\n                item\r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"space-between\"\r\n                wrap=\"nowrap\"\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"h6\">Total</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"h6\">\r\n                    {course.mainPrice && course.off && offeredPrice}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    let error = false;\r\n                    if (!creditCard?.cardNo) {\r\n                      error = true;\r\n                      enqueueSnackbar(\"Please provide a credit card no\", {\r\n                        variant: \"warning\",\r\n                      });\r\n                    }\r\n                    if (!creditCard?.nameOnCard) {\r\n                      error = true;\r\n                      enqueueSnackbar(\"Please provide name on card\", {\r\n                        variant: \"warning\",\r\n                      });\r\n                    }\r\n                    if (!creditCard?.expireDate) {\r\n                      error = true;\r\n                      enqueueSnackbar(\"Please provide expire date of card\", {\r\n                        variant: \"warning\",\r\n                      });\r\n                    } else if (expDate.getTime() < new Date().getTime()) {\r\n                      error = true;\r\n                      enqueueSnackbar(\"Your credit card is expired\", {\r\n                        variant: \"error\",\r\n                      });\r\n                    }\r\n                    if (error) return;\r\n                    onPurchase();\r\n                  }}\r\n                >\r\n                  Complete payment\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Card>\r\n              <CardHeader>\r\n                <Typography variant=\"h5\">Order details</Typography>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  wrap=\"nowrap\"\r\n                  justifyContent=\"space-between\"\r\n                  alignItems=\"center\"\r\n                  spacing={1}\r\n                >\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    direction=\"row\"\r\n                    wrap=\"nowrap\"\r\n                    xs\r\n                    spacing={1}\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Grid item>\r\n                      <img src={course?.cover?.content} />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"h6\">{course.title}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    direction=\"column\"\r\n                    alignItems=\"flex-end\"\r\n                    style={{ width: \"auto\" }}\r\n                  >\r\n                    <Grid item>\r\n                      <Typography\r\n                        variant=\"body1\"\r\n                        style={{ textDecoration: \"line-through\" }}\r\n                      >\r\n                        {course?.mainPrice}\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\">\r\n                        {course.mainPrice && course.off && offeredPrice}\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\api\\SliderService.tsx",["808"],"import axios from \"axios\";\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure.js\";\r\n\r\nclass SliderService {\r\n  getSliders() {\r\n    return axios.get(GLOBAL.HOST + \"/public/get-slider-images\", authHeaders());\r\n  }\r\n  deleteSlider(id) {\r\n    return axios.delete(GLOBAL.HOST + `/delete-slider/${id}`, authHeaders());\r\n  }\r\n  addSlider(slider) {\r\n    return axios.post(GLOBAL.HOST + \"/add-slider\", slider, authHeaders());\r\n  }\r\n  updateSerial(sliders) {\r\n    return axios.post(\r\n      GLOBAL.HOST + \"/update-slider-serial\",\r\n      sliders,\r\n      authHeaders()\r\n    );\r\n  }\r\n}\r\n\r\nexport default new SliderService();\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\AdminPanel\\charts\\UserRegistrationChart.tsx",["809","810","811","812"],"import { Card, CardContent, Grid, MenuItem, Select } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure\";\r\nimport {\r\n  Border,\r\n  Chart,\r\n  CommonSeriesSettings,\r\n  Export,\r\n  Legend,\r\n  ScrollBar,\r\n  Series,\r\n  Title,\r\n  Tooltip,\r\n  ValueAxis,\r\n  ZoomAndPan,\r\n} from \"devextreme-react/chart\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\ninterface ISource {\r\n  date: Date | string;\r\n  teacher: number;\r\n  student: number;\r\n}\r\nconst viewTypeArray = [\"Last 7 days\", \"Last 30 days\", \"Last 1 year\"];\r\n\r\nfunction convertToDay(date: Date) {\r\n  return date.toLocaleString(\"default\", { weekday: \"short\" });\r\n}\r\nfunction convertToDate(date: Date) {\r\n  return date.toLocaleString(\"default\", {\r\n    day: \"numeric\",\r\n    month: \"long\",\r\n  });\r\n}\r\nfunction convertToMonth(date: Date) {\r\n  return date.toLocaleString(\"default\", {\r\n    month: \"short\",\r\n    year: \"numeric\",\r\n  });\r\n}\r\n\r\nfunction generateArrayByDay(\r\n  source: ISource[],\r\n  day: number,\r\n  format: (item: Date) => string\r\n) {\r\n  let array: ISource[] = [];\r\n  for (let i = 0; i < day; i++) {\r\n    let date = new Date(\r\n      new Date().setDate(new Date().getDate() - (day - 1 - i))\r\n    );\r\n    date.setHours(0, 0, 0, 0);\r\n    let data = source.filter(\r\n      (item) => (item.date as Date).getTime() == date.getTime()\r\n    );\r\n    console.log(source[0].date, new Date(source[0].date), date, data);\r\n    array.push({\r\n      date: format(date), //new Date(date).toLocaleString(\"default\", { weekday: \"short\" }),\r\n      student: data.length ? data[0].student : 0,\r\n      teacher: data.length ? data[0].teacher : 0,\r\n    });\r\n  }\r\n  console.log(day + \" days\", array);\r\n  return array;\r\n}\r\nfunction generateArrayByMonth(\r\n  source: ISource[],\r\n  month: number,\r\n  format: (item: Date) => string\r\n) {\r\n  let array: ISource[] = [];\r\n  for (let i = 0; i < month; i++) {\r\n    let date = new Date(\r\n      new Date().setMonth(new Date().getMonth() - (month - 1 - i))\r\n    );\r\n    console.log(date);\r\n    date.setHours(0, 0, 0, 0);\r\n    let studentCount: number = 0;\r\n    let teacherCount: number = 0;\r\n    let data = source.map((item) => {\r\n      if ((item.date as Date).getMonth() == date.getMonth()) {\r\n        studentCount += item.student;\r\n        teacherCount += item.teacher;\r\n      }\r\n    });\r\n    console.log(date, data);\r\n    array.push({\r\n      date: format(date), //new Date(date).toLocaleString(\"default\", { weekday: \"short\" }),\r\n      student: studentCount,\r\n      teacher: teacherCount,\r\n    });\r\n  }\r\n  console.log(month + \" days\", array);\r\n  return array;\r\n}\r\n\r\nexport function UserRegistrationChart() {\r\n  const [viewType, setViewType] = useState(viewTypeArray[2]);\r\n  const [dataSource, setDataSource] = useState<ISource[]>([]);\r\n  const [temp, setTemp] = useState<ISource[]>();\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(GLOBAL.HOST + \"/get-new-user-count\", authHeaders())\r\n      .then((response) => {\r\n        console.log(\"new user count chart\", response.data);\r\n        let array = response.data.map((item) => ({\r\n          student: item.studentCount,\r\n          teacher: item.teacherCount,\r\n          date: new Date(new Date(item.date).setHours(0, 0, 0, 0)),\r\n        }));\r\n        setDataSource(array);\r\n        handleViewTypeChange(array, viewType);\r\n      });\r\n  }, []);\r\n\r\n  function handleViewTypeChange(source, type) {\r\n    setViewType(type);\r\n    switch (type) {\r\n      case viewTypeArray[0]:\r\n        setTemp(generateArrayByDay(source, 7, convertToDay));\r\n        break;\r\n      case viewTypeArray[1]:\r\n        setTemp(generateArrayByDay(source, 30, convertToDate));\r\n        break;\r\n      case viewTypeArray[2]:\r\n        setTemp(generateArrayByMonth(source, 12, convertToMonth));\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card className=\"chart\">\r\n      <CardContent style={{ textAlign: \"center\" }}>\r\n        <Chart title=\"Teacher and Student Registration\" dataSource={temp}>\r\n          <CommonSeriesSettings argumentField=\"date\" type=\"stackedBar\" />\r\n          <Series valueField=\"teacher\" name=\"Teacher\" stack=\"Teacher\" />\r\n          <Series valueField=\"student\" name=\"Student\" stack=\"Student\" />\r\n          <ValueAxis>\r\n            <Title text=\"Count\" />\r\n          </ValueAxis>\r\n          <Legend\r\n            position=\"outside\"\r\n            horizontalAlignment=\"center\"\r\n            verticalAlignment=\"bottom\"\r\n          >\r\n            <Border visible={true} />\r\n          </Legend>\r\n          <Export enabled={true} />\r\n          <Tooltip enabled={true} />\r\n          <ScrollBar visible={true} position=\"bottom\" />\r\n          <ZoomAndPan argumentAxis=\"both\" />\r\n        </Chart>\r\n        <Grid container justifyContent=\"center\">\r\n          <Select\r\n            value={viewType}\r\n            onChange={(event) =>\r\n              handleViewTypeChange(dataSource, event.target.value as string)\r\n            }\r\n            variant=\"outlined\"\r\n            style={{ backgroundColor: \"#282C34\" }}\r\n          >\r\n            {viewTypeArray.map((item) => (\r\n              <MenuItem\r\n                key={item}\r\n                // @ts-ignore\r\n                value={item}\r\n              >\r\n                {item}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\course\\CourseCarousel.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\api\\SearchService.tsx",["813"],"import axios from \"axios\";\r\nimport { authHeaders as authHeaders } from \"components/auth/api/AuthService\";\r\nimport { GLOBAL } from \"Configure.js\";\r\n\r\nclass SearchService {\r\n  getDataForFilter() {\r\n    return axios.get(\r\n      GLOBAL.HOST + `/public/get-data-for-filter`,\r\n      authHeaders()\r\n    );\r\n  }\r\n  getFilteredCourses(object) {\r\n    return axios.post(\r\n      GLOBAL.HOST + `/public/get-filtered-courses`,\r\n      object,\r\n      authHeaders()\r\n    );\r\n  }\r\n}\r\nexport default new SearchService();\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\ImageCarousel.js",["814"],"import ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Carousel from 'react-material-ui-carousel';\r\nimport GridImageView from 'tools/customDesign/ImageVeiw';\r\nimport SliderService from './AdminPanel/api/SliderService';\r\n\r\nconst images = [\r\n  require('assets/banner/Banner-1.jpg'),\r\n  require('assets/banner/Banner-2.jpg'),\r\n  require('assets/banner/Banner-3.jpg'),\r\n  require('assets/banner/Banner-4.jpg'),\r\n]\r\n\r\n\r\nexport default function ImageSlider(props) {\r\n\r\n  const [sliders, setSliders] = useState([]);\r\n\r\n  useEffect(() => {\r\n    SliderService.getSliders().then(response => {\r\n      setSliders(response.data);\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <Carousel\r\n      className=\"carousel-root\"\r\n      animation=\"slide\"\r\n      fullHeightHover={true}\r\n      stopAutoPlayOnHover={true}\r\n      timeout={500}\r\n      navButtonsProps={{\r\n        style: {\r\n          width: 20,\r\n          height: 120,\r\n          backgroundColor: 'cornflowerblue',\r\n          borderRadius: 5\r\n        }\r\n      }}\r\n      NextIcon={<ArrowForwardIosIcon />}\r\n      PrevIcon={<ArrowBackIosIcon style={{ marginLeft: 12 }} />}\r\n    // style={{ width: '100%' }}\r\n    >\r\n      {\r\n        sliders?.map((slider, i) => <GridImageView key={slider.id} src={slider.file.content} wrapperProps={{ container: true, justifyContent: 'center', style: { height: 729 } }} imgProps={{ style: { maxHeight: '50vh' } }} />)\r\n      }\r\n    </Carousel >\r\n  )\r\n}\r\n\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\auth\\SignUp.tsx",["815","816","817","818","819"],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n// import Link from '@material-ui/core/Link';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport React, { useState } from \"react\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { ControlledTextfield } from \"tools/customDesign/ControlledTextfield\";\r\nimport { Person } from \"../../classes/Person\";\r\nimport AuthService from \"./api/AuthService\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" to=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  // root: {\r\n  //   height: \"100vh\",\r\n  // },\r\n  image: {\r\n    // backgroundImage: 'url(https://source.unsplash.com/random)',\r\n    backgroundImage:\r\n      \"url(https://st4.depositphotos.com/21087722/22869/i/1600/depositphotos_228693110-stock-photo-amazing-succulents-welcome-handwriting-monogram.jpg)\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  formControl: {\r\n    // margin: theme.spacing(1, 0),\r\n    // minWidth: 400,\r\n  },\r\n}));\r\n\r\nexport function SignUp({ signOut }: { signOut: boolean }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  let person: Person;\r\n\r\n  const [status, setStatus] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [againPassword, setAgainPassword] = useState(\"\");\r\n  const [usernameFound, setUsernameFound] = useState(false);\r\n  const [emailFound, setEmailFound] = useState(false);\r\n\r\n  function isValidPassword() {\r\n    return password == againPassword && password != \"\";\r\n  }\r\n\r\n  function checkUsername(username: string) {\r\n    AuthService.existByUsername(username).then((response) => {\r\n      setUsernameFound(response.data.boolValue);\r\n    });\r\n  }\r\n  function checkEmail(email: string) {\r\n    AuthService.existByEmail(email).then((response) => {\r\n      setEmailFound(response.data.boolValue);\r\n    });\r\n  }\r\n  function handleSubmitClicked() {\r\n    checkUsername(username);\r\n    checkEmail(email);\r\n    if (isValidPassword() && !usernameFound && !emailFound) {\r\n      let person: Person = new Person(email, username, password);\r\n      person.accountType = status;\r\n      history.push({\r\n        pathname:\r\n          history.location.pathname.split(\"/\").slice(0, -1).join(\"/\") +\r\n          \"/profile-details\",\r\n        state: { person: person, registered: false },\r\n      });\r\n    }\r\n  }\r\n  return (\r\n    <Grid component={Paper} elevation={6} square style={{ padding: 5 }}>\r\n      {signOut && (\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <form\r\n            className={classes.form}\r\n            onSubmit={handleSubmitClicked}\r\n            autoComplete=\"off\"\r\n          >\r\n            <Grid container spacing={2}>\r\n              <Grid item container>\r\n                <FormControl\r\n                  variant=\"outlined\"\r\n                  className={classes.formControl}\r\n                  fullWidth\r\n                  required\r\n                >\r\n                  <InputLabel>Your Status</InputLabel>\r\n                  <Select\r\n                    label=\"Your Status\"\r\n                    variant=\"outlined\"\r\n                    value={status}\r\n                    onChange={(event) =>\r\n                      setStatus(event.target.value as string)\r\n                    }\r\n                  >\r\n                    <MenuItem key=\"Student\" value={\"Student\"}>\r\n                      Student\r\n                    </MenuItem>\r\n                    <MenuItem key=\"Teacher\" value={\"Teacher\"}>\r\n                      Teacher\r\n                    </MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Grid>\r\n              <Grid item container>\r\n                <ControlledTextfield\r\n                  error={usernameFound}\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  label=\"Username\"\r\n                  onBlur={(event) => {\r\n                    checkUsername(event.target.value);\r\n                  }}\r\n                  onFocus={(event) => setUsernameFound(false)}\r\n                  onChange={(event) => {\r\n                    checkUsername(event.target.value);\r\n                    setUsername(event.target.value);\r\n                  }}\r\n                  helperText={usernameFound ? \"Username already exist\" : \"\"}\r\n                  pattern=\"letters-digits\"\r\n                />\r\n              </Grid>\r\n              <Grid item container>\r\n                <TextField\r\n                  error={emailFound}\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  label=\"Email Address\"\r\n                  type=\"email\"\r\n                  onBlur={(event) => {\r\n                    checkEmail(event.target.value);\r\n                  }}\r\n                  autoComplete=\"off\"\r\n                  onFocus={(event) => setEmailFound(false)}\r\n                  onChange={(event) => {\r\n                    checkEmail(event.target.value);\r\n                    setEmail(event.target.value);\r\n                  }}\r\n                  helperText={emailFound ? \"E-mail already exist\" : \"\"}\r\n                />\r\n              </Grid>\r\n              <Grid item container>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  autoComplete=\"off\"\r\n                  onChange={(event) => setPassword(event.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item container>\r\n                <TextField\r\n                  error={againPassword != \"\" && password !== againPassword}\r\n                  variant=\"outlined\"\r\n                  required\r\n                  fullWidth\r\n                  label=\"Password (Again)\"\r\n                  type=\"password\"\r\n                  onChange={(event) => setAgainPassword(event.target.value)}\r\n                  helperText={\r\n                    password !== againPassword ? \"Password mismatch\" : \"\"\r\n                  }\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              type=\"submit\"\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Grid container justifyContent=\"center\">\r\n              <Grid item>\r\n                <Link\r\n                  to={\r\n                    location.pathname.split(\"/\").slice(0, -1).join(\"/\") +\r\n                    \"/signin\"\r\n                  }\r\n                >\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\auth\\ForgotPassword.tsx",["820","821","822","823","824","825"],"import { Paper, Snackbar } from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { ControlledTextfield } from \"tools/customDesign/ControlledTextfield\";\r\nimport { Alert } from \"tools/Tools\";\r\nimport AuthService from \"./api/AuthService\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" to=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100vh\",\r\n  },\r\n  image: {\r\n    backgroundImage:\r\n      \"url(https://st4.depositphotos.com/21087722/22869/i/1600/depositphotos_228693110-stock-photo-amazing-succulents-welcome-handwriting-monogram.jpg)\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport function ForgotPassword({ signOut }: { signOut: boolean }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [dob, setDob] = useState<Date | null>(null);\r\n  const [accept, setAccept] = useState(false);\r\n  const [openSnackbar, setOpenSnackbar] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [openSuccess, setOpenSuccess] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [againPassword, setAgainPassword] = useState(\"\");\r\n\r\n  function handleRequestClick(event) {\r\n    event.preventDefault();\r\n    if (username == \"\") {\r\n      setMessage(\"Username is empty !!\");\r\n      setOpenSnackbar(true);\r\n      return;\r\n    }\r\n    if (dob == null) {\r\n      setMessage(\"Please set a date of birth\");\r\n      setOpenSnackbar(true);\r\n      return;\r\n    }\r\n    AuthService.requestChangePassword(username, dob as Date).then(\r\n      (response) => {\r\n        console.log(response);\r\n        if (response.data.stringValue) {\r\n          setMessage(response.data.stringValue);\r\n          setOpenSnackbar(true);\r\n        } else if (response.data.boolValue == true) {\r\n          setSuccessMessage(\r\n            \"Your request accepted. \\nPlease set a new password\"\r\n          );\r\n          setOpenSuccess(true);\r\n          setAccept(true);\r\n        }\r\n      }\r\n    );\r\n  }\r\n  function handleSubmitClick(event) {\r\n    event.preventDefault();\r\n    if (password != againPassword) {\r\n      setMessage(\"Password doesn't match !!\");\r\n      setOpenSnackbar(true);\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    AuthService.changePassword(username, password).then((response) => {\r\n      if (response.data.token) {\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data.token));\r\n        history.push({ pathname: \"/home\" });\r\n      } else if (response.data.stringValue) {\r\n        setMessage(response.data.stringValue);\r\n        setOpenSnackbar(true);\r\n      }\r\n    });\r\n  }\r\n  function handleSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpenSnackbar(false);\r\n    setOpenSuccess(false);\r\n  }\r\n  return (\r\n    <Grid component={Paper} elevation={6} square style={{ padding: 5 }}>\r\n      {signOut && (\r\n        <>\r\n          <div className={classes.paper}>\r\n            <Snackbar\r\n              open={openSnackbar}\r\n              onClose={handleSnackbarClose}\r\n              autoHideDuration={2000}\r\n            >\r\n              <Alert onClose={handleSnackbarClose} severity=\"error\">\r\n                {message}\r\n              </Alert>\r\n            </Snackbar>\r\n            <Snackbar\r\n              open={openSuccess}\r\n              onClose={handleSnackbarClose}\r\n              autoHideDuration={2000}\r\n            >\r\n              <Alert onClose={handleSnackbarClose} severity=\"success\">\r\n                {successMessage}\r\n              </Alert>\r\n            </Snackbar>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Password Recovery\r\n            </Typography>\r\n            <form\r\n              className={classes.form}\r\n              noValidate\r\n              onSubmit={accept ? handleSubmitClick : handleRequestClick}\r\n            >\r\n              <Grid container>\r\n                <Grid item container>\r\n                  <ControlledTextfield\r\n                    disabled={accept}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    autoComplete=\"username\"\r\n                    autoFocus\r\n                    onChange={(event) => setUsername(event.target.value)}\r\n                    pattern=\"letters-digits-no-space\"\r\n                  />\r\n                </Grid>\r\n                {!accept && (\r\n                  <>\r\n                    <Grid item container>\r\n                      <KeyboardDatePicker\r\n                        // disableToolbar\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        variant=\"dialog\"\r\n                        format=\"dd/MMM/yyyy\"\r\n                        label=\"Date of Birth\"\r\n                        inputVariant=\"outlined\"\r\n                        value={dob}\r\n                        onChange={(date) => {\r\n                          setDob(date as Date);\r\n                        }}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\",\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item container>\r\n                      <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        type=\"submit\"\r\n                      >\r\n                        Request to change password\r\n                      </Button>\r\n                    </Grid>\r\n                  </>\r\n                )}\r\n                {accept && (\r\n                  <>\r\n                    <Grid item container>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"New Password\"\r\n                        autoComplete=\"email\"\r\n                        autoFocus\r\n                        onChange={(event) => setPassword(event.target.value)}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item container>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"New Password (Again)\"\r\n                        autoComplete=\"email\"\r\n                        error={password != againPassword}\r\n                        onChange={(event) =>\r\n                          setAgainPassword(event.target.value)\r\n                        }\r\n                        helperText={\r\n                          password != againPassword\r\n                            ? \"Password mismatch!!!\"\r\n                            : \"\"\r\n                        }\r\n                      />\r\n                    </Grid>\r\n                    <Grid item container>\r\n                      <Button\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        type=\"submit\"\r\n                      >\r\n                        Submit and Sign In\r\n                      </Button>\r\n                    </Grid>\r\n                  </>\r\n                )}\r\n              </Grid>\r\n\r\n              <Grid container direction=\"column\" alignContent=\"center\">\r\n                <Grid item>\r\n                  <Link\r\n                    to={\r\n                      history.location.pathname\r\n                        .split(\"/\")\r\n                        .slice(0, -1)\r\n                        .join(\"/\") + \"/signin\"\r\n                    }\r\n                    variant=\"body2\"\r\n                  >\r\n                    {\"Already have an account? Sign In\"}\r\n                  </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link\r\n                    to={\r\n                      history.location.pathname\r\n                        .split(\"/\")\r\n                        .slice(0, -1)\r\n                        .join(\"/\") + \"/signup\"\r\n                    }\r\n                    variant=\"body2\"\r\n                  >\r\n                    {\"Don't have an account? Sign Up\"}\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\Sort.tsx",["826","827","828"],"import {\r\n  Button,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  makeStyles,\r\n  Radio,\r\n  RadioGroup,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport SortIcon from \"@material-ui/icons/Sort\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    display: \"block\",\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n}));\r\n\r\nconst CustomSelect = ({ data, title, open, selected, onClose, onChange }) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(selected);\r\n\r\n  function handleChange(event) {\r\n    onChange(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <Dialog onClose={onClose} open={open} style={{ padding: 10 }}>\r\n      <DialogTitle style={{ textAlign: \"center\" }}>{title}</DialogTitle>\r\n      <DialogContent>\r\n        <FormControl component=\"fieldset\">\r\n          <RadioGroup>\r\n            {data.map((item, index) => (\r\n              <FormControlLabel\r\n                key={index}\r\n                checked={item === selected}\r\n                value={item}\r\n                control={<Radio />}\r\n                label={item}\r\n                onClick={handleChange}\r\n              />\r\n            ))}\r\n          </RadioGroup>\r\n        </FormControl>\r\n      </DialogContent>\r\n      <Button color=\"primary\" onClick={onClose}>\r\n        Cancel\r\n      </Button>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nfunction Sort({ sortTypes, sortType, setSortType }) {\r\n  const [open, setOpen] = useState(false);\r\n  const handleChange = (value) => {\r\n    setSortType(value);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  return (\r\n    <Grid container style={{ cursor: \"pointer\" }}>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        wrap=\"nowrap\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        onClick={handleOpen}\r\n      >\r\n        <Grid item>\r\n          <Grid container direction=\"row\" alignItems=\"center\">\r\n            <Grid item>\r\n              <Typography variant=\"h6\">{\"Sort by : \"}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"primary\"\r\n                style={{ fontWeight: \"bold\", marginLeft: 5 }}\r\n              >\r\n                {sortType}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <SortIcon />\r\n        </Grid>\r\n      </Grid>\r\n      <CustomSelect\r\n        title={\"Set sort type\"}\r\n        selected={sortType}\r\n        open={open}\r\n        data={sortTypes}\r\n        onClose={handleClose}\r\n        onChange={handleChange}\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Sort;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\Filter.tsx",["829"],"import {\r\n  AppBar,\r\n  Button,\r\n  Drawer,\r\n  Grid,\r\n  IconButton,\r\n  List,\r\n  makeStyles,\r\n  Tab,\r\n  Tabs,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { Cancel } from \"@material-ui/icons\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Sticky } from \"react-sticky\";\r\nimport { Responsive } from \"tools/responsive/Responsive\";\r\nimport SearchService from \"./api/SearchService\";\r\nimport { GenerateFilterValue, MakeList } from \"./filter/MakeList\";\r\nimport { IFilteredValue, IFilterType } from \"./SearchPage\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  dialog: {\r\n    paper: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    },\r\n  },\r\n  drawer: {\r\n    width: \"100%\",\r\n  },\r\n}));\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div role=\"tabpanel\" hidden={value !== index} {...other}>\r\n      {value === index && (\r\n        <Grid container style={{ padding: 10 }}>\r\n          {children}\r\n        </Grid>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nfunction Filter({\r\n  filteredData,\r\n  filterDataList,\r\n  onFilterChange,\r\n  onClearAll,\r\n}: {\r\n  filteredData: Array<IFilteredValue>;\r\n  filterDataList: Array<IFilterType>;\r\n  onFilterChange: (value: IFilteredValue, type: \"ADD\" | \"REMOVE\") => void;\r\n  onClearAll: () => void;\r\n}) {\r\n  const classes = useStyle();\r\n  const [openDrawer, setOpenDrawer] = React.useState(false);\r\n  const [tabValue, setTabValue] = React.useState(0);\r\n  const [filterDataList2, setFilterDataList2] = useState<Array<IFilterType>>();\r\n\r\n  useEffect(() => {\r\n    SearchService.getDataForFilter().then((response) => {\r\n      console.log(response.data);\r\n      setFilterDataList2([\r\n        { title: \"Teacher\", type: \"LIST\", items: response.data.teachers },\r\n        {\r\n          title: \"Category\",\r\n          type: \"CATEGORY\",\r\n          items: response.data.categories[0].children,\r\n        },\r\n        { title: \"Language\", type: \"LIST\", items: response.data.languages },\r\n        {\r\n          title: \"Rating\",\r\n          type: \"SLIDER\",\r\n          min: 0,\r\n          max: 5,\r\n          value: [0, 5],\r\n          step: 0.01,\r\n          valueType: \"⭐\",\r\n        },\r\n        {\r\n          title: \"Price\",\r\n          type: \"SLIDER\",\r\n          min: response.data.price.min,\r\n          max: response.data.price.max,\r\n          value: [response.data.price.min, response.data.price.max],\r\n          step: 10,\r\n          valueType: \"$\",\r\n        },\r\n      ]);\r\n    });\r\n  }, []);\r\n  function handleTabChange(event, newValue) {\r\n    setTabValue(newValue);\r\n  }\r\n\r\n  // const handleFilterChange = (data) => {\r\n  //   var array = filterData;\r\n  //   var index = array.findIndex(item => item.title === data.title);\r\n  //   array[index] = data;\r\n  //   onFilterDataChange(array);\r\n  // }\r\n  // const handleFilterSliderChange = (data) => {\r\n  //   var array = rangeFilteredArray\r\n  //   var idx = array.findIndex(item => item.filterType === data.filterType)\r\n  //   array[idx].minValue = data.min\r\n  //   array[idx].maxValue = data.max\r\n  //   return array;\r\n  // }\r\n  // const handleSliderCommit = (data) => {\r\n  //   var array = handleFilterSliderChange(data);\r\n  //   onRangeFilteredArrayChange(array)\r\n  // }\r\n  // const handleFilterValueChange = (data) => {\r\n  //   var array = filteredArray;\r\n  //   if (data.type === \"add\") {\r\n  //     array.push({ filterType: data.filterType, value: data.value })\r\n  //   }\r\n  //   else if (data.type === \"remove\") {\r\n  //     array = array.filter(item => (item.filterType !== data.filterType || item.value !== data.value))\r\n  //   }\r\n  //   onFilteredArrayChange(array)\r\n  // }\r\n  // function getCurrentState(data) {\r\n  //   var array = filteredArray;\r\n  //   return array.findIndex(obj => obj.filterType === data.filterType && obj.value === data.value) !== -1\r\n  // }\r\n  // function getCurrentSliderState(filterType) {\r\n  //   var idx = rangeFilteredArray.findIndex(item => item.filterType === filterType)\r\n  //   return [rangeFilteredArray[idx].minValue, rangeFilteredArray[idx].maxValue]\r\n  // }\r\n  // function clearFilteredArray() {\r\n  //   onFilteredArrayChange([])\r\n  //   var array = rangeFilteredArray\r\n  //   array.map(filter => {\r\n  //     filter.minValue = filter.min\r\n  //     filter.maxValue = filter.max\r\n  //   })\r\n  //   onRangeFilteredArrayChange(array)\r\n  // }\r\n\r\n  function handleFilterChange(index, newFilter) {\r\n    // let newObject = [...objects];\r\n    // newObject[index] = newFilter;\r\n    // onFilterChange(newObject);\r\n  }\r\n\r\n  function MobileFilter() {\r\n    return (\r\n      <Drawer\r\n        anchor={\"right\"}\r\n        open={openDrawer}\r\n        onClose={(event) => setOpenDrawer(false)}\r\n        classes={{ paper: classes.drawer }}\r\n      >\r\n        <Sticky>\r\n          {({ style }) => (\r\n            <>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justifyContent=\"space-between\"\r\n                alignItems=\"center\"\r\n              >\r\n                <IconButton onClick={(event) => setOpenDrawer(false)}>\r\n                  <Cancel />\r\n                </IconButton>\r\n                <Typography variant=\"h6\">Filter list</Typography>\r\n                <Button variant=\"contained\" onClick={onClearAll}>\r\n                  Clear All\r\n                </Button>\r\n              </Grid>\r\n              <AppBar position=\"static\" color=\"default\" style={style}>\r\n                <Tabs\r\n                  value={tabValue}\r\n                  onChange={handleTabChange}\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n                >\r\n                  {filterDataList.map((filter, index) => (\r\n                    <Tab key={index} label={filter.title} />\r\n                  ))}\r\n                </Tabs>\r\n              </AppBar>\r\n            </>\r\n          )}\r\n        </Sticky>\r\n\r\n        {filterDataList2?.map((filter, index) => (\r\n          <TabPanel value={tabValue} index={index} key={index}>\r\n            <GenerateFilterValue\r\n              filteredData={filteredData}\r\n              filter={filter}\r\n              onFilterValueChange={onFilterChange}\r\n            />\r\n          </TabPanel>\r\n        ))}\r\n      </Drawer>\r\n    );\r\n  }\r\n  function DesktopFilter() {\r\n    return (\r\n      <List component=\"nav\">\r\n        {filterDataList2?.map((filter, index) => (\r\n          <MakeList\r\n            key={index}\r\n            filteredData={filteredData}\r\n            filter={filter}\r\n            onFilterValueChange={onFilterChange}\r\n          />\r\n        ))}\r\n      </List>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        onClick={(event) => setOpenDrawer(true)}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h6\">Filter by</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <FilterListIcon />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Responsive displayIn={[\"Mobile\"]}>\r\n        <MobileFilter />\r\n      </Responsive>\r\n      <Responsive displayIn={[\"Laptop\", \"Tablet\"]}>\r\n        <DesktopFilter />\r\n      </Responsive>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\auth\\SignIn.tsx",["830","831","832"],"import { Snackbar } from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { ControlledTextfield } from \"tools/customDesign/ControlledTextfield\";\r\nimport { Alert } from \"tools/Tools\";\r\nimport AuthService from \"./api/AuthService\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" to=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100vh\",\r\n  },\r\n  image: {\r\n    //https://st4.depositphotos.com/21087722/22869/i/1600/depositphotos_228693110-stock-photo-amazing-succulents-welcome-handwriting-monogram.jpg\r\n    backgroundImage: \"url()\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport function SignIn({ signOut }: { signOut: boolean }) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  function handleSubmitClick(event) {\r\n    event.preventDefault();\r\n    console.log(username);\r\n    if (username == \"\") {\r\n      setMessage(\"Username is empty\");\r\n      setOpen(true);\r\n      return;\r\n    }\r\n    if (password == \"\") {\r\n      setMessage(\"password is empty\");\r\n      setOpen(true);\r\n      return;\r\n    }\r\n    AuthService.signIn(username, password).then((response) => {\r\n      if (response.data.stringValue) {\r\n        setMessage(response.data.stringValue);\r\n        setOpen(true);\r\n        console.log(\"don't match\");\r\n      } else if (response.data.token) {\r\n        console.log(username);\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        console.log(AuthService.getCurrentUser());\r\n        if (response.data.accountType === \"Admin\") {\r\n          history.push({ pathname: \"/admin\" });\r\n        } else {\r\n          history.push({ pathname: \"/home\" });\r\n        }\r\n      }\r\n    });\r\n  }\r\n  function handleSnackbarClose(event?: React.SyntheticEvent, reason?: string) {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  }\r\n  return (\r\n    <Grid component={Paper} elevation={6} square style={{ padding: 5 }}>\r\n      {signOut && (\r\n        <>\r\n          <Snackbar\r\n            open={open}\r\n            onClose={handleSnackbarClose}\r\n            autoHideDuration={2000}\r\n          >\r\n            <Alert onClose={handleSnackbarClose} severity=\"error\">\r\n              {message}\r\n            </Alert>\r\n          </Snackbar>\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign in\r\n            </Typography>\r\n            <form\r\n              className={classes.form}\r\n              noValidate\r\n              onSubmit={handleSubmitClick}\r\n            >\r\n              <ControlledTextfield\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                label=\"Username\"\r\n                name=\"username\"\r\n                autoComplete=\"username\"\r\n                autoFocus\r\n                onBlur={(event) => {\r\n                  setUsername(event.target.value);\r\n                }}\r\n                onChange={(event) => setUsername(event.target.value)}\r\n                pattern=\"letters-digits-no-space\"\r\n              />\r\n              <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                autoComplete=\"password\"\r\n                onBlur={(event) => {\r\n                  setPassword(event.target.value);\r\n                }}\r\n                onChange={(event) => setPassword(event.target.value)}\r\n              />\r\n              <Button\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                className={classes.submit}\r\n              >\r\n                Sign In\r\n              </Button>\r\n              <Grid container>\r\n                <Grid item xs>\r\n                  <Link\r\n                    to={\r\n                      history.location.pathname\r\n                        .split(\"/\")\r\n                        .slice(0, -1)\r\n                        .join(\"/\") + \"/forgot-password\"\r\n                    }\r\n                    variant=\"body2\"\r\n                  >\r\n                    Forgot password?\r\n                  </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link\r\n                    to={\r\n                      history.location.pathname\r\n                        .split(\"/\")\r\n                        .slice(0, -1)\r\n                        .join(\"/\") + \"/signup\"\r\n                    }\r\n                    variant=\"body2\"\r\n                  >\r\n                    {\"Don't have an account? Sign Up\"}\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\filter\\Chips.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\CustomCarousel.js",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\filter\\MakeList.tsx",["833"],"import {\r\n  Collapse,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\nimport { Category } from \"classes/Category\";\r\nimport React, { useState } from \"react\";\r\nimport { CategorySelector } from \"tools/customDesign/CategorySelector\";\r\nimport {\r\n  ICategoryFilter,\r\n  IFilteredValue,\r\n  IFilterType as IFilterType,\r\n  IListFilter,\r\n  ISliderFilter,\r\n} from \"../SearchPage\";\r\nimport { FilterCheckBox } from \"./FilterCheckbox\";\r\nimport { FilterSlider } from \"./FilterSlider\";\r\n\r\nexport function MakeList({\r\n  filteredData,\r\n  filter,\r\n  onFilterValueChange,\r\n}: {\r\n  filteredData: Array<IFilteredValue>;\r\n  filter: IFilterType;\r\n  onFilterValueChange: (value: IFilteredValue, type: \"ADD\" | \"REMOVE\") => void;\r\n}) {\r\n  console.log(\"filter in makelist\", filter);\r\n  const [open, setOpen] = useState(false);\r\n  return (\r\n    <>\r\n      <ListItem key={filter.title} button onClick={() => setOpen(!open)}>\r\n        <ListItemText primary={filter.title} />\r\n      </ListItem>\r\n      <Collapse in={open} timeout=\"auto\">\r\n        <GenerateFilterValue\r\n          filteredData={filteredData}\r\n          filter={filter}\r\n          onFilterValueChange={onFilterValueChange}\r\n        />\r\n      </Collapse>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function GenerateFilterValue({\r\n  filteredData,\r\n  filter,\r\n  onFilterValueChange,\r\n}: {\r\n  filteredData: Array<IFilteredValue>;\r\n  filter: IFilterType;\r\n  onFilterValueChange: (value: IFilteredValue, type: \"ADD\" | \"REMOVE\") => void;\r\n}) {\r\n  if (filter.type === \"CATEGORY\") {\r\n    return (\r\n      <CategorySelector\r\n        categories={(filter as ICategoryFilter).items}\r\n        selectedCategories={filteredData.map(\r\n          (filterValue) =>\r\n            new Category(filterValue.id as number, filterValue.value as string)\r\n        )}\r\n        onCategorySelectionChange={(category, type) => {\r\n          onFilterValueChange(\r\n            {\r\n              type: filter.type,\r\n              title: filter.title,\r\n              value: category.name,\r\n              id: category.id,\r\n            },\r\n            type\r\n          );\r\n        }}\r\n      />\r\n    );\r\n  } else if (filter.type === \"LIST\") {\r\n    return (\r\n      <List>\r\n        {(filter as IListFilter).items.map((item, index) => (\r\n          <ListItem\r\n            key={item.id}\r\n            // @ts-ignore\r\n            value={item}\r\n          >\r\n            <FilterCheckBox\r\n              checked={filteredData.some(\r\n                (data) => data.title === filter.title && data.id === item.id\r\n              )}\r\n              label={item.title}\r\n              onChange={(state) =>\r\n                onFilterValueChange(\r\n                  {\r\n                    type: filter.type,\r\n                    title: filter.title,\r\n                    value: item.title,\r\n                    id: item.id,\r\n                  },\r\n                  state ? \"ADD\" : \"REMOVE\"\r\n                )\r\n              }\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    );\r\n  } else if (filter.type === \"SLIDER\") {\r\n    return (\r\n      <Grid\r\n        style={{ height: \"100%\" }}\r\n        container\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <FilterSlider\r\n          //@ts-ignore\r\n          sliderData={{\r\n            ...filter,\r\n            // @ts-ignore\r\n            value: filteredData.some((item) => item.title === filter.title)\r\n              ? filteredData.find((item) => item.title === filter.title)?.value\r\n              : [(filter as ISliderFilter).min, (filter as ISliderFilter).max],\r\n          }}\r\n          onChange={(value, isClear) =>\r\n            onFilterValueChange(\r\n              {\r\n                type: filter.type,\r\n                title: filter.title,\r\n                value: value,\r\n                valueType: (filter as ISliderFilter).valueType,\r\n              },\r\n              isClear ? \"REMOVE\" : \"ADD\"\r\n            )\r\n          }\r\n          // handleSliderCommitFunc={handleSliderCommit}\r\n          // changeFilteredArrayFunc={handleFilterSliderChange}\r\n        />\r\n      </Grid>\r\n    );\r\n  }\r\n  return <></>;\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\filter\\FilterCheckbox.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\components\\search\\filter\\FilterSlider.tsx",["834","835"],"import { Grid, InputAdornment, Slider, TextField } from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport { ISliderFilter } from \"../SearchPage\";\r\n\r\nexport function FilterSlider({\r\n  sliderData,\r\n  onChange,\r\n}: {\r\n  sliderData: ISliderFilter;\r\n  onChange: (value: number[], isClear: boolean) => void;\r\n}) {\r\n  const [value, setValue] = React.useState(sliderData.value);\r\n  useEffect(() => {\r\n    setValue(sliderData.value);\r\n  }, [sliderData.value]);\r\n\r\n  async function handleSliderChange(newValue) {\r\n    setValue([\r\n      Math.min(newValue[0], newValue[1]),\r\n      Math.max(newValue[0], newValue[1]),\r\n    ]);\r\n    // changeFilteredArrayFunc({ filterType: filterType, min: newValue[0], max: newValue[1] });\r\n  }\r\n  function handleSliderCommit(newValue) {\r\n    setValue([\r\n      Math.min(newValue[0], newValue[1]),\r\n      Math.max(newValue[0], newValue[1]),\r\n    ]);\r\n    onChange(value, value[0] == sliderData.min && value[1] == sliderData.max);\r\n    // let newObject = object;\r\n    // newObject.value = newValue;\r\n    // onObjectChange(newObject);\r\n  }\r\n\r\n  function handleInputChangeMin(minValue) {\r\n    setValue([Math.min(minValue, value[1]), Math.max(minValue, value[1])]);\r\n  }\r\n  function handleInputChangeMax(maxValue) {\r\n    setValue([Math.min(value[0], maxValue), Math.max(value[0], maxValue)]);\r\n  }\r\n  function handleOnBlurMin(minValue) {\r\n    var newVal = Number(minValue);\r\n    minValue = minValue === \"\" ? 0 : newVal;\r\n    var maxValue = value[1];\r\n\r\n    if (newVal < sliderData.min) minValue = sliderData.min;\r\n    if (newVal > sliderData.max) minValue = sliderData.max;\r\n\r\n    handleSliderCommit([minValue, maxValue]);\r\n  }\r\n  const handleOnBlurMax = (maxValue) => {\r\n    var newVal = Number(maxValue);\r\n    var minValue = value[0];\r\n    maxValue = maxValue === \"\" ? 0 : newVal;\r\n\r\n    if (newVal < sliderData.min) maxValue = sliderData.min;\r\n    if (newVal > sliderData.max) maxValue = sliderData.max;\r\n\r\n    handleSliderCommit([minValue, maxValue]);\r\n  };\r\n  function generateMarks() {\r\n    var ara: Array<{ value: number; label: string }> = [];\r\n    for (\r\n      var i = sliderData.min;\r\n      i <= sliderData.max;\r\n      i = i + (sliderData.max - sliderData.min) / 5\r\n    ) {\r\n      ara.push({ value: i, label: \"\" + i + sliderData.valueType });\r\n    }\r\n    return ara;\r\n  }\r\n\r\n  return (\r\n    <Grid item container xs spacing={2}>\r\n      <Grid item xs={12}>\r\n        <Slider\r\n          min={sliderData.min}\r\n          max={sliderData.max}\r\n          step={sliderData.step}\r\n          value={value}\r\n          onChange={(event, newValue) => handleSliderChange(newValue)}\r\n          onChangeCommitted={(event, newValue) => handleSliderCommit(newValue)}\r\n          valueLabelDisplay=\"auto\"\r\n          aria-labelledby=\"range-slider\"\r\n          marks={generateMarks()}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Min value\"\r\n          id=\"outlined-start-adornment\"\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                {sliderData.valueType}\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          variant=\"outlined\"\r\n          value={value[0]}\r\n          onChange={(event) => handleInputChangeMin(event.target.value)}\r\n          onBlur={(event) => handleOnBlurMin(event.target.value)}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Max value\"\r\n          id=\"outlined-start-adornment\"\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                {sliderData.valueType}\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          variant=\"outlined\"\r\n          value={value[1]}\r\n          onChange={(event) => handleInputChangeMax(event.target.value)}\r\n          onBlur={(event) => handleOnBlurMax(event.target.value)}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","D:\\program\\java\\coursebucket\\frontend\\src\\classes\\Category.tsx",[],"D:\\program\\java\\coursebucket\\frontend\\src\\tools\\customDesign\\CategorySelector.tsx",["836","837","838"],"import { Checkbox, FormControlLabel, Typography } from \"@material-ui/core\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport { alpha, makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport SvgIcon from \"@material-ui/core/SvgIcon\";\r\nimport TreeItem from \"@material-ui/lab/TreeItem\";\r\nimport TreeView from \"@material-ui/lab/TreeView\";\r\nimport { Category } from \"classes/Category\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { animated, useSpring } from \"react-spring\"; // web.cjs is required for IE 11 support\r\n\r\nfunction MinusSquare(props) {\r\n  return (\r\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\r\n      {/* tslint:disable-next-line: max-line-length */}\r\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 11.023h-11.826q-.375 0-.669.281t-.294.682v0q0 .401.294 .682t.669.281h11.826q.375 0 .669-.281t.294-.682v0q0-.401-.294-.682t-.669-.281z\" />\r\n    </SvgIcon>\r\n  );\r\n}\r\n\r\nfunction PlusSquare(props) {\r\n  return (\r\n    <SvgIcon fontSize=\"inherit\" style={{ width: 14, height: 14 }} {...props}>\r\n      {/* tslint:disable-next-line: max-line-length */}\r\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 12.977h-4.923v4.896q0 .401-.281.682t-.682.281v0q-.375 0-.669-.281t-.294-.682v-4.896h-4.923q-.401 0-.682-.294t-.281-.669v0q0-.401.281-.682t.682-.281h4.923v-4.896q0-.401.294-.682t.669-.281v0q.401 0 .682.281t.281.682v4.896h4.923q.401 0 .682.281t.281.682v0q0 .375-.281.669t-.682.294z\" />\r\n    </SvgIcon>\r\n  );\r\n}\r\n\r\nfunction CloseSquare(props) {\r\n  return (\r\n    <SvgIcon\r\n      className=\"close\"\r\n      fontSize=\"inherit\"\r\n      style={{ width: 14, height: 14 }}\r\n      {...props}\r\n    >\r\n      {/* tslint:disable-next-line: max-line-length */}\r\n      <path d=\"M17.485 17.512q-.281.281-.682.281t-.696-.268l-4.12-4.147-4.12 4.147q-.294.268-.696.268t-.682-.281-.281-.682.294-.669l4.12-4.147-4.12-4.147q-.294-.268-.294-.669t.281-.682.682-.281.696 .268l4.12 4.147 4.12-4.147q.294-.268.696-.268t.682.281 .281.669-.294.682l-4.12 4.147 4.12 4.147q.294.268 .294.669t-.281.682zM22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0z\" />\r\n    </SvgIcon>\r\n  );\r\n}\r\n\r\nfunction TransitionComponent(props) {\r\n  const style = useSpring({\r\n    from: { opacity: 0, transform: \"translate3d(20px,0,0)\" },\r\n    to: {\r\n      opacity: props.in ? 1 : 0,\r\n      transform: `translate3d(${props.in ? 0 : 20}px,0,0)`,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <animated.div style={style}>\r\n      <Collapse {...props} />\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nTransitionComponent.propTypes = {\r\n  /**\r\n   * Show the component; triggers the enter or exit states\r\n   */\r\n  in: PropTypes.bool,\r\n};\r\n\r\nconst StyledTreeItem = withStyles((theme) => ({\r\n  iconContainer: {\r\n    \"& .close\": {\r\n      opacity: 0.3,\r\n    },\r\n  },\r\n  group: {\r\n    marginLeft: 7,\r\n    paddingLeft: 18,\r\n    borderLeft: `1px dashed ${alpha(theme.palette.text.primary, 0.4)}`,\r\n  },\r\n}))(\r\n  (props: {\r\n    label: string;\r\n    checked: boolean;\r\n    onChange: (checked: boolean) => void;\r\n    nodeId: number;\r\n    children?: any;\r\n    key: number;\r\n  }) => {\r\n    const [checked, setChecked] = useState(false);\r\n    useEffect(() => {\r\n      setChecked(props.checked);\r\n    }, [props.checked]);\r\n\r\n    return (\r\n      <TreeItem\r\n        key={props.key}\r\n        children={props.children}\r\n        nodeId={props.nodeId + \"\"}\r\n        onLabelClick={(event) => {\r\n          // @ts-ignore\r\n          if (event.target.type === \"checkbox\") {\r\n            event.preventDefault();\r\n          }\r\n        }}\r\n        label={\r\n          <>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={checked}\r\n                  onChange={(event) => {\r\n                    props.onChange(!checked);\r\n                    setChecked(!checked);\r\n                  }}\r\n                />\r\n              }\r\n              label=\"\"\r\n            />\r\n            <Typography display=\"inline\">{props.label}</Typography>\r\n          </>\r\n        }\r\n        // TransitionComponent={TransitionComponent}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\nlet i = 1;\r\n\r\nexport function CategorySelector({\r\n  categories,\r\n  selectedCategories,\r\n  onCategorySelectionChange,\r\n}: {\r\n  categories: Array<Category>;\r\n  selectedCategories: Array<Category>;\r\n  onCategorySelectionChange: (\r\n    category: Category,\r\n    type: \"ADD\" | \"REMOVE\"\r\n  ) => void;\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  function ExploreData({ data }: { data: Array<Category> }): any {\r\n    function handleDataChange(item: Category, checked: boolean) {\r\n      onCategorySelectionChange(item, checked ? \"ADD\" : \"REMOVE\");\r\n    }\r\n    return data.map((item, index) =>\r\n      item.children.length > 0 ? (\r\n        <StyledTreeItem\r\n          key={item.id}\r\n          nodeId={item.id}\r\n          label={item.name}\r\n          checked={selectedCategories.some(\r\n            (selectedCategory) => selectedCategory.id == item.id\r\n          )}\r\n          onChange={(checked) => handleDataChange(item, checked)}\r\n        >\r\n          <ExploreData data={item.children} />\r\n        </StyledTreeItem>\r\n      ) : (\r\n        <StyledTreeItem\r\n          key={item.id}\r\n          nodeId={item.id}\r\n          label={item.name}\r\n          checked={selectedCategories.some(\r\n            (selectedCategory) => selectedCategory.id == item.id\r\n          )}\r\n          onChange={(checked) => handleDataChange(item, checked)}\r\n        />\r\n      )\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <TreeView\r\n        className={classes.root}\r\n        defaultCollapseIcon={<MinusSquare />}\r\n        defaultExpandIcon={<PlusSquare />}\r\n        defaultEndIcon={<CloseSquare />}\r\n      >\r\n        <ExploreData data={categories} />\r\n      </TreeView>\r\n    </>\r\n  );\r\n}\r\n",{"ruleId":"839","severity":1,"message":"840","line":11,"column":7,"nodeType":"841","messageId":"842","endLine":11,"endColumn":14},{"ruleId":"839","severity":1,"message":"843","line":397,"column":7,"nodeType":"841","messageId":"842","endLine":397,"endColumn":12},{"ruleId":"839","severity":1,"message":"844","line":398,"column":9,"nodeType":"841","messageId":"842","endLine":398,"endColumn":16},{"ruleId":"845","severity":1,"message":"846","line":132,"column":6,"nodeType":"847","endLine":132,"endColumn":34,"suggestions":"848"},{"ruleId":"849","severity":1,"message":"850","line":141,"column":42,"nodeType":"851","messageId":"852","endLine":141,"endColumn":44},{"ruleId":"853","severity":1,"message":"854","line":172,"column":21,"nodeType":"855","messageId":"856","endLine":172,"endColumn":23},{"ruleId":"849","severity":1,"message":"850","line":175,"column":32,"nodeType":"851","messageId":"852","endLine":175,"endColumn":34},{"ruleId":"853","severity":1,"message":"854","line":177,"column":21,"nodeType":"855","messageId":"856","endLine":177,"endColumn":23},{"ruleId":"849","severity":1,"message":"850","line":180,"column":32,"nodeType":"851","messageId":"852","endLine":180,"endColumn":34},{"ruleId":"853","severity":1,"message":"854","line":182,"column":21,"nodeType":"855","messageId":"856","endLine":182,"endColumn":23},{"ruleId":"849","severity":1,"message":"850","line":185,"column":32,"nodeType":"851","messageId":"852","endLine":185,"endColumn":34},{"ruleId":"849","severity":1,"message":"857","line":13,"column":45,"nodeType":"851","messageId":"852","endLine":13,"endColumn":47},{"ruleId":"849","severity":1,"message":"857","line":19,"column":52,"nodeType":"851","messageId":"852","endLine":19,"endColumn":54},{"ruleId":"839","severity":1,"message":"858","line":68,"column":10,"nodeType":"841","messageId":"842","endLine":68,"endColumn":17},{"ruleId":"839","severity":1,"message":"859","line":68,"column":19,"nodeType":"841","messageId":"842","endLine":68,"endColumn":29},{"ruleId":"839","severity":1,"message":"860","line":82,"column":10,"nodeType":"841","messageId":"842","endLine":82,"endColumn":14},{"ruleId":"839","severity":1,"message":"861","line":82,"column":16,"nodeType":"841","messageId":"842","endLine":82,"endColumn":23},{"ruleId":"862","severity":1,"message":"863","line":97,"column":9,"nodeType":"864","endLine":100,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":123,"column":9,"nodeType":"864","endLine":126,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":134,"column":9,"nodeType":"864","endLine":137,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":145,"column":9,"nodeType":"864","endLine":148,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":156,"column":9,"nodeType":"864","endLine":159,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":167,"column":9,"nodeType":"864","endLine":170,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":178,"column":9,"nodeType":"864","endLine":181,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":189,"column":9,"nodeType":"864","endLine":192,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":200,"column":9,"nodeType":"864","endLine":203,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":211,"column":9,"nodeType":"864","endLine":214,"endColumn":11},{"ruleId":"845","severity":1,"message":"865","line":92,"column":6,"nodeType":"847","endLine":92,"endColumn":16,"suggestions":"866"},{"ruleId":"849","severity":1,"message":"857","line":102,"column":27,"nodeType":"851","messageId":"852","endLine":102,"endColumn":29},{"ruleId":"849","severity":1,"message":"857","line":136,"column":43,"nodeType":"851","messageId":"852","endLine":136,"endColumn":45},{"ruleId":"849","severity":1,"message":"857","line":137,"column":40,"nodeType":"851","messageId":"852","endLine":137,"endColumn":42},{"ruleId":"849","severity":1,"message":"857","line":165,"column":28,"nodeType":"851","messageId":"852","endLine":165,"endColumn":30},{"ruleId":"849","severity":1,"message":"850","line":170,"column":28,"nodeType":"851","messageId":"852","endLine":170,"endColumn":30},{"ruleId":"862","severity":1,"message":"863","line":317,"column":23,"nodeType":"864","endLine":317,"endColumn":59},{"ruleId":"845","severity":1,"message":"867","line":39,"column":6,"nodeType":"847","endLine":39,"endColumn":8,"suggestions":"868"},{"ruleId":"849","severity":1,"message":"857","line":42,"column":27,"nodeType":"851","messageId":"852","endLine":42,"endColumn":29},{"ruleId":"849","severity":1,"message":"857","line":276,"column":25,"nodeType":"851","messageId":"852","endLine":276,"endColumn":27},{"ruleId":"849","severity":1,"message":"850","line":289,"column":25,"nodeType":"851","messageId":"852","endLine":289,"endColumn":27},{"ruleId":"839","severity":1,"message":"869","line":422,"column":24,"nodeType":"841","messageId":"842","endLine":422,"endColumn":34},{"ruleId":"845","severity":1,"message":"870","line":432,"column":6,"nodeType":"847","endLine":432,"endColumn":12,"suggestions":"871"},{"ruleId":"839","severity":1,"message":"844","line":507,"column":7,"nodeType":"841","messageId":"842","endLine":507,"endColumn":14},{"ruleId":"839","severity":1,"message":"869","line":509,"column":24,"nodeType":"841","messageId":"842","endLine":509,"endColumn":34},{"ruleId":"845","severity":1,"message":"872","line":529,"column":6,"nodeType":"847","endLine":529,"endColumn":16,"suggestions":"873"},{"ruleId":"849","severity":1,"message":"857","line":568,"column":46,"nodeType":"851","messageId":"852","endLine":568,"endColumn":48},{"ruleId":"849","severity":1,"message":"857","line":571,"column":37,"nodeType":"851","messageId":"852","endLine":571,"endColumn":39},{"ruleId":"839","severity":1,"message":"874","line":10,"column":10,"nodeType":"841","messageId":"842","endLine":10,"endColumn":15},{"ruleId":"839","severity":1,"message":"875","line":10,"column":17,"nodeType":"841","messageId":"842","endLine":10,"endColumn":27},{"ruleId":"839","severity":1,"message":"876","line":14,"column":10,"nodeType":"841","messageId":"842","endLine":14,"endColumn":29},{"ruleId":"839","severity":1,"message":"877","line":14,"column":31,"nodeType":"841","messageId":"842","endLine":14,"endColumn":43},{"ruleId":"839","severity":1,"message":"878","line":14,"column":45,"nodeType":"841","messageId":"842","endLine":14,"endColumn":49},{"ruleId":"862","severity":1,"message":"863","line":84,"column":13,"nodeType":"864","endLine":84,"endColumn":38},{"ruleId":"839","severity":1,"message":"879","line":110,"column":11,"nodeType":"841","messageId":"842","endLine":110,"endColumn":26},{"ruleId":"862","severity":1,"message":"863","line":125,"column":7,"nodeType":"864","endLine":128,"endColumn":9},{"ruleId":"862","severity":1,"message":"863","line":151,"column":7,"nodeType":"864","endLine":154,"endColumn":9},{"ruleId":"862","severity":1,"message":"863","line":162,"column":7,"nodeType":"864","endLine":165,"endColumn":9},{"ruleId":"862","severity":1,"message":"863","line":173,"column":7,"nodeType":"864","endLine":176,"endColumn":9},{"ruleId":"862","severity":1,"message":"863","line":184,"column":7,"nodeType":"864","endLine":187,"endColumn":9},{"ruleId":"839","severity":1,"message":"880","line":99,"column":10,"nodeType":"841","messageId":"842","endLine":99,"endColumn":15},{"ruleId":"839","severity":1,"message":"881","line":99,"column":17,"nodeType":"841","messageId":"842","endLine":99,"endColumn":25},{"ruleId":"839","severity":1,"message":"882","line":106,"column":9,"nodeType":"841","messageId":"842","endLine":106,"endColumn":14},{"ruleId":"839","severity":1,"message":"883","line":116,"column":10,"nodeType":"841","messageId":"842","endLine":116,"endColumn":26},{"ruleId":"839","severity":1,"message":"884","line":116,"column":28,"nodeType":"841","messageId":"842","endLine":116,"endColumn":47},{"ruleId":"839","severity":1,"message":"885","line":117,"column":10,"nodeType":"841","messageId":"842","endLine":117,"endColumn":22},{"ruleId":"849","severity":1,"message":"850","line":125,"column":52,"nodeType":"851","messageId":"852","endLine":125,"endColumn":54},{"ruleId":"849","severity":1,"message":"857","line":126,"column":47,"nodeType":"851","messageId":"852","endLine":126,"endColumn":49},{"ruleId":"849","severity":1,"message":"857","line":148,"column":54,"nodeType":"851","messageId":"852","endLine":148,"endColumn":56},{"ruleId":"849","severity":1,"message":"857","line":177,"column":28,"nodeType":"851","messageId":"852","endLine":177,"endColumn":30},{"ruleId":"849","severity":1,"message":"857","line":181,"column":35,"nodeType":"851","messageId":"852","endLine":181,"endColumn":37},{"ruleId":"849","severity":1,"message":"857","line":191,"column":30,"nodeType":"851","messageId":"852","endLine":191,"endColumn":32},{"ruleId":"849","severity":1,"message":"857","line":195,"column":37,"nodeType":"851","messageId":"852","endLine":195,"endColumn":39},{"ruleId":"845","severity":1,"message":"886","line":219,"column":6,"nodeType":"847","endLine":219,"endColumn":8,"suggestions":"887"},{"ruleId":"849","severity":1,"message":"850","line":224,"column":23,"nodeType":"851","messageId":"852","endLine":224,"endColumn":25},{"ruleId":"849","severity":1,"message":"857","line":247,"column":28,"nodeType":"851","messageId":"852","endLine":247,"endColumn":30},{"ruleId":"849","severity":1,"message":"857","line":256,"column":35,"nodeType":"851","messageId":"852","endLine":256,"endColumn":37},{"ruleId":"849","severity":1,"message":"857","line":269,"column":28,"nodeType":"851","messageId":"852","endLine":269,"endColumn":30},{"ruleId":"849","severity":1,"message":"857","line":284,"column":35,"nodeType":"851","messageId":"852","endLine":284,"endColumn":37},{"ruleId":"849","severity":1,"message":"857","line":345,"column":25,"nodeType":"851","messageId":"852","endLine":345,"endColumn":27},{"ruleId":"839","severity":1,"message":"888","line":362,"column":10,"nodeType":"841","messageId":"842","endLine":362,"endColumn":18},{"ruleId":"839","severity":1,"message":"889","line":364,"column":9,"nodeType":"841","messageId":"842","endLine":364,"endColumn":21},{"ruleId":"849","severity":1,"message":"857","line":418,"column":33,"nodeType":"851","messageId":"852","endLine":418,"endColumn":35},{"ruleId":"849","severity":1,"message":"857","line":426,"column":34,"nodeType":"851","messageId":"852","endLine":426,"endColumn":36},{"ruleId":"849","severity":1,"message":"857","line":534,"column":29,"nodeType":"851","messageId":"852","endLine":534,"endColumn":31},{"ruleId":"849","severity":1,"message":"857","line":545,"column":29,"nodeType":"851","messageId":"852","endLine":545,"endColumn":31},{"ruleId":"849","severity":1,"message":"857","line":558,"column":29,"nodeType":"851","messageId":"852","endLine":558,"endColumn":31},{"ruleId":"845","severity":1,"message":"890","line":39,"column":6,"nodeType":"847","endLine":39,"endColumn":8,"suggestions":"891"},{"ruleId":"839","severity":1,"message":"860","line":43,"column":7,"nodeType":"841","messageId":"842","endLine":43,"endColumn":11},{"ruleId":"845","severity":1,"message":"892","line":95,"column":6,"nodeType":"847","endLine":95,"endColumn":16,"suggestions":"893"},{"ruleId":"849","severity":1,"message":"850","line":281,"column":20,"nodeType":"851","messageId":"852","endLine":281,"endColumn":22},{"ruleId":"849","severity":1,"message":"850","line":281,"column":42,"nodeType":"851","messageId":"852","endLine":281,"endColumn":44},{"ruleId":"849","severity":1,"message":"850","line":281,"column":61,"nodeType":"851","messageId":"852","endLine":281,"endColumn":63},{"ruleId":"839","severity":1,"message":"894","line":65,"column":9,"nodeType":"841","messageId":"842","endLine":65,"endColumn":13},{"ruleId":"849","severity":1,"message":"850","line":74,"column":20,"nodeType":"851","messageId":"852","endLine":74,"endColumn":22},{"ruleId":"845","severity":1,"message":"895","line":115,"column":6,"nodeType":"847","endLine":115,"endColumn":8,"suggestions":"896"},{"ruleId":"849","severity":1,"message":"857","line":148,"column":52,"nodeType":"851","messageId":"852","endLine":148,"endColumn":54},{"ruleId":"849","severity":1,"message":"857","line":179,"column":60,"nodeType":"851","messageId":"852","endLine":179,"endColumn":62},{"ruleId":"849","severity":1,"message":"857","line":197,"column":72,"nodeType":"851","messageId":"852","endLine":197,"endColumn":74},{"ruleId":"849","severity":1,"message":"857","line":234,"column":29,"nodeType":"851","messageId":"852","endLine":234,"endColumn":31},{"ruleId":"849","severity":1,"message":"857","line":241,"column":35,"nodeType":"851","messageId":"852","endLine":241,"endColumn":37},{"ruleId":"862","severity":1,"message":"863","line":299,"column":9,"nodeType":"864","endLine":302,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":314,"column":9,"nodeType":"864","endLine":317,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":329,"column":9,"nodeType":"864","endLine":332,"endColumn":11},{"ruleId":"862","severity":1,"message":"863","line":345,"column":9,"nodeType":"864","endLine":348,"endColumn":11},{"ruleId":"897","severity":1,"message":"898","line":2,"column":10,"nodeType":"899","messageId":"900","endLine":2,"endColumn":36,"fix":"901"},{"ruleId":"897","severity":1,"message":"898","line":3,"column":10,"nodeType":"899","messageId":"900","endLine":3,"endColumn":36,"fix":"902"},{"ruleId":"849","severity":1,"message":"857","line":52,"column":31,"nodeType":"851","messageId":"852","endLine":52,"endColumn":33},{"ruleId":"849","severity":1,"message":"850","line":148,"column":46,"nodeType":"851","messageId":"852","endLine":148,"endColumn":48},{"ruleId":"849","severity":1,"message":"857","line":152,"column":47,"nodeType":"851","messageId":"852","endLine":152,"endColumn":49},{"ruleId":"903","severity":1,"message":"904","line":229,"column":1,"nodeType":"905","messageId":"906","endLine":270,"endColumn":2},{"ruleId":"897","severity":1,"message":"898","line":2,"column":10,"nodeType":"899","messageId":"900","endLine":2,"endColumn":36,"fix":"907"},{"ruleId":"839","severity":1,"message":"843","line":24,"column":7,"nodeType":"841","messageId":"842","endLine":24,"endColumn":12},{"ruleId":"849","severity":1,"message":"857","line":13,"column":23,"nodeType":"851","messageId":"852","endLine":13,"endColumn":25},{"ruleId":"849","severity":1,"message":"857","line":16,"column":28,"nodeType":"851","messageId":"852","endLine":16,"endColumn":30},{"ruleId":"849","severity":1,"message":"857","line":19,"column":25,"nodeType":"851","messageId":"852","endLine":19,"endColumn":27},{"ruleId":"839","severity":1,"message":"894","line":21,"column":7,"nodeType":"841","messageId":"842","endLine":21,"endColumn":11},{"ruleId":"849","severity":1,"message":"850","line":72,"column":40,"nodeType":"851","messageId":"852","endLine":72,"endColumn":42},{"ruleId":"839","severity":1,"message":"908","line":95,"column":12,"nodeType":"841","messageId":"842","endLine":95,"endColumn":19},{"ruleId":"839","severity":1,"message":"909","line":103,"column":12,"nodeType":"841","messageId":"842","endLine":103,"endColumn":22},{"ruleId":"910","severity":1,"message":"911","line":49,"column":7,"nodeType":"841","messageId":"842","endLine":49,"endColumn":19},{"ruleId":"849","severity":1,"message":"857","line":63,"column":35,"nodeType":"851","messageId":"852","endLine":63,"endColumn":37},{"ruleId":"849","severity":1,"message":"857","line":88,"column":94,"nodeType":"851","messageId":"852","endLine":88,"endColumn":96},{"ruleId":"845","severity":1,"message":"912","line":96,"column":6,"nodeType":"847","endLine":96,"endColumn":8,"suggestions":"913"},{"ruleId":"849","severity":1,"message":"850","line":102,"column":17,"nodeType":"851","messageId":"852","endLine":102,"endColumn":19},{"ruleId":"849","severity":1,"message":"857","line":123,"column":62,"nodeType":"851","messageId":"852","endLine":123,"endColumn":64},{"ruleId":"897","severity":1,"message":"898","line":2,"column":10,"nodeType":"899","messageId":"900","endLine":2,"endColumn":36,"fix":"914"},{"ruleId":"839","severity":1,"message":"915","line":16,"column":10,"nodeType":"841","messageId":"842","endLine":16,"endColumn":31},{"ruleId":"849","severity":1,"message":"857","line":11,"column":19,"nodeType":"851","messageId":"852","endLine":11,"endColumn":21},{"ruleId":"849","severity":1,"message":"857","line":11,"column":50,"nodeType":"851","messageId":"852","endLine":11,"endColumn":52},{"ruleId":"839","severity":1,"message":"916","line":24,"column":10,"nodeType":"841","messageId":"842","endLine":24,"endColumn":17},{"ruleId":"839","severity":1,"message":"917","line":24,"column":19,"nodeType":"841","messageId":"842","endLine":24,"endColumn":29},{"ruleId":"849","severity":1,"message":"857","line":28,"column":15,"nodeType":"851","messageId":"852","endLine":28,"endColumn":17},{"ruleId":"918","severity":1,"message":"919","line":11,"column":43,"nodeType":"920","messageId":"921","endLine":11,"endColumn":44,"suggestions":"922"},{"ruleId":"918","severity":1,"message":"919","line":15,"column":43,"nodeType":"920","messageId":"921","endLine":15,"endColumn":44,"suggestions":"923"},{"ruleId":"918","severity":1,"message":"919","line":19,"column":43,"nodeType":"920","messageId":"921","endLine":19,"endColumn":44,"suggestions":"924"},{"ruleId":"918","severity":1,"message":"919","line":23,"column":29,"nodeType":"920","messageId":"921","endLine":23,"endColumn":30,"suggestions":"925"},{"ruleId":"918","severity":1,"message":"919","line":27,"column":39,"nodeType":"920","messageId":"921","endLine":27,"endColumn":40,"suggestions":"926"},{"ruleId":"849","severity":1,"message":"857","line":74,"column":18,"nodeType":"851","messageId":"852","endLine":74,"endColumn":20},{"ruleId":"845","severity":1,"message":"927","line":104,"column":6,"nodeType":"847","endLine":104,"endColumn":8,"suggestions":"928"},{"ruleId":"849","severity":1,"message":"850","line":43,"column":42,"nodeType":"851","messageId":"852","endLine":43,"endColumn":44},{"ruleId":"849","severity":1,"message":"857","line":44,"column":40,"nodeType":"851","messageId":"852","endLine":44,"endColumn":42},{"ruleId":"849","severity":1,"message":"850","line":54,"column":39,"nodeType":"851","messageId":"852","endLine":54,"endColumn":41},{"ruleId":"849","severity":1,"message":"850","line":87,"column":50,"nodeType":"851","messageId":"852","endLine":87,"endColumn":52},{"ruleId":"849","severity":1,"message":"857","line":88,"column":48,"nodeType":"851","messageId":"852","endLine":88,"endColumn":50},{"ruleId":"849","severity":1,"message":"857","line":105,"column":37,"nodeType":"851","messageId":"852","endLine":105,"endColumn":39},{"ruleId":"849","severity":1,"message":"857","line":106,"column":37,"nodeType":"851","messageId":"852","endLine":106,"endColumn":39},{"ruleId":"849","severity":1,"message":"857","line":107,"column":38,"nodeType":"851","messageId":"852","endLine":107,"endColumn":40},{"ruleId":"849","severity":1,"message":"850","line":109,"column":41,"nodeType":"851","messageId":"852","endLine":109,"endColumn":43},{"ruleId":"849","severity":1,"message":"850","line":109,"column":61,"nodeType":"851","messageId":"852","endLine":109,"endColumn":63},{"ruleId":"849","severity":1,"message":"850","line":111,"column":41,"nodeType":"851","messageId":"852","endLine":111,"endColumn":43},{"ruleId":"849","severity":1,"message":"857","line":111,"column":60,"nodeType":"851","messageId":"852","endLine":111,"endColumn":62},{"ruleId":"849","severity":1,"message":"857","line":116,"column":37,"nodeType":"851","messageId":"852","endLine":116,"endColumn":39},{"ruleId":"849","severity":1,"message":"857","line":117,"column":37,"nodeType":"851","messageId":"852","endLine":117,"endColumn":39},{"ruleId":"849","severity":1,"message":"857","line":118,"column":38,"nodeType":"851","messageId":"852","endLine":118,"endColumn":40},{"ruleId":"849","severity":1,"message":"850","line":120,"column":41,"nodeType":"851","messageId":"852","endLine":120,"endColumn":43},{"ruleId":"849","severity":1,"message":"850","line":120,"column":61,"nodeType":"851","messageId":"852","endLine":120,"endColumn":63},{"ruleId":"849","severity":1,"message":"850","line":122,"column":41,"nodeType":"851","messageId":"852","endLine":122,"endColumn":43},{"ruleId":"849","severity":1,"message":"857","line":122,"column":60,"nodeType":"851","messageId":"852","endLine":122,"endColumn":62},{"ruleId":"862","severity":1,"message":"863","line":46,"column":15,"nodeType":"864","endLine":46,"endColumn":58},{"ruleId":"862","severity":1,"message":"863","line":55,"column":11,"nodeType":"864","endLine":55,"endColumn":34},{"ruleId":"849","severity":1,"message":"857","line":29,"column":22,"nodeType":"851","messageId":"852","endLine":29,"endColumn":24},{"ruleId":"849","severity":1,"message":"857","line":91,"column":45,"nodeType":"851","messageId":"852","endLine":91,"endColumn":47},{"ruleId":"849","severity":1,"message":"857","line":110,"column":52,"nodeType":"851","messageId":"852","endLine":110,"endColumn":54},{"ruleId":"845","severity":1,"message":"929","line":274,"column":6,"nodeType":"847","endLine":274,"endColumn":8,"suggestions":"930"},{"ruleId":"862","severity":1,"message":"863","line":281,"column":11,"nodeType":"864","endLine":284,"endColumn":13},{"ruleId":"849","severity":1,"message":"857","line":318,"column":37,"nodeType":"851","messageId":"852","endLine":318,"endColumn":39},{"ruleId":"849","severity":1,"message":"857","line":40,"column":17,"nodeType":"851","messageId":"852","endLine":40,"endColumn":19},{"ruleId":"849","severity":1,"message":"857","line":41,"column":17,"nodeType":"851","messageId":"852","endLine":41,"endColumn":19},{"ruleId":"849","severity":1,"message":"857","line":42,"column":17,"nodeType":"851","messageId":"852","endLine":42,"endColumn":19},{"ruleId":"849","severity":1,"message":"857","line":43,"column":17,"nodeType":"851","messageId":"852","endLine":43,"endColumn":19},{"ruleId":"897","severity":1,"message":"898","line":3,"column":10,"nodeType":"899","messageId":"900","endLine":3,"endColumn":36,"fix":"931"},{"ruleId":"897","severity":1,"message":"898","line":3,"column":10,"nodeType":"899","messageId":"900","endLine":3,"endColumn":36,"fix":"932"},{"ruleId":"897","severity":1,"message":"898","line":3,"column":10,"nodeType":"899","messageId":"900","endLine":3,"endColumn":36,"fix":"933"},{"ruleId":"897","severity":1,"message":"898","line":3,"column":10,"nodeType":"899","messageId":"900","endLine":3,"endColumn":36,"fix":"934"},{"ruleId":"839","severity":1,"message":"859","line":30,"column":19,"nodeType":"841","messageId":"842","endLine":30,"endColumn":29},{"ruleId":"839","severity":1,"message":"844","line":85,"column":9,"nodeType":"841","messageId":"842","endLine":85,"endColumn":16},{"ruleId":"839","severity":1,"message":"844","line":12,"column":9,"nodeType":"841","messageId":"842","endLine":12,"endColumn":16},{"ruleId":"845","severity":1,"message":"935","line":75,"column":6,"nodeType":"847","endLine":75,"endColumn":25,"suggestions":"936"},{"ruleId":"849","severity":1,"message":"850","line":110,"column":58,"nodeType":"851","messageId":"852","endLine":110,"endColumn":60},{"ruleId":"937","severity":1,"message":"938","line":145,"column":15,"nodeType":"864","messageId":"939","endLine":149,"endColumn":16,"fix":"940"},{"ruleId":"937","severity":1,"message":"938","line":159,"column":15,"nodeType":"864","messageId":"939","endLine":163,"endColumn":16,"fix":"941"},{"ruleId":"937","severity":1,"message":"938","line":170,"column":15,"nodeType":"864","messageId":"939","endLine":174,"endColumn":16,"fix":"942"},{"ruleId":"937","severity":1,"message":"938","line":184,"column":15,"nodeType":"864","messageId":"939","endLine":188,"endColumn":16,"fix":"943"},{"ruleId":"937","severity":1,"message":"938","line":198,"column":15,"nodeType":"864","messageId":"939","endLine":202,"endColumn":16,"fix":"944"},{"ruleId":"937","severity":1,"message":"938","line":212,"column":15,"nodeType":"864","messageId":"939","endLine":216,"endColumn":16,"fix":"945"},{"ruleId":"839","severity":1,"message":"946","line":68,"column":5,"nodeType":"841","messageId":"842","endLine":68,"endColumn":9},{"ruleId":"839","severity":1,"message":"947","line":70,"column":5,"nodeType":"841","messageId":"842","endLine":70,"endColumn":9},{"ruleId":"839","severity":1,"message":"948","line":75,"column":5,"nodeType":"841","messageId":"842","endLine":75,"endColumn":16},{"ruleId":"862","severity":1,"message":"863","line":145,"column":15,"nodeType":"864","endLine":145,"endColumn":34},{"ruleId":"862","severity":1,"message":"863","line":215,"column":15,"nodeType":"864","endLine":215,"endColumn":34},{"ruleId":"839","severity":1,"message":"949","line":24,"column":7,"nodeType":"841","messageId":"842","endLine":24,"endColumn":21},{"ruleId":"845","severity":1,"message":"950","line":55,"column":6,"nodeType":"847","endLine":55,"endColumn":8,"suggestions":"951"},{"ruleId":"849","severity":1,"message":"857","line":71,"column":25,"nodeType":"851","messageId":"852","endLine":71,"endColumn":27},{"ruleId":"849","severity":1,"message":"850","line":68,"column":26,"nodeType":"851","messageId":"852","endLine":68,"endColumn":28},{"ruleId":"849","severity":1,"message":"850","line":69,"column":27,"nodeType":"851","messageId":"852","endLine":69,"endColumn":29},{"ruleId":"849","severity":1,"message":"850","line":70,"column":29,"nodeType":"851","messageId":"852","endLine":70,"endColumn":31},{"ruleId":"849","severity":1,"message":"857","line":113,"column":31,"nodeType":"851","messageId":"852","endLine":113,"endColumn":33},{"ruleId":"849","severity":1,"message":"850","line":119,"column":34,"nodeType":"851","messageId":"852","endLine":119,"endColumn":36},{"ruleId":"839","severity":1,"message":"952","line":55,"column":28,"nodeType":"841","messageId":"842","endLine":55,"endColumn":41},{"ruleId":"845","severity":1,"message":"953","line":66,"column":6,"nodeType":"847","endLine":66,"endColumn":38,"suggestions":"954"},{"ruleId":"849","severity":1,"message":"857","line":80,"column":20,"nodeType":"851","messageId":"852","endLine":80,"endColumn":22},{"ruleId":"849","severity":1,"message":"857","line":80,"column":40,"nodeType":"851","messageId":"852","endLine":80,"endColumn":42},{"ruleId":"849","severity":1,"message":"857","line":97,"column":22,"nodeType":"851","messageId":"852","endLine":97,"endColumn":24},{"ruleId":"849","severity":1,"message":"857","line":122,"column":20,"nodeType":"851","messageId":"852","endLine":122,"endColumn":22},{"ruleId":"849","severity":1,"message":"857","line":224,"column":52,"nodeType":"851","messageId":"852","endLine":224,"endColumn":54},{"ruleId":"849","severity":1,"message":"857","line":240,"column":51,"nodeType":"851","messageId":"852","endLine":240,"endColumn":53},{"ruleId":"849","severity":1,"message":"850","line":305,"column":34,"nodeType":"851","messageId":"852","endLine":305,"endColumn":36},{"ruleId":"839","severity":1,"message":"955","line":190,"column":9,"nodeType":"841","messageId":"842","endLine":190,"endColumn":30},{"ruleId":"839","severity":1,"message":"916","line":23,"column":10,"nodeType":"841","messageId":"842","endLine":23,"endColumn":17},{"ruleId":"839","severity":1,"message":"917","line":23,"column":19,"nodeType":"841","messageId":"842","endLine":23,"endColumn":29},{"ruleId":"849","severity":1,"message":"850","line":38,"column":20,"nodeType":"851","messageId":"852","endLine":38,"endColumn":22},{"ruleId":"849","severity":1,"message":"857","line":52,"column":19,"nodeType":"851","messageId":"852","endLine":52,"endColumn":21},{"ruleId":"849","severity":1,"message":"857","line":62,"column":19,"nodeType":"851","messageId":"852","endLine":62,"endColumn":21},{"ruleId":"849","severity":1,"message":"850","line":75,"column":14,"nodeType":"851","messageId":"852","endLine":75,"endColumn":16},{"ruleId":"849","severity":1,"message":"857","line":84,"column":20,"nodeType":"851","messageId":"852","endLine":84,"endColumn":22},{"ruleId":"849","severity":1,"message":"857","line":84,"column":52,"nodeType":"851","messageId":"852","endLine":84,"endColumn":54},{"ruleId":"845","severity":1,"message":"956","line":50,"column":6,"nodeType":"847","endLine":50,"endColumn":15,"suggestions":"957"},{"ruleId":"849","severity":1,"message":"857","line":218,"column":27,"nodeType":"851","messageId":"852","endLine":218,"endColumn":29},{"ruleId":"849","severity":1,"message":"857","line":270,"column":27,"nodeType":"851","messageId":"852","endLine":270,"endColumn":29},{"ruleId":"839","severity":1,"message":"958","line":319,"column":10,"nodeType":"841","messageId":"842","endLine":319,"endColumn":33},{"ruleId":"849","severity":1,"message":"857","line":17,"column":46,"nodeType":"851","messageId":"852","endLine":17,"endColumn":48},{"ruleId":"845","severity":1,"message":"959","line":21,"column":6,"nodeType":"847","endLine":21,"endColumn":20,"suggestions":"960"},{"ruleId":"839","severity":1,"message":"961","line":1,"column":8,"nodeType":"841","messageId":"842","endLine":1,"endColumn":25},{"ruleId":"839","severity":1,"message":"962","line":6,"column":10,"nodeType":"841","messageId":"842","endLine":6,"endColumn":22},{"ruleId":"839","severity":1,"message":"963","line":8,"column":9,"nodeType":"841","messageId":"842","endLine":8,"endColumn":19},{"ruleId":"839","severity":1,"message":"964","line":9,"column":10,"nodeType":"841","messageId":"842","endLine":9,"endColumn":18},{"ruleId":"839","severity":1,"message":"965","line":10,"column":9,"nodeType":"841","messageId":"842","endLine":10,"endColumn":17},{"ruleId":"839","severity":1,"message":"966","line":12,"column":10,"nodeType":"841","messageId":"842","endLine":12,"endColumn":18},{"ruleId":"839","severity":1,"message":"967","line":13,"column":10,"nodeType":"841","messageId":"842","endLine":13,"endColumn":20},{"ruleId":"839","severity":1,"message":"968","line":13,"column":22,"nodeType":"841","messageId":"842","endLine":13,"endColumn":35},{"ruleId":"839","severity":1,"message":"969","line":15,"column":12,"nodeType":"841","messageId":"842","endLine":15,"endColumn":33},{"ruleId":"839","severity":1,"message":"962","line":3,"column":10,"nodeType":"841","messageId":"842","endLine":3,"endColumn":22},{"ruleId":"839","severity":1,"message":"961","line":4,"column":8,"nodeType":"841","messageId":"842","endLine":4,"endColumn":25},{"ruleId":"839","severity":1,"message":"970","line":15,"column":15,"nodeType":"841","messageId":"842","endLine":15,"endColumn":21},{"ruleId":"910","severity":1,"message":"859","line":12,"column":19,"nodeType":"841","messageId":"842","endLine":12,"endColumn":29},{"ruleId":"910","severity":1,"message":"859","line":13,"column":21,"nodeType":"841","messageId":"842","endLine":13,"endColumn":31},{"ruleId":"897","severity":1,"message":"898","line":3,"column":10,"nodeType":"899","messageId":"900","endLine":3,"endColumn":36,"fix":"971"},{"ruleId":"839","severity":1,"message":"972","line":19,"column":11,"nodeType":"841","messageId":"842","endLine":19,"endColumn":18},{"ruleId":"862","severity":1,"message":"863","line":52,"column":21,"nodeType":"864","endLine":52,"endColumn":55},{"ruleId":"910","severity":1,"message":"973","line":4,"column":10,"nodeType":"841","messageId":"842","endLine":4,"endColumn":16},{"ruleId":"910","severity":1,"message":"859","line":10,"column":19,"nodeType":"841","messageId":"842","endLine":10,"endColumn":29},{"ruleId":"910","severity":1,"message":"973","line":4,"column":10,"nodeType":"841","messageId":"842","endLine":4,"endColumn":16},{"ruleId":"910","severity":1,"message":"859","line":10,"column":19,"nodeType":"841","messageId":"842","endLine":10,"endColumn":29},{"ruleId":"849","severity":1,"message":"857","line":67,"column":47,"nodeType":"851","messageId":"852","endLine":67,"endColumn":49},{"ruleId":"839","severity":1,"message":"860","line":102,"column":9,"nodeType":"841","messageId":"842","endLine":102,"endColumn":13},{"ruleId":"853","severity":1,"message":"974","line":102,"column":34,"nodeType":"855","messageId":"975","endLine":102,"endColumn":36},{"ruleId":"849","severity":1,"message":"857","line":103,"column":42,"nodeType":"851","messageId":"852","endLine":103,"endColumn":44},{"ruleId":"845","severity":1,"message":"976","line":140,"column":6,"nodeType":"847","endLine":140,"endColumn":8,"suggestions":"977"},{"ruleId":"862","severity":1,"message":"863","line":266,"column":23,"nodeType":"864","endLine":266,"endColumn":81},{"ruleId":"910","severity":1,"message":"973","line":4,"column":10,"nodeType":"841","messageId":"842","endLine":4,"endColumn":16},{"ruleId":"910","severity":1,"message":"859","line":10,"column":19,"nodeType":"841","messageId":"842","endLine":10,"endColumn":29},{"ruleId":"910","severity":1,"message":"859","line":10,"column":19,"nodeType":"841","messageId":"842","endLine":10,"endColumn":29},{"ruleId":"839","severity":1,"message":"978","line":36,"column":11,"nodeType":"841","messageId":"842","endLine":36,"endColumn":22},{"ruleId":"849","severity":1,"message":"857","line":96,"column":37,"nodeType":"851","messageId":"852","endLine":96,"endColumn":39},{"ruleId":"839","severity":1,"message":"859","line":16,"column":19,"nodeType":"841","messageId":"842","endLine":16,"endColumn":29},{"ruleId":"839","severity":1,"message":"979","line":58,"column":12,"nodeType":"841","messageId":"842","endLine":58,"endColumn":29},{"ruleId":"839","severity":1,"message":"980","line":63,"column":12,"nodeType":"841","messageId":"842","endLine":63,"endColumn":31},{"ruleId":"839","severity":1,"message":"981","line":5,"column":8,"nodeType":"841","messageId":"842","endLine":5,"endColumn":13},{"ruleId":"839","severity":1,"message":"982","line":8,"column":8,"nodeType":"841","messageId":"842","endLine":8,"endColumn":28},{"ruleId":"839","severity":1,"message":"983","line":9,"column":10,"nodeType":"841","messageId":"842","endLine":9,"endColumn":33},{"ruleId":"839","severity":1,"message":"984","line":10,"column":10,"nodeType":"841","messageId":"842","endLine":10,"endColumn":31},{"ruleId":"897","severity":1,"message":"898","line":3,"column":10,"nodeType":"899","messageId":"900","endLine":3,"endColumn":36,"fix":"985"},{"ruleId":"849","severity":1,"message":"857","line":55,"column":27,"nodeType":"851","messageId":"852","endLine":55,"endColumn":29},{"ruleId":"862","severity":1,"message":"863","line":36,"column":13,"nodeType":"864","endLine":36,"endColumn":75},{"ruleId":"862","severity":1,"message":"863","line":62,"column":23,"nodeType":"864","endLine":62,"endColumn":59},{"ruleId":"849","severity":1,"message":"857","line":128,"column":14,"nodeType":"851","messageId":"852","endLine":128,"endColumn":16},{"ruleId":"862","severity":1,"message":"863","line":300,"column":23,"nodeType":"864","endLine":300,"endColumn":59},{"ruleId":"897","severity":1,"message":"898","line":2,"column":10,"nodeType":"899","messageId":"900","endLine":2,"endColumn":36,"fix":"986"},{"ruleId":"849","severity":1,"message":"857","line":55,"column":47,"nodeType":"851","messageId":"852","endLine":55,"endColumn":49},{"ruleId":"853","severity":1,"message":"974","line":81,"column":34,"nodeType":"855","messageId":"975","endLine":81,"endColumn":36},{"ruleId":"849","severity":1,"message":"857","line":82,"column":42,"nodeType":"851","messageId":"852","endLine":82,"endColumn":44},{"ruleId":"845","severity":1,"message":"987","line":116,"column":6,"nodeType":"847","endLine":116,"endColumn":8,"suggestions":"988"},{"ruleId":"897","severity":1,"message":"898","line":2,"column":10,"nodeType":"899","messageId":"900","endLine":2,"endColumn":36,"fix":"989"},{"ruleId":"910","severity":1,"message":"990","line":8,"column":7,"nodeType":"841","messageId":"842","endLine":8,"endColumn":13},{"ruleId":"839","severity":1,"message":"991","line":22,"column":10,"nodeType":"841","messageId":"842","endLine":22,"endColumn":19},{"ruleId":"839","severity":1,"message":"992","line":79,"column":7,"nodeType":"841","messageId":"842","endLine":79,"endColumn":21},{"ruleId":"849","severity":1,"message":"857","line":90,"column":21,"nodeType":"851","messageId":"852","endLine":90,"endColumn":23},{"ruleId":"849","severity":1,"message":"850","line":90,"column":50,"nodeType":"851","messageId":"852","endLine":90,"endColumn":52},{"ruleId":"849","severity":1,"message":"850","line":210,"column":40,"nodeType":"851","messageId":"852","endLine":210,"endColumn":42},{"ruleId":"839","severity":1,"message":"991","line":17,"column":10,"nodeType":"841","messageId":"842","endLine":17,"endColumn":19},{"ruleId":"849","severity":1,"message":"857","line":79,"column":18,"nodeType":"851","messageId":"852","endLine":79,"endColumn":20},{"ruleId":"849","severity":1,"message":"857","line":95,"column":44,"nodeType":"851","messageId":"852","endLine":95,"endColumn":46},{"ruleId":"849","severity":1,"message":"850","line":107,"column":18,"nodeType":"851","messageId":"852","endLine":107,"endColumn":20},{"ruleId":"849","severity":1,"message":"850","line":236,"column":41,"nodeType":"851","messageId":"852","endLine":236,"endColumn":43},{"ruleId":"849","severity":1,"message":"850","line":241,"column":36,"nodeType":"851","messageId":"852","endLine":241,"endColumn":38},{"ruleId":"839","severity":1,"message":"993","line":29,"column":9,"nodeType":"841","messageId":"842","endLine":29,"endColumn":16},{"ruleId":"839","severity":1,"message":"994","line":30,"column":10,"nodeType":"841","messageId":"842","endLine":30,"endColumn":15},{"ruleId":"839","severity":1,"message":"995","line":30,"column":17,"nodeType":"841","messageId":"842","endLine":30,"endColumn":25},{"ruleId":"839","severity":1,"message":"996","line":143,"column":12,"nodeType":"841","messageId":"842","endLine":143,"endColumn":30},{"ruleId":"839","severity":1,"message":"991","line":17,"column":10,"nodeType":"841","messageId":"842","endLine":17,"endColumn":19},{"ruleId":"849","severity":1,"message":"857","line":75,"column":18,"nodeType":"851","messageId":"852","endLine":75,"endColumn":20},{"ruleId":"849","severity":1,"message":"857","line":80,"column":18,"nodeType":"851","messageId":"852","endLine":80,"endColumn":20},{"ruleId":"897","severity":1,"message":"997","line":14,"column":3,"nodeType":"899","messageId":"900","endLine":14,"endColumn":29,"fix":"998"},{"ruleId":"849","severity":1,"message":"857","line":29,"column":30,"nodeType":"851","messageId":"852","endLine":29,"endColumn":32},{"ruleId":"849","severity":1,"message":"857","line":29,"column":60,"nodeType":"851","messageId":"852","endLine":29,"endColumn":62},{"ruleId":"839","severity":1,"message":"999","line":131,"column":5,"nodeType":"841","messageId":"842","endLine":131,"endColumn":6},{"ruleId":"849","severity":1,"message":"857","line":158,"column":55,"nodeType":"851","messageId":"852","endLine":158,"endColumn":57},{"ruleId":"849","severity":1,"message":"857","line":170,"column":55,"nodeType":"851","messageId":"852","endLine":170,"endColumn":57},"@typescript-eslint/no-unused-vars","'courses' is assigned a value but never used.","Identifier","unusedVar","'match' is assigned a value but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchCourses', 'filteredData', and 'sortType'. Either include them or remove the dependency array.","ArrayExpression",["1000"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Expected '===' and instead saw '=='.","'columns' is assigned a value but never used.","'setColumns' is assigned a value but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'loadCourseContent'. Either include it or remove the dependency array.",["1001"],"React Hook useEffect has a missing dependency: 'width'. Either include it or remove the dependency array. You can also do a functional update 'setWidth(w => ...)' if you only need 'width' in the 'setWidth' call.",["1002"],"'innerWidth' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'height'. Either include it or remove the dependency array. You can also do a functional update 'setHeight(h => ...)' if you only need 'height' in the 'setHeight' call.",["1003"],"React Hook useEffect has missing dependencies: 'height' and 'loadInbox'. Either include them or remove the dependency array. You can also do a functional update 'setHeight(h => ...)' if you only need 'height' in the 'setHeight' call.",["1004"],"'Looks' is defined but never used.","'RateReview' is defined but never used.","'FaChalkboardTeacher' is defined but never used.","'FaDollarSign' is defined but never used.","'FaQq' is defined but never used.","'PurchaseHistory' is defined but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'theme' is assigned a value but never used.","'showErrorMessage' is assigned a value but never used.","'setShowErrorMessage' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'person.accountType', 'person.card', 'person.country', 'person.dob', and 'props.location'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDob' needs the current value of 'person.dob'.",["1005"],"'expanded' is assigned a value but never used.","'handleChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'categoryId'. Either include it or remove the dependency array.",["1006"],"React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["1007"],"'icon' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'course', 'courseId', and 'history.location?.state?.duplicate'. Either include them or remove the dependency array. You can also do a functional update 'setCourse(c => ...)' if you only need 'course' in the 'setCourse' call.",["1008"],"no-useless-rename","Import authHeaders unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"1009","text":"1010"},{"range":"1011","text":"1010"},"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",{"range":"1012","text":"1010"},"'timeout' is defined but never used.","'DrawerList' is defined but never used.","no-unused-vars","'languageItem' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadLanguages'. Either include it or remove the dependency array.",["1013"],{"range":"1014","text":"1010"},"'onEnterPressFocusNext' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["1015","1016"],["1017","1018"],["1019","1020"],["1021","1022"],["1023","1024"],"React Hook useEffect has a missing dependency: 'pattern'. Either include it or remove the dependency array.",["1025"],"React Hook useEffect has missing dependencies: 'popUpNavProperty.admin', 'popUpNavProperty.student', and 'popUpNavProperty.teacher'. Either include them or remove the dependency array.",["1026"],{"range":"1027","text":"1010"},{"range":"1028","text":"1010"},{"range":"1029","text":"1010"},{"range":"1030","text":"1010"},"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["1031"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"1032","text":"1033"},{"range":"1034","text":"1033"},{"range":"1035","text":"1033"},{"range":"1036","text":"1033"},{"range":"1037","text":"1033"},{"range":"1038","text":"1033"},"'type' is assigned a value but never used.","'time' is assigned a value but never used.","'accountType' is assigned a value but never used.","'defaultLecture' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'week.title'. Either include it or remove the dependency array. If 'setFieldValue' needs the current value of 'week.title', you can also switch to useReducer instead of useState and read 'week.title' in the reducer.",["1039"],"'closeSnackbar' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editable' and 'lecture?.file?.type'. Either include them or remove the dependency array. If 'setBody' needs the current value of 'lecture.file.type', you can also switch to useReducer instead of useState and read 'lecture.file.type' in the reducer.",["1040"],"'handleMouseEnterLeave' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'courseId'. Either include it or remove the dependency array.",["1041"],"'FAQOutputQuestionDialog' is defined but never used.","React Hook useEffect has a missing dependency: 'videoFetch'. Either include it or remove the dependency array.",["1042"],"'MUIRichTextEditor' is defined but never used.","'convertToRaw' is defined but never used.","'onFileLoad' is assigned a value but never used.","'pictures' is assigned a value but never used.","'onChange' is assigned a value but never used.","'numPages' is assigned a value but never used.","'pageNumber' is assigned a value but never used.","'setPageNumber' is assigned a value but never used.","'onDocumentLoadSuccess' is defined but never used.","'setKey' is assigned a value but never used.",{"range":"1043","text":"1010"},"'ISource' is defined but never used.","'Drawer' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has a missing dependency: 'loadCourseName'. Either include it or remove the dependency array.",["1044"],"'IFileObject' is defined but never used.","'deleteFromApprove' is defined but never used.","'deleteFromUnapprove' is defined but never used.","'input' is defined but never used.","'PopularCategoryChart' is defined but never used.","'PopularCourseAdminChart' is defined but never used.","'UserRegistrationChart' is defined but never used.",{"range":"1045","text":"1010"},{"range":"1046","text":"1010"},"React Hook useEffect has a missing dependency: 'viewType'. Either include it or remove the dependency array.",["1047"],{"range":"1048","text":"1010"},"'images' is assigned a value but never used.","'Copyright' is defined but never used.","'person' is defined but never used.","'classes' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'handleFilterChange' is defined but never used.","Import IFilterType unnecessarily renamed.",{"range":"1049","text":"1050"},"'i' is assigned a value but never used.",{"desc":"1051","fix":"1052"},{"desc":"1053","fix":"1054"},{"desc":"1055","fix":"1056"},{"desc":"1057","fix":"1058"},{"desc":"1059","fix":"1060"},{"desc":"1061","fix":"1062"},{"desc":"1063","fix":"1064"},{"desc":"1065","fix":"1066"},{"desc":"1067","fix":"1068"},[37,63],"authHeaders",[79,105],[37,63],{"desc":"1069","fix":"1070"},[36,62],{"messageId":"1071","fix":"1072","desc":"1073"},{"messageId":"1074","fix":"1075","desc":"1076"},{"messageId":"1071","fix":"1077","desc":"1073"},{"messageId":"1074","fix":"1078","desc":"1076"},{"messageId":"1071","fix":"1079","desc":"1073"},{"messageId":"1074","fix":"1080","desc":"1076"},{"messageId":"1071","fix":"1081","desc":"1073"},{"messageId":"1074","fix":"1082","desc":"1076"},{"messageId":"1071","fix":"1083","desc":"1073"},{"messageId":"1074","fix":"1084","desc":"1076"},{"desc":"1085","fix":"1086"},{"desc":"1087","fix":"1088"},[75,101],[75,101],[75,101],[75,101],{"desc":"1089","fix":"1090"},[5105,5105]," rel=\"noreferrer\"",[5553,5553],[5945,5945],[6387,6387],[6839,6839],[7295,7295],{"desc":"1091","fix":"1092"},{"desc":"1093","fix":"1094"},{"desc":"1095","fix":"1096"},{"desc":"1097","fix":"1098"},[81,107],{"desc":"1099","fix":"1100"},[75,101],[37,63],{"desc":"1101","fix":"1102"},[37,63],[312,338],"IFilterType","Update the dependencies array to be: [fetchCourses, filteredData, history.location.state.key, sortType]",{"range":"1103","text":"1104"},"Update the dependencies array to be: [courseId, loadCourseContent]",{"range":"1105","text":"1106"},"Update the dependencies array to be: [width]",{"range":"1107","text":"1108"},"Update the dependencies array to be: [data, height]",{"range":"1109","text":"1110"},"Update the dependencies array to be: [height, loadInbox, username]",{"range":"1111","text":"1112"},"Update the dependencies array to be: [history, person.accountType, person.card, person.country, person.dob, props.location]",{"range":"1113","text":"1114"},"Update the dependencies array to be: [categoryId]",{"range":"1115","text":"1116"},"Update the dependencies array to be: [loadData, username]",{"range":"1117","text":"1118"},"Update the dependencies array to be: [course, courseId, history.location?.state?.duplicate]",{"range":"1119","text":"1120"},"Update the dependencies array to be: [loadLanguages]",{"range":"1121","text":"1122"},"removeEscape",{"range":"1123","text":"1124"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1125","text":"1126"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1127","text":"1124"},{"range":"1128","text":"1126"},{"range":"1129","text":"1124"},{"range":"1130","text":"1126"},{"range":"1131","text":"1124"},{"range":"1132","text":"1126"},{"range":"1133","text":"1124"},{"range":"1134","text":"1126"},"Update the dependencies array to be: [pattern]",{"range":"1135","text":"1136"},"Update the dependencies array to be: [popUpNavProperty.admin, popUpNavProperty.student, popUpNavProperty.teacher]",{"range":"1137","text":"1138"},"Update the dependencies array to be: [type, fileObjects, state]",{"range":"1139","text":"1140"},"Update the dependencies array to be: [week.title]",{"range":"1141","text":"1142"},"Update the dependencies array to be: [lecture.title, lecture.preview, lecture?.file?.type, editable]",{"range":"1143","text":"1144"},"Update the dependencies array to be: [courseId, reviews]",{"range":"1145","text":"1146"},"Update the dependencies array to be: [file?.content, videoFetch]",{"range":"1147","text":"1148"},"Update the dependencies array to be: [loadCourseName]",{"range":"1149","text":"1150"},"Update the dependencies array to be: [viewType]",{"range":"1151","text":"1152"},[3044,3072],"[fetchCourses, filteredData, history.location.state.key, sortType]",[3035,3045],"[courseId, loadCourseContent]",[1351,1353],"[width]",[11999,12005],"[data, height]",[14648,14658],"[height, loadInbox, username]",[7500,7502],"[history, person.accountType, person.card, person.country, person.dob, props.location]",[1260,1262],"[categoryId]",[3259,3269],"[loadData, username]",[3728,3730],"[course, courseId, history.location?.state?.duplicate]",[2256,2258],"[loadLanguages]",[257,258],"",[257,257],"\\",[414,415],[414,414],[578,579],[578,578],[716,717],[716,716],[852,853],[852,852],[3260,3262],"[pattern]",[7013,7015],"[popUpNavProperty.admin, popUpNavProperty.student, popUpNavProperty.teacher]",[1807,1826],"[type, fileObjects, state]",[1191,1193],"[week.title]",[1741,1773],"[lecture.title, lecture.preview, lecture?.file?.type, editable]",[1440,1449],"[courseId, reviews]",[886,900],"[file?.content, videoFetch]",[4075,4077],"[loadCourseName]",[3347,3349],"[viewType]"]